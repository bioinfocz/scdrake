[{"path":[]},{"path":"https://bioinfocz.github.io/scdrake/dev/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement jiri.novotny@img.cas.cz. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.0, available https://www.contributor-covenant.org/version/2/0/code_of_conduct.html. Community Impact Guidelines inspired Mozilla’s code conduct enforcement ladder. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to {scdrake}","title":"Contributing to {scdrake}","text":"outlines propose change scdrake. detailed info contributing , tidyverse packages, please see development contributing guide.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to {scdrake}","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to {scdrake}","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed).","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to {scdrake}","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"bioinfocz/scdrake\", fork = TRUE). Install development dependences devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to {scdrake}","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. Use ## -- comments # commenting (disabling) code. Use double quotes (\"gene\") strings. function, easier reading, function arguments used output targets named targets, e.g. sample_sheet_file_trg name target, downstream function using input defined function(sample_sheet_file_trg) {} use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/CONTRIBUTING.html","id":"testing","dir":"","previous_headings":"","what":"Testing","title":"Contributing to {scdrake}","text":"Important () parts scdrake covered testthat unit tests. CI workflow, lighter run automatically Docker image built. Tests heavily controlled environment variables. parsed tests/testthat/setup.R displayed beginning testing. ease manipulation envvars, wrapper script dev/run_tests.R. contains CLI transforms command line parameters envvars used tests. See $ Rscript dev/run_tests.R list CLI parameters time, list envvars tests. ’s also possible run tests within R session, using temporary envvars:","code":"devtools::load_all() withr::with_envvar(   c(\"SCDRAKE_TEST_RUN_PIPELINE_VIGNETTES = \"TRUE\"\"),   devtools::test(filter = \"vignettes\") )"},{"path":"https://bioinfocz.github.io/scdrake/dev/CONTRIBUTING.html","id":"end-to-end-e2e-tests","dir":"","previous_headings":"Testing","what":"End-to-end (e2e) tests","title":"Contributing to {scdrake}","text":"case make bigger changes, fuller testing much recommended. covered several end--end tests tests/testthat/test-run_pipeline.R tests/testthat/test-run_pipeline_vignettes.R. tests computationally demanding run CI. second thing even though e2e tests can succeed, actual validation outputs. Thus, ’s needed manually inspect least produced reports. purpose, persistent output directory can set dev/run_tests.R. can use short snippet run e2e tests preserved outputs:","code":"docker exec -it -u rstudio -w /home/rstudio/scdrake <container_name> \\   r --interactive -L /usr/local/lib/R/site-library -t dev/run_tests.R \\   --no-test-single_sample-full-sct \\   --output-dir /home/rstudio/shared/test_outputs \\   --output-dir-pipeline-tests /home/rstudio/shared/test_outputs/pipeline_outputs"},{"path":"https://bioinfocz.github.io/scdrake/dev/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to {scdrake}","text":"Please note scdrake project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/config_main.html","id":"project-information","dir":"Articles","previous_headings":"","what":"Project information","title":"Main config","text":"Type: character scalar values appear stage reports (HTML documents).","code":"PROJECT_NAME: \"PBMC 1k\" PROJECT_DESCRIPTION: \"1000 of peripheral blood mononuclear cells by 10x Genomics\" INSTITUTE: \"Example institute\" LABORATORY: \"Example laboratory\" PEOPLE: \"Example person 1, Example person 2\""},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/config_main.html","id":"annotation","dir":"Articles","previous_headings":"","what":"Annotation","title":"Main config","text":"Type: character scalar name organism match ANNOTATION_LIST. Type: named list (dictionary) character scalars Mapping organisms OrgDb annotation packages. annotation package selected matching ORGANISM parameter. selected package installed, asked want install . OrgDb list can find annotations many species, e.g. rat. consequent modification config simple: Type: character scalar ENSEMBL species name used build links Ensembl genes website, e.g. https://www.ensembl.org/Homo_sapiens/Gene/Summary?db=core;g=ENSG00000139618;r=13:32315086-32400268 list ENSEMBL species available https://www.ensembl.org/info//species.html.","code":"ORGANISM: \"human\" ANNOTATION_LIST:   human: \"org.Hs.eg.db\"   mouse: \"org.Mm.eg.db\" ORGANISM: \"rat\" ANNOTATION_LIST:   rat: \"org.Rn.eg.db\" ENSEMBL_SPECIES: \"Homo_sapiens\""},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/config_main.html","id":"input-and-output-files","dir":"Articles","previous_headings":"","what":"Input and output files","title":"Main config","text":"Type: character scalar path CSS file used HTML reports rendered RMarkdown files. Type: character scalar path base output directory stage’s files saved (check “Output files” section stage configs).","code":"CSS_FILE: \"Rmd/common/stylesheet.css\" BASE_OUT_DIR: \"output\""},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/config_main.html","id":"targets","dir":"Articles","previous_headings":"","what":"Targets","title":"Main config","text":"informative plan binded every plan, contains targets useful runtime information: config_pipeline, config_main: lists holding pipeline (pipeline.yaml) main (00_main.yaml) parameters. pipeline_type: character scalar: \"single_sample\" \"integration\". values used plans work different targets. sessioninfo_pretty, sessioninfo_base: info loaded packages, R version, etc. Returned sessioninfo::session_info() utils::sessionInfo(), respectively. biocmanager_version: Bioconductor version. external_libs: character vector external shared libraries (e.g. zlib). datetime: date time pipeline execution.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/config_pipeline.html","id":"general-parameters","dir":"Articles","previous_headings":"","what":"General parameters","title":"Pipeline config","text":"Type: character vector null Array target names make. Setting null make targets. Example single-sample pipeline / stage 02_norm_clustering reports: Type: character scalar null name directory store drake’s cache . null, default directory \".drake\" used. Type: logical scalar True, let pipeline continue even target fails. Type: integer scalar (1 | 2 | 3) Verbosity drake: 0: print nothing. 1: print target--target messages make() progresses. 2: show progress bar track many targets done far. Type: logical scalar drake locks R global environment avoid unwanted modifications targets. However, cases needed keep unlocked. Type: logical scalar Don’t wait drake discover locked cache pipeline run unlock immediately. Type: character scalar file format used store intermediate results DRAKE_CACHE_DIR. See https://books.ropensci.org/drake/plans.html#special-data-formats--targets details. default, R’s Rds format used (see ?saveRds), recommend use DRAKE_FORMAT: \"qs\" (see https://github.com/traversc/qs) offers better performance, sometimes doesn’t work correctly (drake throws untraceable errors). Type: character scalar (\"\" | \"current\") null Instruct drake rebuild targets although considered finished. \"\", pipeline run scratch (drake::trigger(condition = TRUE) passed trigger argument drake::make() drake::drake_config()). \"current\", drake::clean() run targets specified DRAKE_TARGETS. Type: character scalar (\"worker\" | \"main\") collect data parallel workers. See caching parameter drake::drake_config(). Type: character scalar (\"speed\" | \"autoclean\" | \"preclean\" | \"lookahead\" | \"unload\" | \"none\") manage target objects memory runtime. See memory_strategy parameter drake::drake_config(). can consider \"autoclean\", \"preclean\" \"lookahead\" conserve memory, expense speed. Type: logical scalar Whether record build times targets. Mac users may notice 20% speedup drake::make() DRAKE_LOG_BUILD_TIMES: False. Type: positive integer scalar null maximum number threads BLAS operations, passed RhpcBLASctl::blas_set_num_threads(). Prevents “BLAS : Program Terminated. tried allocate many memory regions” massive target parallelism used. Set null want keep BLAS defaults. Type: character scalar null path directory pandoc’s binary required rendering HTML reports. can ignore : Scdrake run Docker container. running scdrake RStudio (pandoc bundled). pandoc available PATH environment variable. can check calling system(\"pandoc -v\"). rmarkdown, used pandocs binary resolved rmarkdown::find_pandoc(). Type: integer scalar initial seed random number generator.","code":"DRAKE_TARGETS: null DRAKE_TARGETS: [\"report_norm_clustering\", \"report_norm_clustering_simple\"] DRAKE_CACHE_DIR: \".drake\" DRAKE_KEEP_GOING: False DRAKE_VERBOSITY: 1 DRAKE_LOCK_ENVIR: True DRAKE_UNLOCK_CACHE: True DRAKE_FORMAT: \"rds\" DRAKE_REBUILD: null DRAKE_CACHING: \"worker\" DRAKE_MEMORY_STRATEGY: \"speed\" DRAKE_LOG_BUILD_TIMES: False BLAS_N_THREADS: null RSTUDIO_PANDOC: null SEED: 100"},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/config_pipeline.html","id":"parallelism","dir":"Articles","previous_headings":"","what":"Parallelism","title":"Pipeline config","text":"Type: character scalar (\"loop\" | \"future\" | \"clustermq\") Type drake paralellism. drake knows inner relationships targets plan, also knows targets independent , thus, can run concurrently. called implicit parallelism, fully utilize important feature, just need modify config/pipeline.yaml setting DRAKE_PARALLELISM either: Install BiocManager::install(c(\"future\", \"future.callr\")) specific version clustermq package needed can installed remotes::install_version(\"clustermq\", version = \"0.8.8\") (might need BiocManager::install(\"remotes\")). clustermq also supports HPC cluster schedulers, see details. installed scdrake renv.lock file using Docker image, two packages always installed. general overview drake parallelism see https://books.ropensci.org/drake/hpc.html Type: character scalar scheduler use DRAKE_PARALLELISM \"clustermq\". See https://mschubert.github.io/clustermq/articles/userguide.html#configuration possible values. Type: positive integer scalar number parallel jobs drake. Type: positive integer scalar number parallel jobs processing imports preprocessing tasks. Type: logical scalar Allow disable within-target parallelism BiocParallel package. possible DRAKE_PARALLELISM \"loop\". Type: positive integer scalar number cores within-target parallelism.","code":"DRAKE_PARALLELISM: \"loop\" DRAKE_CLUSTERMQ_SCHEDULER: \"multicore\" DRAKE_N_JOBS: 4 DRAKE_N_JOBS_PREPROCESS: 4 WITHIN_TARGET_PARALLELISM: False N_CORES: 4"},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/config_pipeline.html","id":"targets","dir":"Articles","previous_headings":"","what":"Targets","title":"Pipeline config","text":"informative plan binded every plan, contains targets useful runtime information. See Targets section vignette(\"config_main\").","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/pipeline_overview.html","id":"example-pipeline-output","dir":"Articles","previous_headings":"","what":"Example pipeline output","title":"Pipeline overview","text":"can inspect output pipeline . used datasets : PBMC 1k (v3 chemistry, Cell Ranger 3.0.0) PBMC 3k (v2 chemistry, Cell Ranger 1.1.0) credits datasets go 10x Genomics. Visit https://www.10xgenomics.com/resources/datasets information.","code":""},{"path":[]},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/pipeline_overview.html","id":"single-sample-pipeline","dir":"Articles","previous_headings":"Pipelines","what":"Single-sample pipeline","title":"Pipeline overview","text":"pipeline processing single-sample.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/pipeline_overview.html","id":"stages","dir":"Articles","previous_headings":"Pipelines > Single-sample pipeline","what":"Stages","title":"Pipeline overview","text":"Stage 01_input_qc: reading data, filtering, quality control -> vignette(\"stage_input_qc\") Stage 02_norm_clustering: normalization, HVG selection, dimensionality reduction, clustering, cell type annotation -> vignette(\"stage_norm_clustering\")","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/pipeline_overview.html","id":"integration-pipeline","dir":"Articles","previous_headings":"Pipelines","what":"Integration pipeline","title":"Pipeline overview","text":"pipeline integrate multiple samples processed single-sample pipeline. Just clarification, individual sample also denoted batch. information can found OSCA","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/pipeline_overview.html","id":"stages-1","dir":"Articles","previous_headings":"Pipelines > Integration pipeline","what":"Stages","title":"Pipeline overview","text":"Stage 01_integration: reading data integration -> vignette(\"stage_integration\") Stage 02_int_clustering: post-integration clustering cell annotation -> vignette(\"stage_int_clustering\")","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/pipeline_overview.html","id":"stage-02_int_clustering","dir":"Articles","previous_headings":"Pipelines > Integration pipeline","what":"Stage 02_int_clustering","title":"Pipeline overview","text":"stage basically reproduces clustering cell type annotation steps 02_norm_clustering stage single-sample pipeline. difference user selection final integration method used downstream. HVGs, reduced dimensions, selected markers already computed previous stage (01_integration).","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/pipeline_overview.html","id":"common-stages","dir":"Articles","previous_headings":"Pipelines","what":"Common stages","title":"Pipeline overview","text":"stages common single-sample integration pipelines.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/pipeline_overview.html","id":"stage-cluster_markers","dir":"Articles","previous_headings":"Pipelines > Common stages","what":"Stage cluster_markers","title":"Pipeline overview","text":"stage calculation, visualization reporting cell cluster markers (“global markers”). -> vignette(\"stage_cluster_markers\")","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/pipeline_overview.html","id":"stage-contrasts","dir":"Articles","previous_headings":"Pipelines > Common stages","what":"Stage contrasts","title":"Pipeline overview","text":"stage calculation, visualization reporting differentially expressed markers (“contrasts”). stage basically cluster_markers stage, output related individual comparisons levels cell groupings. Hence “contrasts”, term known bulk RNA-seq sample groups compared -> put contrast. -> vignette(\"stage_contrasts\")","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/pipeline_overview.html","id":"signpost","dir":"Articles","previous_headings":"","what":"Signpost","title":"Pipeline overview","text":"Using Docker image: https://bioinfocz.github.io/scdrake/articles/scdrake_docker.html (vignette(\"scdrake_docker\")) 01 Quick start (single-sample pipeline): vignette(\"scdrake\") 02 Integration pipeline guide: vignette(\"scdrake_integration\") Advanced topics: vignette(\"scdrake_advanced\") Extending pipeline: vignette(\"scdrake_extend\") official drake book: https://books.ropensci.org/drake/ Pipeline overview: vignette(\"pipeline_overview\") FAQ & Howtos: vignette(\"scdrake_faq\") Command line interface (CLI): vignette(\"scdrake_cli\") Config files (internals): vignette(\"scdrake_config\") Environment variables: vignette(\"scdrake_envvars\") Pipeline config -> vignette(\"config_pipeline\") Main config -> vignette(\"config_main\") Stage 01_input_qc: reading data, filtering, quality control -> vignette(\"stage_input_qc\") Stage 02_norm_clustering: normalization, HVG selection, dimensionality reduction, clustering, cell type annotation -> vignette(\"stage_norm_clustering\") Stage 01_integration: reading data integration -> vignette(\"stage_integration\") Stage 02_int_clustering: post-integration clustering cell annotation -> vignette(\"stage_int_clustering\") Stage cluster_markers -> vignette(\"stage_cluster_markers\") Stage contrasts (differential expression) -> vignette(\"stage_contrasts\")","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/scdrake.html","id":"the-three-steps","dir":"Articles","previous_headings":"","what":"The three steps","title":"01 Get started","text":"installation, basically need three steps described run scdrake pipeline.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/scdrake.html","id":"step-1-initialize-a-new-project","dir":"Articles","previous_headings":"The three steps","what":"Step 1: initialize a new project","title":"01 Get started","text":"scdrake project-based package, first step initialize new project. Project simply means directory analysis data take place. also means: current working directory set project directory. Whenever specify file paths config files, relative project directory (e.g. output/plots/figure1.pdf). way project transferable different computers data locations. Now initialize new scdrake project directory. R command line command line (Docker) command line (Singularity) First load scdrake package, call init_project() function: assume running detached container shared directory mounted /home/rstudio/scdrake_projects (described vignette(\"scdrake_docker\")).","code":"library(scdrake) init_project(\"~/scdrake_projects/pbmc1k\", download_example_data = TRUE) mkdir ~/scdrake_projects/pbmc1k cd ~/scdrake_projects/pbmc1k scdrake --download-example-data init-project mkdir ~/scdrake_projects/pbmc1k cd ~/scdrake_projects/pbmc1k docker exec -it -u rstudio -w /home/rstudio/scdrake_projects/pbmc1k <CONTAINER ID or NAME> \\   scdrake --download-example-data init-project mkdir -p ~/scdrake_singularity cd ~/scdrake_singularity mkdir -p home/${USER} scdrake_projects/pbmc1k singularity exec -e --no-home \\     --bind \"home/${USER}/:/home/${USER},scdrake_projects/:/home/${USER}/scdrake_projects\" \\     --pwd \"/home/${USER}/scdrake_projects/pbmc1k\" \\     path/to/scdrake_image.sif \\     scdrake --download-example-data init-project"},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/scdrake.html","id":"section","dir":"Articles","previous_headings":"","what":"01 Get started","title":"01 Get started","text":": Create new project directory named pbmc1k /home/<user>/scdrake_projects Copy files, bundled scdrake package: default YAML configs, Rmd files, R scripts etc Download (needed) yq tool used manipulate YAML files Create new RStudio project (.RProj) file set active project (can disabled) Download example dataset (10x Genomics PBMC) current R working directory switched project’s directory addition, using RStudio, also switch active project. means see arrangement newly created project (opened files) freshly started R session, call library(scdrake) . Important: whenever running scdrake pipeline, make sure working directory set project’s root. Although can specify project directory CLI using -d / --dir parameter, rather recommend always present project’s root directory issue scdrake commands (also conforms project-based approach). can notice examples -d parameter never used. Let’s inspect files project directory:","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/scdrake.html","id":"section-1","dir":"Articles","previous_headings":"","what":"01 Get started","title":"01 Get started","text":"R command line command line (Docker) command line (Singularity) tree tool installed (sudo apt install tree fix ): Otherwise:","code":"fs::dir_tree(all = TRUE) tree Rscript -e 'fs::dir_tree(\"~/scdrake_projects/pbmc1k\")' docker exec -it -u rstudio -w /home/rstudio/scdrake_projects/pbmc1k <CONTAINER ID or NAME> \\   Rscript -e 'fs::dir_tree()' singularity exec -e --no-home \\     --bind \"home/${USER}/:/home/${USER},scdrake_projects/:/home/${USER}/scdrake_projects\" \\     --pwd \"/home/${USER}/scdrake_projects/pbmc1k\" \\     path/to/scdrake_image.sif \\     Rscript -e 'fs::dir_tree()'"},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/scdrake.html","id":"section-2","dir":"Articles","previous_headings":"","what":"01 Get started","title":"01 Get started","text":"important files directories : default configuration files (*.default.yaml) bundled package used supply new parameters local configs (*.yaml) events appear. See vignette(\"scdrake_config\") details. Rmd/: RMarkdown files used reporting pipeline results. stage report Rmd file can edit according needs. _drake_integration.R, _drake_single_sample.R: entry scripts drake pipeline executed run_single_sample_r() run_integration_r(), CLI plan_custom.R: can define drake pipeline (plan) extend scdrake (topic vignette(\"scdrake_extend\")) example_data/: example datasets. raw feature-barcode matrices output cellranger provided 10x Genomics. scdrake.Rproj: RStudio project file. open file RStudio, working directory automatically set project’s root directory.","code":"## /tmp/Rtmp2nWUvE/file13736e1e36d9 ## ├── .here ## ├── Rmd ## │   ├── common ## │   │   ├── _footer.Rmd ## │   │   ├── _header.Rmd ## │   │   ├── cluster_markers.Rmd ## │   │   ├── cluster_markers_table_template.Rmd ## │   │   ├── clustering ## │   │   │   ├── cluster_graph_leiden.Rmd ## │   │   │   ├── cluster_graph_louvain.Rmd ## │   │   │   ├── cluster_graph_walktrap.Rmd ## │   │   │   ├── cluster_kmeans.Rmd ## │   │   │   ├── cluster_sc3.Rmd ## │   │   │   └── clustering.Rmd ## │   │   ├── contrasts.Rmd ## │   │   ├── contrasts_table_template.Rmd ## │   │   └── stylesheet.css ## │   ├── integration ## │   │   ├── 01_integration.Rmd ## │   │   └── 02_int_clustering.Rmd ## │   └── single_sample ## │       ├── 01_input_qc.Rmd ## │       ├── 01_input_qc_children ## │       │   ├── cell_filtering_custom.Rmd ## │       │   ├── cell_filtering_qc.Rmd ## │       │   ├── empty_droplets.Rmd ## │       │   ├── empty_droplets_spat.Rmd ## │       │   ├── gene_filtering_custom.Rmd ## │       │   └── gene_filtering_qc.Rmd ## │       ├── 01_input_qc_spatial.Rmd ## │       ├── 02_norm_clustering.Rmd ## │       └── 02_norm_clustering_simple.Rmd ## ├── _drake_integration.R ## ├── _drake_single_sample.R ## ├── config ## │   ├── integration ## │   │   ├── 00_main.default.yaml ## │   │   ├── 00_main.yaml ## │   │   ├── 01_integration.default.yaml ## │   │   ├── 01_integration.yaml ## │   │   ├── 02_int_clustering.default.yaml ## │   │   ├── 02_int_clustering.yaml ## │   │   ├── cluster_markers.default.yaml ## │   │   ├── cluster_markers.yaml ## │   │   ├── contrasts.default.yaml ## │   │   └── contrasts.yaml ## │   ├── pipeline.default.yaml ## │   ├── pipeline.yaml ## │   └── single_sample ## │       ├── 00_main.default.yaml ## │       ├── 00_main.yaml ## │       ├── 01_input_qc.default.yaml ## │       ├── 01_input_qc.yaml ## │       ├── 02_norm_clustering.default.yaml ## │       ├── 02_norm_clustering.yaml ## │       ├── cluster_markers.default.yaml ## │       ├── cluster_markers.yaml ## │       ├── contrasts.default.yaml ## │       └── contrasts.yaml ## ├── example_data ## │   ├── pbmc1k ## │   │   ├── barcodes.tsv.gz ## │   │   ├── features.tsv.gz ## │   │   └── matrix.mtx.gz ## │   └── pbmc3k ## │       ├── barcodes.tsv ## │       ├── genes.tsv ## │       └── matrix.mtx ## ├── plan_custom.R ## ├── renv.lock ## ├── scdrake.Rproj ## └── selected_markers.csv"},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/scdrake.html","id":"step-2-modify-the-configuration-files","dir":"Articles","previous_headings":"The three steps","what":"Step 2: modify the configuration files","title":"01 Get started","text":"three step guide going run first stage (01_input_qc) single-sample pipeline. stage imports scRNA-seq data, computes per-cell quality control metrics (total number UMI, number detected genes, percentage expressed mitochondrial genes) performs filtering, can either based median absolute deviation (dataset-sensitive filtering, default) custom thresholds (custom filtering). can read stage analysis steps, parameters outputs vignette(\"stage_input_qc\"). configuration files stages stored config/ directory. time need modify single parameter config file 01_input_qc stage. , open config/single_sample/01_input_qc.yaml set value path inside INPUT_DATA \"example_data/pbmc1k\" points directory PBMC 1k example dataset, downloaded project initialization: Important: paths configs must relative project’s root directory, absolute (recommended), unless otherwise stated.","code":"INPUT_DATA:   type: \"cellranger\"   path: \"example_data/pbmc1k\"   delimiter: \",\"   target_name: \"target_name\""},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/scdrake.html","id":"step-3-run-the-single-sample-pipeline","dir":"Articles","previous_headings":"The three steps","what":"Step 3: run the single-sample pipeline","title":"01 Get started","text":"Now ready execute single-sample pipeline. drake pipelines composed individual steps called targets. target represented R expression returns value (R object). target finished, value saved cache directory can used targets load user current R session. drake allows execute pipeline specific targets made. controlled DRAKE_TARGETS parameter config/pipeline.yaml file (see vignette(\"config_pipeline\")). default value DRAKE_TARGETS report_input_qc, represents final target 01_input_qc stage - HTML report. files stage saved output/single_sample directory. report, output/single_sample/01_input_qc/01_input_qc.html. output directory specified BASE_OUT_DIR parameter config/single_sample/00_main.yaml. 00_main.yaml config stores parameters common stages single-sample integration pipeline, e.g. titles organism (see vignette(\"config_main\")). Now let’s run pipeline: R command line command line (Docker) command line (Singularity)","code":"run_single_sample_r() scdrake --pipeline-type single_sample run docker exec -it -u rstudio -w /home/rstudio/scdrake_projects/pbmc1k <CONTAINER ID or NAME> \\   scdrake --pipeline-type single_sample run singularity exec -e --no-home \\     --bind \"home/${USER}/:/home/${USER},scdrake_projects/:/home/${USER}/scdrake_projects\" \\     --pwd \"/home/${USER}/scdrake_projects/pbmc1k\" \\     path/to/scdrake_image.sif \\     scdrake --pipeline-type single_sample run"},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/scdrake.html","id":"section-3","dir":"Articles","previous_headings":"","what":"01 Get started","title":"01 Get started","text":"Now can inspect HTML report located output/single_sample/01_input_qc/01_input_qc.html. gives summary view quality dataset shows filtering type affects number cells. report mostly self-explanatory explains analysis steps took place visual outputs.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/scdrake.html","id":"recapitulation","dir":"Articles","previous_headings":"","what":"Recapitulation","title":"01 Get started","text":"three steps seen basic functionality scdrake. can briefly summarize : begin analysis, initialize new project directory (Step 1) stage (e.g. 01_input_qc) configuration file pipeline (single-sample integration) general configuration file (00_main.yaml), used throughout pipeline’s stages Runtime (non-analysis) parameters set pipeline.yaml stage final target: HTML report. However, intermediate target can specified made. stage general config vignette describing analysis steps, parameters outputs (targets - R objects, HTML reports): Pipeline config -> vignette(\"config_pipeline\") Main config -> vignette(\"config_main\") Stage 01_input_qc: reading data, filtering, quality control -> vignette(\"stage_input_qc\") Stage 02_norm_clustering: normalization, HVG selection, dimensionality reduction, clustering, cell type annotation -> vignette(\"stage_norm_clustering\") Stage 01_integration: reading data integration -> vignette(\"stage_integration\") Stage 02_int_clustering: post-integration clustering cell annotation -> vignette(\"stage_int_clustering\") Stage cluster_markers -> vignette(\"stage_cluster_markers\") Stage contrasts (differential expression) -> vignette(\"stage_contrasts\") can navigate vignettes top bar Articles drop-menu. integration pipeline might interested guide vignette(\"scdrake_integration\") Note default config files meant example PBMC data, analyse data, read section important steps .","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/scdrake.html","id":"modifying-parameters-and-rerunning-the-pipeline","dir":"Articles","previous_headings":"","what":"Modifying parameters and rerunning the pipeline","title":"01 Get started","text":"Let’s practice bit scdrake modify cell filtering parameter. also demonstrate drake’s ability skip finished targets. Let’s assume decided strict dataset-sensitive cell filtering want use MAD threshold 2. time, want save report different file can compared previous, benevolent filtering. Now open config/single_sample/01_input_qc.yaml change: repeating Step 3 can see time-consuming targets sce_raw empty_droplets skipped. Also, simply output HTML report new parameter different directory (output/single_sample/01_input_qc_strict/01_input_qc.html), can easily compare previous report. open new report, can see cells filtered .","code":"MAD_THRESHOLD: 2 INPUT_QC_BASE_OUT_DIR: \"01_input_qc_strict\""},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/scdrake.html","id":"cell-clustering-and-annotation","dir":"Articles","previous_headings":"","what":"Cell clustering and annotation","title":"01 Get started","text":"Now look perhaps important outcomes scRNA-seq data analysis: cell clustering cell type annotation. particular procedures implemented second stage 02_norm_clustering single-sample pipeline (see vignette(\"stage_norm_clustering\")). Clustering annotation preceded necessary steps, importantly: normalization, highly variable genes selection, PCA calculation, dimensionality reduction using principal components (UMAP, t-SNE). similar stage also available integration pipeline: 02_int_clustering (see vignette(\"stage_int_clustering\")). Initially, won’t make changes config/single_sample/02_norm_clustering.yaml config keep sensible defaults: Normalization deconvolution (scuttle::computePooledFactors()) Selection top 1000 highly variable genes based variance Selection first 15 principal components used downstream steps Graph-based clustering using Leiden algorithm five different resolutions result different number detected clusters (granularity) Automatic cell type annotation (SingleR) using two reference datasets: Human Primary Cell Atlas (celldex::HumanPrimaryCellAtlasData()) Monaco Immune Data (celldex::MonacoImmuneData()) need order perform 02_norm_clustering stage just change targets drake: open config/pipeline.yaml change DRAKE_TARGETS [\"report_norm_clustering\", \"report_norm_clustering_simple\"] targets make two reports stage. first one includes technical details important analysis steps, second one simplified limited dimensionality reduction plots. Now run pipeline using familiar command Step 3. can go report located output/single_sample/02_norm_clustering/02_norm_clustering.html file. report provides necessary information performed analysis steps, graphical outputs, importantly dimensionality reduction plots displaying cell-cluster membership. Also, end report can find results automatic cell type annotation. can see clusters represents main immune cell types. interested markers predicted cell types, can click Marker heatmaps PDF link.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/scdrake.html","id":"visualizing-markers-of-interest","dir":"Articles","previous_headings":"Cell clustering and annotation","what":"Visualizing markers of interest","title":"01 Get started","text":"scdrake convenient way visualize expression markers interest reduced dimensions. simply uses CSV file defines groups markers given symbol. example CSV file (selected_markers.csv) bundled scdrake automatically copied root new project initialization: first column specifies group markers (cell types case) second column lists marker symbols separated colon. Note header. enable usage file subsequent generation expression plots, config/single_sample/02_norm_clustering.yaml simply change SELECTED_MARKERS_FILE \"selected_markers.csv\" Now two options tell scdrake make expression plots (PDFs) using CSV file: Rerun pipeline, .e. make report_norm_clustering report_norm_clustering_simple targets also provide links generated PDF files (Dimensionality reduction plots section). config/pipeline.yaml change DRAKE_TARGETS [\"selected_markers_plots_files_out\"]. target outputs PDF files output/single_sample/selected_markers_plots directory (links report lead ). three PDFs different reduced dimensions (PCA, t-SNE, UMAP) contains matrix expression plots genes supplied CSV file.","code":"Naive_CD4+_T,IL7R:CCR7 Memory_CD4+,IL7R:S100A4 CD14+_Mono,CD14:LYZ B,MS4A1 CD8+_T,CD8A FCGR3A+_Mono,FCGR3A:MS4A7 NK,GNLY:NKG7 DC,FCER1A:CST3 Platelet,PPBP"},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/scdrake.html","id":"assigning-labels-to-clusters","dir":"Articles","previous_headings":"Cell clustering and annotation","what":"Assigning labels to clusters","title":"01 Get started","text":"identities clusters known, possible transform cluster numbers informative cell type names. handy parameter CELL_GROUPINGS config/single_sample/02_norm_clustering.yaml. Let’s say want manually annotate clusters Leiden clustering resolution 0.4 0.6. can change parameter follows (please, search biological relevance - used annotation solely purposed demonstrate usage parameter): two items CELL_GROUPINGS, referencing Leiden clustering different resolution. first item/grouping following structure: source_column: \"cluster_graph_leiden_r0.4\": name cell metadata column use new assignments. usually result clustering can find clusterings named vignette(\"stage_norm_clustering\") Outputs tab. description: \"Graph-based clustering ...\": description new assignment. set, name grouping (cluster_graph_leiden_r0.4_annotated) used instead. assignments: assignments old labels new ones. , cluster 6 renamed \"B\", clusters 1 7 merged new label \"memory_CD4+\". unspecified old labels kept . new cell groupings can referenced parameters. example, can add NORM_CLUSTERING_REPORT_DIMRED_PLOTS_OTHER list, specifies variables color cells dimensionality reduction plots: new groupings specifying plot titles - taken CELL_GROUPINGS description item. , two options generate plots: config/pipeline.yaml change DRAKE_TARGETS report_norm_clustering report_norm_clustering_simple, rerun pipeline. can see new plots Dimensionality reduction plots section report. Just make PDF files: use [\"dimred_plots_other_vars_files_out\"] DRAKE_TARGETS. files saved output/single_sample/dimred_plots directory named cluster_graph_leiden_r0.4_annotated_<dimred_name> etc. (, files referenced report). also possible assign custom cell metadata CSV file - see ADDITIONAL_CELL_DATA_FILE parameter vignette(\"stage_norm_clustering\") “want manually annotate cells” section vignette(\"scdrake_faq\"). Note CELL_GROUPINGS ADDITIONAL_CELL_DATA_FILE also available 02_int_clustering stage integration pipeline.","code":"CELL_GROUPINGS:   - cluster_graph_leiden_r0.4_annotated:       source_column: \"cluster_graph_leiden_r0.4\"       description: \"Graph-based clustering (Leiden alg., r = 0.4), annotated clusters\"       assignments:         1: \"memory CD4+\"         6: \"B\"         7: \"memory CD4+\"     cluster_graph_leiden_r0.6_annotated:       source_column: \"cluster_graph_leiden_r0.6\"       description: \"Graph-based clustering (Leiden alg., r = 0.6), annotated clusters\"       assignments:         2: \"TNK\"         3: \"CD4 naive\" NORM_CLUSTERING_REPORT_DIMRED_PLOTS_OTHER:   - \"phase\": \"Cell cycle phases\"     \"doublet_score\": \"Doublet score\"     \"total\": \"Total number of UMI\"     \"detected\": \"Detected number of genes\"     \"cluster_graph_leiden_r0.4_annotated\": null     \"cluster_graph_leiden_r0.6_annotated\": null"},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/scdrake.html","id":"calculation-of-marker-genes","dir":"Articles","previous_headings":"Cell clustering and annotation","what":"Calculation of marker genes","title":"01 Get started","text":"Besides visualization marker genes interest, one can also calculate statistical tests discover markers drive separation cells clusters. won’t go details ; see vignette(\"stage_cluster_markers\") describes cluster_markers stage, available single-sample integration pipelines. also possible perform differential gene expression clusters (general, groups cells) contrasts stage (see vignette(\"stage_contrasts\")). Note stages can reference cell groupings defined CELL_GROUPINGS parameter.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/scdrake.html","id":"important-before-you-analyse-your-own-data","dir":"Articles","previous_headings":"","what":"Important: before you analyse your own data","title":"01 Get started","text":"default config files designed work provided example data. parameters mostly default arguments underlying functions packages called scdrake set according common/best analysis practices (e.g. described OSCA). Anyway, worth saying : parameters critical pipeline fail immediately wrongly set kept default value (e.g. INPUT_DATA) scRNA-seq datasets , parameters need adjustment (e.g. low-quality datasets might need strict cell filtering) can find important parameters review run pipeline data first time. parameters documented vignettes respective stages general configs.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/scdrake.html","id":"pipeline-config-pipeline-yaml","dir":"Articles","previous_headings":"Important: before you analyse your own data","what":"Pipeline config (pipeline.yaml)","title":"01 Get started","text":"-> vignette(\"config_pipeline\") DRAKE_TARGETS: targets want make","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/scdrake.html","id":"main-config-00_main-yaml","dir":"Articles","previous_headings":"Important: before you analyse your own data","what":"Main config (00_main.yaml)","title":"01 Get started","text":"-> vignette(\"config_main\") ORGANISM, ANNOTATION_LIST: organism name match proper annotation package defined ANNOTATION_LIST ENSEMBL_SPECIES: ENSEMBL species name used build links Ensembl genes website BASE_OUT_DIR: path base output directory stage’s files saved","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/scdrake.html","id":"single-sample-input-qc-stage-01_input_qc-yaml","dir":"Articles","previous_headings":"Important: before you analyse your own data","what":"Single-sample / Input QC stage (01_input_qc.yaml)","title":"01 Get started","text":"-> vignette(\"stage_input_qc\") INPUT_DATA: specifies type location input data EMPTY_DROPLETS_ENABLED: enable/disable removal empty droplets SAVE_DATASET_SENSITIVE_FILTERING: enable dataset-sensitive custom thresholds cell filtering","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/scdrake.html","id":"single-sample-normalization-and-clustering-stage-02_norm_clustering-yaml","dir":"Articles","previous_headings":"Important: before you analyse your own data","what":"Single-sample / Normalization and clustering stage (02_norm_clustering.yaml)","title":"01 Get started","text":"-> vignette(\"stage_norm_clustering\") NORMALIZATION_TYPE: normalization UMI/counts either {scuttle} ({scran}) sctransform (Seurat) HVG_METRIC, HVG_SELECTION, HVG_SELECTION_VALUE: select highly variable genes PCA_SELECTION_METHOD, PCA_FORCED_PCS (PCA_SELECTION_METHOD \"forced\"): select number first principal components CLUSTER_GRAPH_LEIDEN_ENABLED, CLUSTER_GRAPH_LEIDEN_RESOLUTIONS CLUSTER_GRAPH_LOUVAIN_ENABLED, CLUSTER_GRAPH_LOUVAIN_RESOLUTIONS CLUSTER_GRAPH_WALKTRAP_ENABLED CLUSTER_KMEANS_K_ENABLED, CLUSTER_KMEANS_KBEST_ENABLED, CLUSTER_KMEANS_K CLUSTER_SC3_ENABLED, CLUSTER_SC3_K, CLUSTER_SC3_N_CORES","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/scdrake.html","id":"integration-integration-stage-01_integration-yaml","dir":"Articles","previous_headings":"Important: before you analyse your own data","what":"Integration / Integration stage (01_integration.yaml)","title":"01 Get started","text":"-> vignette(\"stage_integration\") INTEGRATION_SOURCES: similar INPUT_DATA parameter, specify types paths datasets integrated","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/scdrake.html","id":"integration-post-integration-clustering-stage-02_int_clustering-yaml","dir":"Articles","previous_headings":"Important: before you analyse your own data","what":"Integration / Post-integration clustering stage (02_int_clustering.yaml)","title":"01 Get started","text":"-> vignette(\"stage_int_clustering\") Clustering parameters: 02_norm_clustering.yaml config single-sample pipeline","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/scdrake.html","id":"common-cluster-markers-and-contrasts-stages-cluster_markers-yaml-contrasts-yaml","dir":"Articles","previous_headings":"Important: before you analyse your own data","what":"Common / Cluster markers and contrasts stages (cluster_markers.yaml, contrasts.yaml)","title":"01 Get started","text":"-> vignette(\"stage_cluster_markers\"), vignette(\"stage_contrasts\") CLUSTER_MARKERS_SOURCES, CONTRASTS_SOURCES: cell groupings (e.g. clusters particular clustering algorithm) calculate markers differential gene expression","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/scdrake.html","id":"updating-the-project-files","dir":"Articles","previous_headings":"","what":"Updating the project files","title":"01 Get started","text":"new version scdrake released, can update project (assuming working directory scdrake project’s root): R command line command line (Docker) command line (Singularity)","code":"update_project() scdrake update-project docker exec -it -u rstudio -w /path/to/scdrake/project <CONTAINER ID or NAME> \\   scdrake update-project singularity exec -e --no-home \\     --bind \"home/${USER}/:/home/${USER},scdrake_projects/:/home/${USER}/scdrake_projects\" \\     --pwd \"/home/${USER}/scdrake_projects/project\" \\     path/to/scdrake_image.sif \\     scdrake update-project"},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/scdrake.html","id":"section-4","dir":"Articles","previous_headings":"","what":"01 Get started","title":"01 Get started","text":"overwrite project files package-bundled ones: RMarkdown documents Rmd/ Initial scripts run_single_sample_r() run_integration_r() (wrappers around drake::r_make()): _drake_single_sample.R _drake_integration.R Default YAML configs config/ (*.default.yaml) default, asked want continue, might lose local modifications.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/scdrake.html","id":"going-further","dir":"Articles","previous_headings":"","what":"Going further","title":"01 Get started","text":"Now know scdrake basics: initialize new project files contain. modify pipeline parameters stored YAML config files. run pipeline. integration pipeline might interested guide vignette(\"scdrake_integration\"). full insight scdrake can also read following vignettes: Using Docker image: https://bioinfocz.github.io/scdrake/articles/scdrake_docker.html (vignette(\"scdrake_docker\")) Advanced topics: vignette(\"scdrake_advanced\") Extending pipeline: vignette(\"scdrake_extend\") official drake book: https://books.ropensci.org/drake/ Pipeline overview: vignette(\"pipeline_overview\") FAQ & Howtos: vignette(\"scdrake_faq\") Command line interface (CLI): vignette(\"scdrake_cli\") Config files (internals): vignette(\"scdrake_config\") Environment variables: vignette(\"scdrake_envvars\")","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/scdrake_advanced.html","id":"retrieving-intermediate-results-targets","dir":"Articles","previous_headings":"","what":"Retrieving intermediate results (targets)","title":"Advanced topics","text":"drake’s terminology, pipeline called plan, composed targets. target finished, value (object) saved cache (directory .drake default). cache two main purposes: target changed, value loaded cache. Change involves e.g. target’s definition (code) change upstream targets target depends. way drake able skip computation finished targets greatly enhance runtime. details . Users also access cache, can load finished target R session. Users can access cache via two drake’s functions: drake::loadd() loads target’s value current session variable name. drake::readd() returns target’s value (can assigned variable). Let’s try load filtered SingleCellExperiment object: Value target sce_final_input_qc loaded variable name current R session (precisely, global environment). Similarly, can load target variable choice: work loaded object, e.g.","code":"drake::loadd(sce_final_input_qc) sce <- drake::readd(sce_final_input_qc) scater::plotExpression(sce, \"NOC2L\", exprs_values = \"counts\", swap_rownames = \"SYMBOL\")"},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/scdrake_advanced.html","id":"how-to-dig-into-scdrake-plans","dir":"Articles","previous_headings":"","what":"How to dig into scdrake plans?","title":"Advanced topics","text":"schematic overview pipelines stages see vignette(\"pipeline_overview\"), also diagrams. Advanced users might interested looking source code scdrake’s plans (files named plans_*.R).","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/scdrake_advanced.html","id":"running-the-pipeline-in-parallel-mode","dir":"Articles","previous_headings":"","what":"Running the pipeline in parallel mode","title":"Advanced topics","text":"drake knows inner relationships targets plan, also knows targets independent , thus, can run concurrently. called implicit parallelism, fully utilize important feature, just need modify config/pipeline.yaml setting DRAKE_PARALLELISM either: Install BiocManager::install(c(\"future\", \"future.callr\")) specific version clustermq package needed can installed remotes::install_version(\"clustermq\", version = \"0.8.8\") (might need BiocManager::install(\"remotes\")). clustermq also supports HPC cluster schedulers, see details. installed scdrake renv.lock file using Docker image, two packages always installed. general overview drake parallelism see https://books.ropensci.org/drake/hpc.html","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/scdrake_advanced.html","id":"using-an-alternative-storage-format-qs","dir":"Articles","previous_headings":"","what":"Using an alternative storage format (qs)","title":"Advanced topics","text":"default, R’s Rds format used (see ?saveRds) save intermediate results drakes cache, instead, recommend use DRAKE_FORMAT: \"qs\" (see https://github.com/traversc/qs) config/pipeline.yaml offers better performance, sometimes doesn’t work correctly (drake throws untraceable errors). See https://books.ropensci.org/drake/plans.html#special-data-formats--targets details.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/scdrake_advanced.html","id":"extending-the-pipeline","dir":"Articles","previous_headings":"","what":"Extending the pipeline","title":"Advanced topics","text":"See vignette(\"scdrake_extend\"), please.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/scdrake_cli.html","id":"using-the-cli","dir":"Articles","previous_headings":"","what":"Using the CLI","title":"Command line interface","text":"can display help message running scdrake scdrake -h. CLI offers several commands wrap frequently used scdrake functions. options flags command-specific. usage : Current commands listed .","code":"scdrake [OPTIONS/FLAGS] <COMMAND>"},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/scdrake_cli.html","id":"init-project","dir":"Articles","previous_headings":"Using the CLI","what":"<init-project>","title":"Command line interface","text":"Initializes new scdrake project, default current working directory. also download example data specify --download-example-data tag. Wraps init_project().","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/scdrake_cli.html","id":"run","dir":"Articles","previous_headings":"Using the CLI","what":"<run>","title":"Command line interface","text":"Runs pipeline according --pipeline-type parameter can currently single_sample integration. Wraps run_single_sample_r() run_integration_r().","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/scdrake_cli.html","id":"update-project","dir":"Articles","previous_headings":"Using the CLI","what":"<update-project>","title":"Command line interface","text":"Updates project files, default current working directory. Wraps update_project().","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/scdrake_cli.html","id":"download-example-data","dir":"Articles","previous_headings":"Using the CLI","what":"<download-example-data>","title":"Command line interface","text":"Downloads example data: PBMC 1k 3k 10x Genomics. Wraps download_pbmc1k() download_pbmc3k().","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/scdrake_cli.html","id":"check","dir":"Articles","previous_headings":"Using the CLI","what":"<check>","title":"Command line interface","text":"Checks scdrake dependencies. Wraps check_scdrake().","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/scdrake_cli.html","id":"technical-notes","dir":"Articles","previous_headings":"","what":"Technical notes","title":"Command line interface","text":"CLI actually consists two scripts: r called littler basically friendly robust alternative Rscript. need run script interactively, can achieved r --interactive case use shebang line (#!/usr/bin/env r --interactive) script doesn’t accept additional parameters. ’s using intermediate shell script.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/scdrake_config.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"scdrake config internals","text":"scdrake configs stored YAML files (config/ directory default), parsed R lists used build drake plans. YAML (quick reference, cheatsheets ) human-readable format uses indentation (spaces) nesting parameters. scdrake using concept default local configs. Default configs bundled package copied project initialization, update, pipeline run (e.g. run_single_sample_r()). Local configs , name suggests, purposed make modifications default configs (see section actually done). Default local configs named *.default.yaml *.yaml, respectively. Config files separated according general parameters pipeline’s main stage (quality control, normalization, etc.), consistency always read (default run e.g. run_single_sample_r()). paths configs must relative project root, absolute (recommended), unless otherwise stated.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/scdrake_config.html","id":"updating-merging-configs","dir":"Articles","previous_headings":"","what":"Updating (merging) configs","title":"scdrake config internals","text":"may happen new parameters added default configs. case, new parameters need appended local configs, preserving current local parameters. Calling procedure “update” little bit misleading, actually overwrite default config local one append new parameters default config . “Merging” better word, merge default config local one (order matter). Configs merged recursively parameter names. necessary realize YAML format nested dictionaries (named lists context R). , YAML R parsed list: , example, given YAML default config, want merge local config resulting FOO updated. BAR FOO_LIST overwritten local config. FOO_NAMED_LIST: FOO_2 updated, BAR_3 added, BAR_2 still present, although defined local config!","code":"# Default config. FOO: 1 BAR: \"baz\" FOO_LIST: [1, \"hello\"] FOO_NAMED_LIST:   FOO_2: 2   BAR_2: \"zab\" list(FOO = 1L, BAR = \"baz\", FOO_LIST = list(1L, \"hello\"), FOO_NAMED_LIST = list(FOO_2 = 2L, BAR_2 = \"zab\")) # Local config. BAR: \"zab\" FOO_LIST: [4, 5, 6] FOO_NAMED_LIST:   FOO_2: 3   BAR_3: 5 # Updated local config. FOO: 1 BAR: \"zab\" FOO_LIST: [4, 5, 6] FOO_NAMED_LIST:   FOO_2: 3   BAR_2: \"zab\"   BAR_3: 5"},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/scdrake_config.html","id":"merging-of-nested-named-lists","dir":"Articles","previous_headings":"Updating (merging) configs","what":"Merging of nested named lists","title":"scdrake config internals","text":"overcome problem FOO_NAMED_LIST, parameters structure specified named list wrapped unnamed list: Note beginning - creating unnamed list indentation values named list. YAML parsed R modify example local config whole FOO_NAMED_LIST parameter replaced config merge, desired behaviour.","code":"FOO_NAMED_LIST:   - FOO_2: 2     BAR_2: \"zab\" list(FOO_NAMED_LIST = list(list(FOO_2 = 2L, BAR_2 = \"zab\"))) FOO_NAMED_LIST:   - FOO_2: 3     BAR_3: 5"},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/scdrake_config.html","id":"using-structure-of-a-default-config","dir":"Articles","previous_headings":"Updating (merging) configs","what":"Using structure of a default config","title":"scdrake config internals","text":"Also, default, structure (parameter positions, comments) local config preserved update. However, possible use structure default config - see ?update_config details.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/scdrake_config.html","id":"using-r-code-in-parameters","dir":"Articles","previous_headings":"","what":"Using R code in parameters","title":"scdrake config internals","text":"special type parameter starting !code can used evaluate value R code: First, non-code parameters loaded separate environment code parameters evaluated context environment. means can use config parameters R variables inside code parameters: addition, stage configs (e.g. 02_norm_clustering) can also use parameters (variables) pipeline.yaml 00_main.yaml configs: See ?load_config details.","code":"EXAMPLE: !code 1:3 FOO: 1 BAR: !code FOO + 1 EXAMPLE: !code glue(\"{PROJECT_NAME}_{INSTITUTE}\")"},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/scdrake_config.html","id":"the-yq-tool","dir":"Articles","previous_headings":"","what":"The yq tool","title":"scdrake config internals","text":"Internally, yq tool (version 3) used merging YAML files. command line utility whose binary needs downloaded. done automatically initialization new project, can manually download_yq(). scdrake load attach, SCDRAKE_YQ_BINARY environment variable read - set, value Sys.(\"yq\") used (function searches PATH environment variable). scdrake_yq_binary option set, used default value config-updating functions (see ?update_config). can also look ?check_yq details PATH variable treated terminal vs. RStudio.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/scdrake_config.html","id":"scdrake_list","dir":"Articles","previous_headings":"","what":"scdrake_list","title":"scdrake config internals","text":"base R’s extracting operators ($, [, [[) benevolent non-existing elements list() return NULL. desired behaviour config variables must value explicit NULL. Returning NULL value actually loaded config file can lead unpredictable results. Thus, storing config variables, scdrake using modified list() called scdrake_list() using strict extracting operators. behaves like normal list: extracting non-existing elements throws error: [ [[, control can turned check = FALSE parameter: Also, case [ consistent: returns valid named list, unlike normal list, sets NA_character_ names non-existing elements.","code":"cfg <- scdrake::scdrake_list(list(var_1 = 1, var_2 = 2)) cfg$var_1 ## [1] 1 cfg[[\"var_2\"]] ## [1] 2 cfg[\"var_1\"] ## $var_1 ## [1] 1 ##  ## attr(,\"class\") ## [1] \"scdrake_list\" \"list\" cfg[c(\"var_1\", \"var_2\")] ## $var_1 ## [1] 1 ##  ## $var_2 ## [1] 2 ##  ## attr(,\"class\") ## [1] \"scdrake_list\" \"list\" cfg$var_3 ## Error: Variable var_3 not found in `cfg` cfg[[\"var_3\"]] ## Error: Variable var_3 not found in `cfg` cfg[\"var_3\"] ## Error: Variable var_3 not found in `cfg` cfg[[\"var_3\", check = FALSE]] ## NULL cfg[\"var_3\", check = FALSE] ## $var_3 ## NULL ##  ## attr(,\"class\") ## [1] \"scdrake_list\" \"list\""},{"path":[]},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/scdrake_docker.html","id":"linux-hosts-important","dir":"Articles","previous_headings":"Platform-specific notes","what":"Linux hosts (important)","title":"Using the Docker image","text":"Linux host, can different Docker distributions installed: DD sophisticated suite runs Linux virtual machine DE run. DD can used Linux hosts, required Mac Windows ones. However, Linux, DD differences, one affects scdrake’s ease use file sharing (discussed later). DE core Docker manages containers. can used natively Linux hosts. using Linux host run scdrake image, recommend stick Docker Engine (see official FAQ DD Linux). See quickly switch DE installed DD. Otherwise Docker Desktop: won’t able run RStudio Server due problems file ownership. sustain file ownership shared directory, execute commands container root. means omit -u rstudio parameter use -u root. details see note Problems filesystem permissions .","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/scdrake_docker.html","id":"windows","dir":"Articles","previous_headings":"Platform-specific notes","what":"Windows","title":"Using the Docker image","text":"recommend use WSL2 Ubuntu distribution Docker Desktop (guide) successfully tested us.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/scdrake_docker.html","id":"cheatsheet","dir":"Articles","previous_headings":"","what":"Cheatsheet","title":"Using the Docker image","text":"quick summary detailed steps . Note covering special case Linux host using Docker Desktop.","code":""},{"path":[]},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/scdrake_docker.html","id":"linux-windows-and-amd64-mac","dir":"Articles","previous_headings":"Cheatsheet > Get the scdrake image","what":"Linux, Windows, and amd64 Mac","title":"Using the Docker image","text":"Latest stable version: Latest development version:","code":"docker pull jirinovo/scdrake:1.6.0 docker pull jirinovo/scdrake:latest"},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/scdrake_docker.html","id":"create-a-shared-directory","dir":"Articles","previous_headings":"Cheatsheet","what":"Create a shared directory","title":"Using the Docker image","text":"","code":"mkdir ~/scdrake_projects cd ~/scdrake_projects"},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/scdrake_docker.html","id":"run-the-image","dir":"Articles","previous_headings":"Cheatsheet","what":"Run the image","title":"Using the Docker image","text":"Linux (using Docker Engine), Mac Windows.","code":"docker run -d \\   -v $(pwd):/home/rstudio/scdrake_projects \\   -p 8787:8787 \\   -e USERID=$(id -u) \\   -e GROUPID=$(id -g) \\   -e PASSWORD=1234 \\   jirinovo/scdrake:1.6.0"},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/scdrake_docker.html","id":"find-the-id-or-name-of-the-running-container","dir":"Articles","previous_headings":"Cheatsheet","what":"Find the ID or name of the running container","title":"Using the Docker image","text":"","code":"docker ps CONTAINER ID   IMAGE                            COMMAND   CREATED        STATUS        PORTS                                       NAMES d47b4d265052   scdrake:1.4.0-bioc3.15           \"/init\"   24 hours ago   Up 24 hours   0.0.0.0:8787->8787/tcp, :::8787->8787/tcp   condescending_payne"},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/scdrake_docker.html","id":"run-scdrake-through-its-cli","dir":"Articles","previous_headings":"Cheatsheet","what":"Run scdrake through its CLI","title":"Using the Docker image","text":"","code":"docker exec -it -u rstudio -w /home/rstudio/scdrake_projects <CONTAINER ID or NAME> \\   scdrake -h"},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/scdrake_docker.html","id":"obtaining-the-docker-image","dir":"Articles","previous_headings":"","what":"Obtaining the Docker image","title":"Using the Docker image","text":"Docker image based official Bioconductor image (version 3.15) available. handy reproducible way use scdrake dependencies already installed version fixed. addition, parent Bioconductor image comes bundled RStudio Server. can pull Docker image latest stable scdrake version using list available versions Docker Hub repository. latest development version use","code":"docker pull jirinovo/scdrake:1.6.0 docker pull jirinovo/scdrake:latest"},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/scdrake_docker.html","id":"running-the-image","dir":"Articles","previous_headings":"","what":"Running the image","title":"Using the Docker image","text":"scdrake’s image based Bioconductor’s image turn based Rocker Project’s image (rocker/rstudio). Thanks , scdrake’s image comes bundled RStudio Server. Docker allows mount local (host) directories containers. recommend create local directory individual scdrake projects (files, needed) lie. way won’t lose data container destroyed. Let’s create shared directory home directory switch :","code":"mkdir ~/scdrake_projects cd ~/scdrake_projects"},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/scdrake_docker.html","id":"running-detached-with-rstudio-server","dir":"Articles","previous_headings":"Running the image","what":"Running detached with RStudio Server","title":"Using the Docker image","text":"Important: working Linux hosts using Docker Desktop. RStudio Server comfortable IDE R. can run image including RStudio instance using: Let’s decompose command : docker run: run image container. -d: run detached (“background”) mode. -v $(pwd):/home/rstudio/scdrake_projects: mount current working directory host machine /home/rstudio/scdrake_projects inside container. -p 8787:8787: expose port 8787 container port 8787 localhost. -e USERID=$(id -u) -e GROUPID=$(id -g): change ownership /home/rstudio container ID group ID current host user. important sustains correct file ownership, .e. write /home/rstudio/scdrake_projects within container, actually write host filesystem proper user/group. -e PASSWORD=1234: password RStudio Server (username rstudio). jirinovo/scdrake:<tag>: repository tag image run. -e VAR=VALUE arguments used set environment variables inside container. can check parent rocker/rstudio image . image can default command executed container run. image, ’s script /init starts RStudio Server. Now can check container running: see something Values CONTAINER ID NAMES columns can used reference running container. can see exposed port 8787. useful ? Well, allows us connect RStudio Server instance, running port 8787 inside container. Now can just open browser, navigate localhost:8787 login rstudio password 1234. TIP: using remote server can SSH allows SSH tunneling, can forward exposed port host: Now can start using scdrake RStudio, read alternative ways.","code":"docker run -d \\   -v $(pwd):/home/rstudio/scdrake_projects \\   -p 8787:8787 \\   -e USERID=$(id -u) \\   -e GROUPID=$(id -g) \\   -e PASSWORD=1234 \\   jirinovo/scdrake:1.6.0 docker ps CONTAINER ID   IMAGE                            COMMAND   CREATED        STATUS        PORTS                                       NAMES d47b4d265052   scdrake:1.4.0-bioc3.15           \"/init\"   24 hours ago   Up 24 hours   0.0.0.0:8787->8787/tcp, :::8787->8787/tcp   condescending_payne ssh -NL 8787:localhost:8787 user@server"},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/scdrake_docker.html","id":"running-detached-without-rstudio-server","dir":"Articles","previous_headings":"Running the image","what":"Running detached without RStudio Server","title":"Using the Docker image","text":"just want run image detached without RStudio Server, use Note Docker Desktop Linux host: omit -u rstudio (use -u root) run image root. mount /home/rstudio/scdrake_projects UID 0 container, UID DD user used host directory.","code":"docker run -d \\   -u rstudio \\   -v $(pwd):/home/rstudio/scdrake_projects \\   jirinovo/scdrake:1.6.0 \\   sleep infinity"},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/scdrake_docker.html","id":"running-once-run-and-forget","dir":"Articles","previous_headings":"Running the image","what":"Running once (“run and forget”)","title":"Using the Docker image","text":"Running image detached mode gives us chance e.g. find details ’s wrong failed pipeline run, work interactively RStudio. However, can also run image “run forget” mode container started, scdrake run, finally container stopped removed. Note Linux hosts using Docker Engine: active user container root created files belong . user ID (UID) host 1000, can use -u rstudio, created files belong . UID different, either run image including RStudio refer Problems filesystem permissions .","code":"docker run -it --rm \\   -v $(pwd):/home/rstudio/scdrake_projects \\   jirinovo/scdrake:1.6.0 \\   scdrake ..."},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/scdrake_docker.html","id":"issuing-commands-in-the-running-container","dir":"Articles","previous_headings":"","what":"Issuing commands in the running container","title":"Using the Docker image","text":"can start bash R process inside container attach using docker exec: executes command running container. -: interactive. -t: allocate pseudo-TTY. Note Docker Desktop Linux host: omit -u rstudio (use -u root).","code":"docker exec -it -u rstudio <CONTAINER ID or NAME> bash docker exec -it -u rstudio <CONTAINER ID or NAME> R"},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/scdrake_docker.html","id":"problems-with-filesystem-permissions","dir":"Articles","previous_headings":"","what":"Problems with filesystem permissions","title":"Using the Docker image","text":"first example, run image including RStudio Server, specified -e USERID=$(id -u) -e GROUPID=$(id -g), ownership /home/rstudio changed match host user*. write shared directory /home/rstudio/scdrake_projects, basically host user. * actually feature Docker, rocker/rstudio image uses environment variables run /rocker_scripts/init_userconf.sh manages ownership. default, rstudio user container ID 1000 commonly used default user Linux distributions. can check host executing id -u. 1000, can safely skip instructions . Note Linux hosts using Docker Desktop: case, Docker manages file ownership described . means root user (UID 0) inside container write shared directory using UID Docker Desktop user, don’t care -u rstudio parameter docker exec command. don’t want run RStudio Server host user ID 1000, take care ownership . several ways accomplish . can also read problem .","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/scdrake_docker.html","id":"modify-the-user-and-group-id-in-the-container","dir":"Articles","previous_headings":"Problems with filesystem permissions","what":"Modify the user and group ID in the container","title":"Using the Docker image","text":"rocker/rstudio parent image already comes script can add modify user information (actually run start container including RStudio Server). Note just changes ID group rstudio user, later don’t forget run commands user, .e. docker exec -u rstudio ...","code":"docker exec \\   -e USERID=$(id -u) -e GROUPID=$(id -g) \\   <CONTAINER ID or NAME> \\   bash /rocker_scripts/init_userconf.sh"},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/scdrake_docker.html","id":"chowning-tedious","dir":"Articles","previous_headings":"Problems with filesystem permissions","what":"“Chowning” (tedious)","title":"Using the Docker image","text":"root privileges host, can just change ownership time write shared directory container:","code":"sudo chown -R $(id -u):$(id -g) scdrake_projects"},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/scdrake_docker.html","id":"issuing-scdrake-commands-through-its-command-line-interface-cli","dir":"Articles","previous_headings":"","what":"Issuing {scdrake} commands through its command line interface (CLI)","title":"Using the Docker image","text":"now assume scdrake container running shared directory mounted /home/rstudio/scdrake_projects. scdrake commands can easily issued CLI (see vignette(\"scdrake_cli\")): usual workflow can similar following: Initialize new project: Modify configs host my_first_project/config/ Run pipeline: Note Docker Desktop Linux host: omit -u rstudio (use -u root).","code":"docker exec -it -u rstudio <CONTAINER ID or NAME> \\   scdrake -h docker exec -it -u rstudio -w /home/rstudio/scdrake_projects <CONTAINER ID or NAME> \\   scdrake -d my_first_project init-project docker exec -it -u rstudio -w /home/rstudio/scdrake_projects/my_first_project <CONTAINER ID or NAME> \\   scdrake --pipeline-type single_sample run"},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/scdrake_docker.html","id":"create-a-command-alias","dir":"Articles","previous_headings":"","what":"Create a command alias","title":"Using the Docker image","text":"reduce typing/copy-pasting bit, can create command alias shell, bash: Note Docker Desktop Linux host: omit -u rstudio (use -u root). use alias e.g. Notice using -d parameter alias doesn’t contain -w parameter instructs Docker execute command working directory. Finally, can put alias permanently inside ~/.bashrc file. Just don’t forget change <CONTAINER ID NAME> start new container :) Alternatively, can utilize “run forget” way described :","code":"alias scdrake_docker=\"docker exec -it -u rstudio <CONTAINER ID or NAME> scdrake\" scdrake_docker -d /home/rstudio/scdrake_projects/my_first_project --pipeline-type single_sample run alias scdrake_docker=docker run -it --rm \\   -v $(realpath ~/scdrake_projects):/home/rstudio/scdrake_projects \\   jirinovo/scdrake:1.6.0 \\   scdrake"},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/scdrake_docker.html","id":"singularity","dir":"Articles","previous_headings":"","what":"Singularity","title":"Using the Docker image","text":"Singularity alternative container runner require root access, can used e.g. HPCs. probably use Singularity case don’t root permissions host machine. can simply installed user space e.g. via conda virtual environment/package manager conda-forge/singularity package. Docker images can simply pulled Docker Hub similar docker pull: difference usage docker: prefix Singularity knows look image. image already present local Docker storage, can use docker-daemon: instead. pulling, Singularity needs convert image SIF format, can take quite time. default, SIF file saved current working directory.","code":"singularity pull docker:jirinovo/scdrake:1.6.0"},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/scdrake_docker.html","id":"running-the-image-in-singularity","dir":"Articles","previous_headings":"Singularity","what":"Running the image in Singularity","title":"Using the Docker image","text":"key differences compared Docker: default, Singularity issues commands container current user. Thus, problems file ownership. default, Singularity mounts host’s user HOME container. might practical cases, rather recommend mount empty/different directory /home/<user> container. default, Singularity containers read . Thus, can write mounted directories. Although image also contains RStudio, unfortunately, able make functional Singularity. First create directory structure. directories mounted container. Note also create fake home directory - R packages need use cache directory, located . Now can issue scdrake commands CLI: example, initialize new project: run pipeline using project: Note can also start bash R session use scdrake within , e.g. R","code":"mkdir -p ~/scdrake_singularity cd ~/scdrake_singularity mkdir -p home/${USER} scdrake_projects/pbmc1k singularity exec \\     -e \\     --no-home \\     --bind \"home/${USER}/:/home/${USER},scdrake_projects/:/home/${USER}/scdrake_projects\" \\     --pwd \"/home/${USER}/scdrake_projects\" \\     path/to/scdrake_image.sif \\     scdrake <args> <command> singularity exec \\     -e \\     --no-home \\     --bind \"home/${USER}/:/home/${USER},scdrake_projects/:/home/${USER}/scdrake_projects\" \\     --pwd \"/home/${USER}/scdrake_projects/pbmc1k\" \\     path/to/scdrake_image.sif \\     scdrake --download-example-data init-project singularity exec \\     -e \\     --no-home \\     --bind \"home/${USER}/:/home/${USER},scdrake_projects/:/home/${USER}/scdrake_projects\" \\     --pwd \"/home/${USER}/scdrake_projects/pbmc1k\" \\     path/to/scdrake_image.sif \\     scdrake --pipeline-type single_sample run singularity exec \\     -e \\     --no-home \\     --bind \"home/${USER}/:/home/${USER},scdrake_projects/:/home/${USER}/scdrake_projects\" \\     --pwd \"/home/${USER}/scdrake_projects/pbmc1k\" \\     path/to/scdrake_image.sif \\     R scdrake::run_single_sample_r()"},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/scdrake_extend.html","id":"defining-a-custom-plan","dir":"Articles","previous_headings":"","what":"Defining a custom plan","title":"Extending the pipeline","text":"Let’s try dummy additional plan already present plan_custom.R. Just uncomment lines Example:, want, can try define target/s. quick intro drake plans can found . also need tell drake make new target. Open config/pipeline.yaml set DRAKE_TARGETS [\"my_target\"] (targets defined ). Now just run pipeline usual: terminal see informative text ℹ Extending plan custom one defined 'plan_custom.R'. pipeline finishes, can load new target session ","code":"run_single_sample_r() drake::loadd(my_target)"},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/scdrake_extend.html","id":"parametrized-custom-plan","dir":"Articles","previous_headings":"Defining a custom plan","what":"Parametrized custom plan","title":"Extending the pipeline","text":"plan_custom.R can use variables defined _drake_single_sample.R _drake_integration.R. Probably important cfg cfg_pipeline lists holding pipeline parameters. Note plan_custom.R variables parent script locked modified. Let’s see can utilize cfg list. Open config/single_sample/01_input_qc.yaml add new line: replace code plan_custom.R can see used MY_GENE parameter defined config file. Later, drake replace cfg$input_qc$MY_GENE value \"NOC2L\". case don’t want use standard config files, can make one, e.g. config/my_params.yaml: , use plan_custom.R:","code":"MY_GENE: \"NOC2L\" drake::drake_plan(   my_target = scater::plotExpression(sce_final_input_qc, cfg$input_qc$MY_GENE, exprs_values = \"counts\", swap_rownames = \"SYMBOL\") ) MY_GENE: \"NOC2L\" my_cfg <- load_config(\"config/my_params.yaml\") drake::drake_plan(   my_target = scater::plotExpression(sce_final_input_qc, my_cfg$MY_GENE, exprs_values = \"counts\", swap_rownames = \"SYMBOL\") )"},{"path":[]},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/scdrake_extend.html","id":"stage-specific-rmarkdown-documents","dir":"Articles","previous_headings":"Extending the RMarkdown documents","what":"Stage-specific RMarkdown documents","title":"Extending the pipeline","text":"RMarkdown files used stage reports located Rmd/ directory project’s root. Feel free modify needs. Just keep mind call update_project(), files overwritten default ones. overcome situation, can save modified file using different name modify parameter specifying path stage’s Rmd file. example, modify Rmd/single_sample/01_input_qc.Rmd, save Rmd/single_sample/01_input_qc_modified.Rmd, change accordingly INPUT_QC_REPORT_RMD_FILE parameter config/single_sample/01_input_qc.yaml.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/scdrake_extend.html","id":"custom-rmarkdown-documents","dir":"Articles","previous_headings":"Extending the RMarkdown documents","what":"Custom RMarkdown documents","title":"Extending the pipeline","text":"additional RMarkdown documents just need incorporate file-returning target custom plan, e.g. Rmd/my_report.Rmd plan_custom.R Let’s break plan : my_report target format = \"file\" meaning drake expects return value character vector file directory paths, rmarkdown::render() returns path output file. drake::knitr_in(\"Rmd/my_report.Rmd\") special function marks Rmd file dependency. Internally, scans active code chunks search calls drake::loadd() drake::readd(), marks targets inside dependencies target (my_report). default, knitr, responsible rendering Rmd files, uses working directory location Rmd file. violating project-based approach (everything specified relative project root), using ::() specify output file working directory. ::() remembers project root directory load converts root-relative paths absolute. can try : call ::() ::(\"Rmd/my_report.Rmd\"). Just curiosity, can see dependencies my_target using drake::r_deps_target(my_report, source = \"_drake_single_sample.R\"):","code":"--- title: \"My report\" ---  ```{r} drake::loadd(sce_final_norm_clustering) scater::plotReducedDim(sce_final_norm_clustering, dimred = \"umap\", colour_by = \"cluster_graph_louvain\") ``` drake::drake_plan(   my_report = drake::target(     rmarkdown::render(       drake::knitr_in(\"Rmd/my_report.Rmd\"),       output_file = here::here(\"my_report.html\"),       knit_root_dir = here::here()     ),      format = \"file\"   ) ) name                      type       hash             1 here::here                namespaced NA               2 rmarkdown::render         namespaced NA               3 sce_final_norm_clustering loadd      911414192d751378 4 Rmd/my_report.Rmd         knitr_in   NA"},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/scdrake_extend.html","id":"reusing-the-stage-specific-rmarkdown-documents","dir":"Articles","previous_headings":"Extending the RMarkdown documents","what":"Reusing the stage-specific RMarkdown documents","title":"Extending the pipeline","text":"Another possibility reuse machinery responsible rendering stage reports, : headmost part Rmd documents (can check e.g.  Rmd/single_sample/01_input_qc.Rmd): example Rmd document several parameters: css_file: path CSS file HTML styling. drake_cache_dir: used load targets nondefault cache directory. title: dynamic document title. second part machinery generate_stage_report() function. Internally, ’s wrapper around rmarkdown::render() sensible defaults, passing css_file, drake_cache_dir user-defined parameters Rmd document. Rmd document , call function example target rendering report 01_input_qc stage (source): can see almost function parameters dynamic, based config file (cfg). Also, force drake watch changes child Rmd documents specifying inside other_deps. Note drake::file_in() watching changes file size/structure calls drake::loadd() drake::readd() drake::knitr_in() (static code analysis).","code":"--- title: \"`r params$title`\" author: \"Your name\" institute: \"Your institute\" date: \"`r glue::glue('Document generated: {format(Sys.time(), \\\"%Y-%m-%d %H:%M:%S %Z%z\\\")}')`\" output:   html_document:     toc: true     toc_depth: 4     toc_float: true     number_sections: false     theme: \"flatly\"     self_contained: true     code_download: true     df_print: \"paged\" params:   css_file: !expr here::here(\"Rmd/common/stylesheet.css\")   drake_cache_dir: !expr here::here(\".drake\")   title: \"Your title\" css: \"`r params$css_file`\" ---  ```{r, message = FALSE, warning = FALSE} drake_cache_dir <- params_$drake_cache_dir drake::loadd(your_target_1, your_target_2, ..., path = drake_cache_dir) ``` generate_stage_report(   ## -- We assume that the document is saved here.   \"Rmd/my_report.Rmd\",   \"output/my_report.html\",   params = list(title = \"My report\") ) drake::drake_plan(   report_input_qc = target(       generate_stage_report(         rmd_file = knitr_in(!!cfg$INPUT_QC_REPORT_RMD_FILE),         out_html_file_name = file_out(!!cfg$INPUT_QC_REPORT_HTML_FILE),         css_file = file_in(!!cfg_main$CSS_FILE),         message = !!cfg$INPUT_QC_KNITR_MESSAGE,         warning = !!cfg$INPUT_QC_KNITR_WARNING,         echo = !!cfg$INPUT_QC_KNITR_ECHO,         other_deps = list(           file_in(!!here(\"Rmd/common/_header.Rmd\")),           file_in(!!here(\"Rmd/common/_footer.Rmd\")),           file_in(!!here(\"Rmd/single_sample/01_input_qc_children/empty_droplets.Rmd\"))         ),         drake_cache_dir = !!cfg_pipeline$DRAKE_CACHE_DIR       ),       format = \"file\"     ) )"},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/scdrake_faq.html","id":"are-you-planning-to-migrate-the-pipeline-to-targets","dir":"Articles","previous_headings":"","what":"Are you planning to migrate the pipeline to {targets}?","title":"FAQ & Howtos","text":"cite author packages: targets successor drake, older pipeline tool. 2021-01-21, drake superseded, means plans new features discretionary enhancements, basic maintenance support continue indefinitely. Existing projects use drake can safely continue use drake, need retrofit targets. New projects use targets friendlier robust.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/scdrake_faq.html","id":"i-have-some-installation-problems","dir":"Articles","previous_headings":"","what":"I have some installation problems","title":"FAQ & Howtos","text":"using Docker image, common cause installation errors missing shared libraries. Feel free open new issue.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/scdrake_faq.html","id":"the-pipeline-is-failing-for-my-data","dir":"Articles","previous_headings":"","what":"The pipeline is failing for my data","title":"FAQ & Howtos","text":"First make sure read analyse data Get Started vignette (vignette(\"scdrake\")). case encounter error like one: means R process killed due insufficient memory high CPU usage. former usual tips : Alternatively, can try run pipeline . can happen time targets won’t needed, memory usage lower. using Docker Desktop: increase memory allocation Settings -> Resources -> Advanced using Docker Engine: can look https://docs.docker.com/config/containers/resource_constraints/ problem persists, feel free open new issue start discussion.","code":"Error in `get_result(output = out, options)`: ! callr subprocess failed: could not start R, exited with non-zero status, has crashed or was killed ℹ See `$stdout` and `$stderr` for standard output and error. Type .Last.error to see the more details."},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/scdrake_faq.html","id":"i-want-to-run-the-pipeline-in-parallel-mode","dir":"Articles","previous_headings":"","what":"I want to run the pipeline in parallel mode","title":"FAQ & Howtos","text":"drake knows inner relationships targets plan, also knows targets independent , thus, can run concurrently. called implicit parallelism, fully utilize important feature, just need modify config/pipeline.yaml setting DRAKE_PARALLELISM either: Install BiocManager::install(c(\"future\", \"future.callr\")) specific version clustermq package needed can installed remotes::install_version(\"clustermq\", version = \"0.8.8\") (might need BiocManager::install(\"remotes\")). clustermq also supports HPC cluster schedulers, see details. installed scdrake renv.lock file using Docker image, two packages always installed. general overview drake parallelism see https://books.ropensci.org/drake/hpc.html","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/scdrake_faq.html","id":"i-want-to-change-the-output-directory","dir":"Articles","previous_headings":"","what":"I want to change the output directory","title":"FAQ & Howtos","text":"can simply done changing appropriate parameters config files: BASE_OUT_DIR config/{single_sample,integration}/00_main.yaml root directory outputs. stage pipeline type ’s base directory created BASE_OUT_DIR. example, INPUT_QC_BASE_OUT_DIR config/single_sample/01_input_qc.yaml.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/scdrake_faq.html","id":"i-want-to-use-a-different-cache-directory","dir":"Articles","previous_headings":"","what":"I want to use a different cache directory","title":"FAQ & Howtos","text":"controlled DRAKE_CACHE_DIR config/pipeline.yaml.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/scdrake_faq.html","id":"i-want-to-load-intermediate-results","dir":"Articles","previous_headings":"","what":"I want to load intermediate results","title":"FAQ & Howtos","text":"results pipeline (targets) saved drake cache, can simply retrieved using drake::loadd() drake::readd() functions: know targets can load, please, refer vignettes individual pipeline stages.","code":"drake::loadd(name_of_target) ## -- name_of_target can be either quoted (character) or unquoted (symbol) target <- drake::readd(name_of_target)"},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/scdrake_faq.html","id":"i-want-to-extend-the-pipeline","dir":"Articles","previous_headings":"","what":"I want to extend the pipeline","title":"FAQ & Howtos","text":"See vignette(\"scdrake_extend\"), please.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/scdrake_faq.html","id":"i-want-to-manually-annotate-cells","dir":"Articles","previous_headings":"","what":"I want to manually annotate cells","title":"FAQ & Howtos","text":"can using CELL_GROUPINGS ADDITIONAL_CELL_DATA_FILE parameter config/single_sample/02_norm_clustering.yaml config/integration/02_int_clustering.yaml configs. Please, refer vignette(\"stage_norm_clustering\") vignette(\"stage_int_clustering\"), respectively, description usage parameters. Alternatively, can reuse SingleCellExperiment object, example: added new colData() column named my_cell_types SCE object divides cells based UMAP coordinates. Now need modify INPUT_DATA parameter config/single_sample/01_input_qc.yaml order start pipeline saved SCE object instead cellranger output: sce_final_norm_clustering object already filtered normalized, skip procedures: can also set skip normalization step config/single_sample/02_norm_clustering.yaml: my_cell_types column can now used different purposes, e.g. cluster markers detection, differential expression (stage contrasts) visualization. can done input data integration pipeline. Please, refer INTEGRATION_SOURCES parameter vignette(\"stage_integration\").","code":"drake::loadd(sce_final_norm_clustering) umap <- reducedDim(sce_final_norm_clustering, \"umap\") cell_types <- dplyr::case_when(   umap[, 1] > 1 & umap[, 2] < 5 ~ \"cell_type_1\",   umap[, 1] > 5 & umap[, 2] < 10 ~ \"cell_type_2\",   TRUE ~ \"cell_type_3\" ) sce_final_norm_clustering$my_cell_types <- factor(cell_types) saveRDS(sce_final_norm_clustering, \"sce_my_annotation.Rds\") INPUT_DATA:   type: \"sce\"   path: \"sce_my_annotation.Rds\" EMPTY_DROPLETS_ENABLED: False ENABLE_CELL_FILTERING: False ENABLE_GENE_FILTERING: False NORMALIZATION_TYPE: \"none\""},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/scdrake_faq.html","id":"a-target-is-not-getting-built","dir":"Articles","previous_headings":"","what":"A target is not getting built","title":"FAQ & Howtos","text":"might happen target (especially RMarkdown one) getting built although changes introduced. However, can either: Manually invalidate target drake cache using drake::clean() function built scratch next time run pipeline. Use DRAKE_REBUILD parameter config/pipeline.yaml (see vignette(\"config_pipeline\")).","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/scdrake_faq.html","id":"i-want-to-perform-subclustering","dir":"Articles","previous_headings":"","what":"I want to perform subclustering","title":"FAQ & Howtos","text":"can simply achieved follows: Initiate new scdrake project Modify INPUT_DATA parameter loads data scdrake project want perform subclustering Modify INPUT_DATA_SUBSET parameter subset imported data selected clusters variables interest might consider disabling cell filtering setting ENABLE_CELL_FILTERING: false Run pipeline usual","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/scdrake_integration.html","id":"prepare-the-second-sample---pbmc-3k","dir":"Articles","previous_headings":"","what":"Prepare the second sample - PBMC 3k","title":"02 Integration pipeline guide","text":"second sample integration pipeline use another dataset 10x Genomics - PBMC 3k. stick project-based approach, initialize new scdrake project: R command line command line (Docker) command line (Singularity) done automatically, change RStudio project switch current working directory project’s root.","code":"init_project(\"~/scdrake_projects/pbmc3k\") mkdir ~/scdrake_projects/pbmc3k cd ~/scdrake_projects/pbmc3k scdrake init-project mkdir ~/scdrake_projects/pbmc3k cd ~/scdrake_projects/pbmc3k docker exec -it -u rstudio -w /home/rstudio/scdrake_projects/pbmc3k <CONTAINER ID or NAME> \\   scdrake init-project mkdir -p ~/scdrake_singularity cd ~/scdrake_singularity mkdir -p home/${USER} scdrake_projects/pbmc3k singularity exec -e --no-home \\     --bind \"home/${USER}/:/home/${USER},scdrake_projects/:/home/${USER}/scdrake_projects\" \\     --pwd \"/home/${USER}/scdrake_projects/pbmc3k\" \\     path/to/scdrake_image.sif \\     scdrake init-project"},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/scdrake_integration.html","id":"section","dir":"Articles","previous_headings":"","what":"02 Integration pipeline guide","title":"02 Integration pipeline guide","text":"Now repeat steps already done PBMC 1k sample. ~/scdrake_projects/pbmc3k: Open config/single_sample/01_input_qc.yaml set path inside INPUT_DATA \"../pbmc1k/example_data/pbmc3k\" (example data PBMC 3k already downloaded initialized project PBMC 1k dataset). Open config/pipeline.yaml set DRAKE_TARGETS [\"sce_final_norm_clustering\"]. config modifications second sample ready, let’s run pipeline:","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/scdrake_integration.html","id":"section-1","dir":"Articles","previous_headings":"","what":"02 Integration pipeline guide","title":"02 Integration pipeline guide","text":"R command line command line (Docker) command line (Singularity)","code":"run_single_sample_r() scdrake --pipeline-type single_sample run docker exec -it -u rstudio -w /home/rstudio/scdrake_projects/pbmc3k <CONTAINER ID or NAME> \\   scdrake --pipeline-type single_sample run singularity exec -e --no-home \\     --bind \"home/${USER}/:/home/${USER},scdrake_projects/:/home/${USER}/scdrake_projects\" \\     --pwd \"/home/${USER}/scdrake_projects/pbmc3k\" \\     path/to/scdrake_image.sif \\     scdrake --pipeline-type single_sample run"},{"path":[]},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/scdrake_integration.html","id":"running-the-integration-pipeline","dir":"Articles","previous_headings":"","what":"Running the integration pipeline","title":"02 Integration pipeline guide","text":"configuration file integration pipeline located config/integration/01_integration.yaml (see vignette(\"stage_integration\")). default, four integration methods enabled (can disable INTEGRATION_METHODS parameter), plus uncorrected method, mandatory used later cluster_markers contrasts stages (uncorrected just performs batch-specific correction sequencing depth via batchelor::multiBatchNorm()). least one integration method uncorrected must always enabled. First, individual samples, also initialize new scdrake project integration analysis: R command line command line (Docker) command line (Singularity)","code":"init_project(\"~/scdrake_projects/pbmc_integration\") mkdir ~/scdrake_projects/pbmc_integration cd ~/scdrake_projects/pbmc_integration scdrake init-project mkdir ~/scdrake_projects/pbmc_integration cd ~/scdrake_projects/pbmc_integration docker exec -it -u rstudio -w /home/rstudio/scdrake_projects/pbmc_integration <CONTAINER ID or NAME> \\   scdrake init-project mkdir -p home/${USER} scdrake_projects/pbmc_integration singularity exec -e --no-home \\     --bind \"home/${USER}/:/home/${USER},scdrake_projects/:/home/${USER}/scdrake_projects\" \\     --pwd \"/home/${USER}/scdrake_projects/pbmc_integration\" \\     path/to/scdrake_image.sif \\     scdrake init-project"},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/scdrake_integration.html","id":"section-3","dir":"Articles","previous_headings":"","what":"02 Integration pipeline guide","title":"02 Integration pipeline guide","text":"Now modify configs integration pipeline: config/integration/01_integration.yaml: set cache_path ../pbmc1k/.drake ../pbmc3k/.drake pbmc1k pbmc3k entries, respectively. config/pipeline.yaml: set DRAKE_TARGETS [\"report_integration\"]. save time, run final target 01_integration stage. let’s run pipeline.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/scdrake_integration.html","id":"section-4","dir":"Articles","previous_headings":"","what":"02 Integration pipeline guide","title":"02 Integration pipeline guide","text":"R command line command line (Docker)","code":"run_integration_r() scdrake --pipeline-type integration run docker exec -it -u rstudio -w /home/rstudio/scdrake_projects/pbmc_integration <CONTAINER ID or NAME> \\   scdrake --pipeline-type integration run"},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/scdrake_integration.html","id":"section-5","dir":"Articles","previous_headings":"","what":"02 Integration pipeline guide","title":"02 Integration pipeline guide","text":"output saved output/integration, specified BASE_OUT_DIR config/integration/00_main.yaml. 01_integration stage, can find final report output/integration/01_integration/01_integration.html. can try load target sce_int_dimred_df (tibble object) containing integrated SingleCellExperiment objects computed reduced dimensions:","code":"drake::loadd(sce_int_dimred_df)"},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/scdrake_integration.html","id":"post-integration-clustering-and-cell-annotation","dir":"Articles","previous_headings":"","what":"Post-integration clustering and cell annotation","title":"02 Integration pipeline guide","text":"post-integration clustering stage (see vignette(\"stage_int_clustering\")) basically replicates clustering, cell annotation visualization parts 02_norm_clustering stage single-sample pipeline. uses SingleCellExperiment object selected integration method specified INTEGRATION_FINAL_METHOD parameter config/integration/02_int_clustering.yaml. can also try run post-integration clustering stage setting DRAKE_TARGETS [\"report_int_clustering\"]. default, result mnn (mutual nearest neighbors) integration method used.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/scdrake_integration.html","id":"cluster-markers-and-contrasts-stages","dir":"Articles","previous_headings":"","what":"Cluster markers and contrasts stages","title":"02 Integration pipeline guide","text":"usage stages single-sample pipeline.","code":""},{"path":[]},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/scdrake_spatial.html","id":"spatial-visualization","dir":"Articles","previous_headings":"Spatial exsention functions","what":"Spatial visualization","title":"Spatial extension","text":"(01_input_qc) (02_norm_clustering) single-sample pipeline now offer visualization tissue, pseudo tissue spot visualization. Spatial extension add spot coordinates (array_col array_row) SpaceRanger tissue_possitions.csv file, filter away spots, SpaceRanger labeled tissue. Visualization function implemented Giotto package. Visualization automatically used quality control dimension reduction results.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/scdrake_spatial.html","id":"selection-of-spatially-variable-genes","dir":"Articles","previous_headings":"Spatial exsention functions","what":"Selection of spatially variable genes","title":"Spatial extension","text":"spatial analyses stage 02_norm_clustering vignette(\"stage_norm_clustering\") spatial option enabled, spatially variable genes (SVGs) automaticaly calculated together HVGs. done using Seurat::SVFInfo, selection method MoransI. straightforward union SVGs HVGs taking processing, see https://www.biorxiv.org/content/10.1101/2021.08.27.457741v1 details.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/scdrake_spatial.html","id":"marker-based-annotation","dir":"Articles","previous_headings":"Spatial exsention functions","what":"Marker-based annotation","title":"Spatial extension","text":"Marker-based annotation implemented single-cell spatial datasets. summary, expression profiles statistical metrics computed cell/spot, result visualized using heatmap dimension reduction plot. spatial datasets enabled visualized results tissue coordinates, enrichment plots annotation label (individual enrichment plots) overall results spot. Marker-based annotation implemented Giotto package, function based Kim SY et al.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/stage_cluster_markers.html","id":"section","dir":"Articles","previous_headings":"","what":"Cluster markers stage (`cluster_markers`)","title":"Cluster markers stage (`cluster_markers`)","text":"Overview Config parameters Outputs stage calculation, visualization reporting cell cluster markers (“global markers”). stage common single-sample integration pipelines. ⚙️ Config files: config/single_sample/cluster_markers.yaml, config/integration/cluster_markers.yaml 📋 HTML report target (config/pipeline.yaml): DRAKE_TARGETS: [\"report_cluster_markers\"] 📜 Example report PBMC 1k data (used config) 📜 Example report integrated data (used config) 🪜 Structure Calculation cluster markers: categorical grouping cells can used, including manually defined based existing groups clustering (). See details marker calculation. Two plots dimred: one colored clustering, second colored expression marker (feature plot). plot summarized marker expression: proportion cells expressing marker, colored average expression. violin plot: expression marker cluster. Generation marker tables cell grouping levels. Cluster markers config stored config/single_sample/cluster_markers.yaml config/integration/cluster_markers.yaml files (location file different single-sample integration pipelines). pipeline config, directory file read environment variables: SCDRAKE_SINGLE_SAMPLE_CONFIG_DIR single-sample pipeline SCDRAKE_INTEGRATION_CONFIG_DIR integration pipeline Options named lowercase set upon scdrake load attach. actual directory used depends whether run run_single_sample_r() run_integration_r(). can find description important targets stage. However, full overview, inspect source code get_cluster_markers_subplan() function.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/stage_cluster_markers.html","id":"marker-calculation-and-interpretation","dir":"Articles","previous_headings":"","what":"Marker calculation and interpretation","title":"Cluster markers stage (`cluster_markers`)","text":"Taken OSCA, slightly modified: interpret clustering results, identify genes drive separation clusters. marker genes allow us assign biological meaning cluster based functional annotation. obvious case, marker genes cluster priori associated particular cell types, allowing us treat clustering proxy cell type identity. principle can applied discover subtle differences clusters (e.g., changes activation differentiation state) based behavior genes affected pathways. Identification marker genes usually based around retrospective detection differential expression clusters. Genes strongly DE likely caused separate clustering cells first place. Several different statistical tests available quantify differences expression profiles, different approaches can used consolidate test results single ranking genes cluster. choices parametrize theoretical differences various marker detection strategies.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/stage_cluster_markers.html","id":"used-statistical-tests","dir":"Articles","previous_headings":"Marker calculation and interpretation","what":"Used statistical tests","title":"Cluster markers stage (`cluster_markers`)","text":"cell grouping gene, three distinct, adjustable statistical tests computed scran::findMarkers(): t-test (scran::pairwiseTTests()): test difference mean expression. Wilcoxon signed-rank test (scran::pairwiseWilcox()): test difference median expression (roughly speaking). Binomial test (scran::pairwiseBinom()): test null hypothesis proportion cells expressing gene groups. tests performed pairwise fashion within grouping, .e. level grouping tested . Example: three pairwise tests type computed k-means clustering \\(k = 3\\): Cluster 1 vs. Cluster 2 Cluster 1 vs. Cluster 3 Cluster 2 vs. Cluster 3 overall p-values, false discovery rate (FDR) effect sizes (log2 fold change (LFC) t- binomial test, Area Curve Wilcoxon test) calculated cell grouping pairwise tests (scran::combineMarkers()).","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/stage_cluster_markers.html","id":"narrowing-down-the-number-of-cluster-markers","dir":"Articles","previous_headings":"Marker calculation and interpretation","what":"Narrowing down the number of cluster markers","title":"Cluster markers stage (`cluster_markers`)","text":"less stringent approach can used narrow number cluster markers, based results individual pairwise tests. also affect combined p-value FDR: Looking differences: level (cluster) grouping, take top markers p-value pairwise test. shown Top column marker table. Example: set genes Top values 1 contains gene lowest p-value comparison. Finding cluster-specific markers: stringent approach considering genes differentially expressed pairwise comparisons involving cluster interest. purpose used intersection-union test combined p-value gene maximum p-values pairwise comparisons. gene achieve low combined p-value strongly DE comparisons clusters. Balancing stringency generality: Holm-Bonferroni correction applied pairwise p-values middle-value taken combined p-value. effectively tests global null hypothesis least 50% individual pairwise comparisons exhibit differential expression. can controlled via PVAL_TYPE parameter.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/stage_cluster_markers.html","id":"handling-blocking-factors","dir":"Articles","previous_headings":"Marker calculation and interpretation","what":"Handling blocking factors","title":"Cluster markers stage (`cluster_markers`)","text":"Blocking factors (e.g. batch effect, sex differences, cell cycle phases) can handled nesting. , pairwise test performed separately level blocking factor. , p-values individual levels’ tests combined, final combined p-values obtained method choice (see ). can controlled via BLOCK_COLUMN parameter.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/stage_cluster_markers.html","id":"cluster-markers","dir":"Articles","previous_headings":"","what":"Cluster markers","title":"Cluster markers stage (`cluster_markers`)","text":"Type: named list (dictionary) named lists Default parameters computation reporting cluster markers. can overriden cluster markers source CLUSTER_MARKERS_SOURCES (see ). PLOT_DIMREDS (character vector: \"pca\", \"tsne\", \"umap\"): dimensionality reductions use marker plots. BLOCK_COLUMN (character scalar null): column use blocking factor. Examples: phase (cell cycle phase), batch (sample origin - integration pipeline). LFC_DIRECTION (character scalar: \"\" | \"\" | \"\"): direction log-fold changes considered alternative hypothesis. LFC_TEST (positive numeric scalar): log-fold change threshold tested . PVAL_TYPE (character scalar: \"\" | \"\" | \"\"): p-values combined across pairwise comparisons given group/cluster. \"\", top column present cluster markers tables. parameter can control stringency marker detection. MIN_PROP (numeric scalar: <0; 1>, null): minimum proportion significant comparisons per gene. Defaults 0.5 PVAL_TYPE \"\", otherwise defaults zero. STD_LFC (logical scalar): whether log-fold changes standardized variance. possible t-test used, equivalent Cohen’s \\(d\\). Standardized log-fold changes may appealing visualization avoids large fold changes due large variance. choice STD_LFC affect calculation p-values. Note: compatibility reasons, STD_LFC parameter set, used PARAMS_WILCOX PARAMS_BINOM. TOP_N_HEATMAP (positive integer scalar .inf): many top N markers generate heatmaps. column used determination top N markers set TOP_N_WT_HEATMAP. can also use markers, either supplying huge number, using .inf, translated R’s Inf. \"top\" can used PVAL_TYPE \"\". \"auc\" can used inside PARAMS_WILCOX. TOP_N_PLOT (positive integer scalar): TOP_N_HEATMAP, used marker plots. TOP_N_WT_PLOT (character scalar: \"top\" | \"fdr\" | \"lfc\" | \"auc\"): TOP_N_WT_HEATMAP, used marker plots. Type: list named lists parameter used specify cell groupings (“sources”) markers searched , test output parameters. can use categorical column - results cell clustering, phase (cell cycle), etc., custom groupings defined CELL_GROUPINGS 02_norm_clustering.yaml 02_int_clustering.yaml. See clustering targets list clustering names. Let’s examine first entry (markers_cluster_graph_leiden_r0.4): markers_cluster_graph_leiden_r0.4: name comparison. can use whatever name want. source_column: \"cluster_graph_leiden_r0.4\" (character scalar): cell grouping use computation cell markers. description: \"Cluster markers Leiden clustering (r = 0.4)\" (character scalar): description comparison, appear reports plots. entry can override parameters CLUSTER_MARKERS_SOURCES_DEFAULTS (using lowercase names). example, let’s consider following scenario: , train_params common_params override corresponding parameters PARAMS_T COMMON_PARAMS, respectively, CELL_ANNOTATION_SOURCES_DEFAULTS. Watch proper indentation. See “Merging nested named lists” section vignette(\"scdrake_config\"). Type: logical scalar Set False skip making marker plots. case, compatibility reasons, empty files created.","code":"CLUSTER_MARKERS_SOURCES_DEFAULTS:   COMMON_PARAMS:     PLOT_DIMREDS: [\"umap\"]     BLOCK_COLUMN: null   PARAMS_T:     LFC_DIRECTION: \"up\"     LFC_TEST: 0     PVAL_TYPE: \"any\"     MIN_PROP: null     STD_LFC: False     TOP_N_HEATMAP: 10     TOP_N_WT_HEATMAP: \"top\"     TOP_N_PLOT: 5     TOP_N_WT_PLOT: \"top\"   PARAMS_WILCOX:     LFC_DIRECTION: \"up\"     LFC_TEST: 0     PVAL_TYPE: \"any\"     MIN_PROP: null     STD_LFC: null     TOP_N_HEATMAP: 10     TOP_N_WT_HEATMAP: \"top\"     TOP_N_PLOT: 5     TOP_N_WT_PLOT: \"top\"   PARAMS_BINOM:     LFC_DIRECTION: \"up\"     LFC_TEST: 0     PVAL_TYPE: \"any\"     MIN_PROP: null     STD_LFC: null     TOP_N_HEATMAP: 10     TOP_N_WT_HEATMAP: \"top\"     TOP_N_PLOT: 5     TOP_N_WT_PLOT: \"top\" CLUSTER_MARKERS_SOURCES:   - markers_cluster_graph_leiden_r0.4:       source_column: \"cluster_graph_leiden_r0.4\"       description: \"Cluster markers for Leiden clustering (r = 0.4)\"     markers_cluster_graph_leiden_r0.8:       source_column: \"cluster_graph_leiden_r0.8\"       description: \"Cluster markers for Leiden clustering (r = 0.8)\" CLUSTER_MARKERS_SOURCES:   - markers_cluster_graph_leiden_r0.4:       source_column: \"cluster_graph_leiden_r0.4\"       description: \"Cluster markers for Leiden clustering (r = 0.4)\"       common_params:         plot_dimreds: [\"umap\", \"pca\"]       params_t:         pval_type: \"some\"         top_n_wt_heatmap: \"fdr\"         top_n_wt_plot: \"fdr\" MAKE_CLUSTER_MARKERS_PLOTS: True"},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/stage_cluster_markers.html","id":"input-files","dir":"Articles","previous_headings":"","what":"Input files","title":"Cluster markers stage (`cluster_markers`)","text":"Type: character scalar Paths RMarkdown files used HTML reports pipeline stage.","code":"CLUSTER_MARKERS_TABLE_TEMPLATE_RMD_FILE: \"Rmd/common/cluster_markers_table_template.Rmd\" CLUSTER_MARKERS_REPORT_RMD_FILE: \"Rmd/common/cluster_markers.Rmd\""},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/stage_cluster_markers.html","id":"output-files","dir":"Articles","previous_headings":"","what":"Output files","title":"Cluster markers stage (`cluster_markers`)","text":"Type: character scalar path base output directory stage. created BASE_OUT_DIR specified 00_main.yaml config. Type: character scalar Names files directories created CLUSTER_MARKERS_BASE_OUT_DIR. Subdirectories allowed.","code":"CLUSTER_MARKERS_BASE_OUT_DIR: \"cluster_markers\" CLUSTER_MARKERS_REPORT_HTML_FILE: \"cluster_markers.html\" CLUSTER_MARKERS_HEATMAPS_OUT_DIR: \"cluster_markers_heatmaps\" CLUSTER_MARKERS_PLOTS_BASE_OUT_DIR: \"cluster_markers_plots\" CLUSTER_MARKERS_DIMRED_PLOTS_BASE_OUT_DIR: \"cluster_markers_dimred_plots\" CLUSTER_MARKERS_TABLES_OUT_DIR: \"cluster_markers_tables\""},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/stage_cluster_markers.html","id":"singlecellexperiment-objects","dir":"Articles","previous_headings":"","what":"SingleCellExperiment objects","title":"Cluster markers stage (`cluster_markers`)","text":"sce_dimred_cluster_markers, sce_final_cluster_markers: SCE objects computed dimensionality reductions. Used generation marker plots heatmaps sce_cluster_markers: Final SCE object cell clusterings 02_norm_clustering (single-sample pipeline) 02_int_clustering stage (integration pipeline). Used compute cluster markers. can inspect cell groupings can used marker computation:","code":"drake::loadd(sce_final_cluster_markers) SingleCellExperiment::colData(sce_final_cluster_markers)"},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/stage_cluster_markers.html","id":"tibbles-with-parameters","dir":"Articles","previous_headings":"","what":"Tibbles with parameters","title":"Cluster markers stage (`cluster_markers`)","text":"Usually, row tibbles passed function within drake plan. cluster_markers_params: parameters computation cluster markers following tibbles derived cluster_markers_params: cluster_markers_test_params, cluster_markers_heatmap_params, cluster_markers_plot_params, cluster_markers_dimred_plot_params","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/stage_cluster_markers.html","id":"tibbles-with-cluster-markers-test-results","dir":"Articles","previous_headings":"","what":"Tibbles with cluster markers test results","title":"Cluster markers stage (`cluster_markers`)","text":"cluster_markers_raw: tibble columns cluster_markers_test_params, except list column (<DataFrame>) markers test results added, level source_column expanded separate row. example, row group_level = 1, markers DataFrame contains test results level versus ones. See scran::combineMarkers() details output format, scran_markers() description changes made output former function. cluster_markers: cluster_markers_raw, Wilcox tests, combined LFC added DataFrames markers column cluster_markers_processed: cluster_markers, markers DataFrames don’t contain nested DataFrames (lfc_* auc_*) - replaced combined effect sizes. way can inspect effect sizes comparisons levels. cluster_markers_out: holds data cluster_markers_processed, markers coerced dataframes column names normalized snake_case cluster_markers_for_tables: summarized tibble glued cluster_markers_out, cluster_markers_heatmaps_df, cluster_markers_plots_top. Marker tables markers column publish-ready forms HTML output, e.g. <> links ENSEMBL PDF files marker plots.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/stage_cluster_markers.html","id":"heatmaps","dir":"Articles","previous_headings":"","what":"Heatmaps","title":"Cluster markers stage (`cluster_markers`)","text":"seu_for_cluster_markers_heatmaps: Seurat object used generate heatmaps marker_heatmap() (wrapper around Seurat::DoHeatmap()). scale.data slot RNA assay UMI counts transformed z-score. cluster_markers_heatmaps_df: tibble derived cluster_markers_heatmaps_df, enriched cluster markers test results Two heatmaps row cluster_markers_heatmaps_df made: one log2 UMI counts, second values transformed z-score storage reasons, heatmap objects saved R objects, exported PDF. However, can obtain tibble holding objects heatmaps_tbl, two list columns appended cluster_markers_heatmaps_df: heatmaps: named list heatmap object (p_heatmap) z-score-transformed version (p_heatmap_zscore). markers_top: dataframe top markers used heatmaps (subsetted cluster_markers_processed$markers). control can use marker_heatmap() function (marker_heatmaps_wrapper() wrapper).","code":"drake::loadd(cluster_markers_heatmaps_df) heatmaps_tbl <- marker_heatmaps_wrapper(   seu = seu_for_cluster_markers_heatmaps,   params = cluster_markers_heatmaps_df,   marker_type = \"global\",   save = FALSE,   return_type = \"tibble\" )"},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/stage_cluster_markers.html","id":"marker-plots","dir":"Articles","previous_headings":"","what":"Marker plots","title":"Cluster markers stage (`cluster_markers`)","text":"cluster_markers_plots_top: tibble markers plots made. See ?markers_plots_top details. heatmaps, plot objects (ggplot2, patchwork) saved, underlying function can used: Similarly, actual plotting function can used, see ?marker_plot","code":"markers_plots_files(sce_dimred_cluster_markers, cluster_markers_plots_top, save = FALSE, return_type = \"tibble\")"},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/stage_cluster_markers.html","id":"dimensionality-reduction-plots","dir":"Articles","previous_headings":"","what":"Dimensionality reduction plots","title":"Cluster markers stage (`cluster_markers`)","text":"cluster_markers_dimred_plots: tibble dimensionality reduction plots source_column CLUSTER_MARKERS_SOURCES parameter PLOT_DIMREDS COMMON_PARAMS","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/stage_cluster_markers.html","id":"other-targets","dir":"Articles","previous_headings":"","what":"Other targets","title":"Cluster markers stage (`cluster_markers`)","text":"config_cluster_markers: list holding parameters stage","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/stage_contrasts.html","id":"section","dir":"Articles","previous_headings":"","what":"Contrasts stage (`contrasts`)","title":"Contrasts stage (`contrasts`)","text":"Overview Config parameters Outputs stage calculation, visualization reporting differentially expressed markers (“contrasts”). stage basically cluster_markers stage, output related individual comparisons levels cell groupings. Hence “contrasts”, term known bulk RNA-seq sample groups compared -> put contrast. ⚙️ Config files: config/single_sample/contrasts.yaml, config/integration/contrasts.yaml 📋 HTML report target (config/pipeline.yaml): DRAKE_TARGETS: [\"report_contrasts\"] 📜 Example report PBMC 1k data (used config) 📜 Example report integrated data (used config) Cluster markers config stored config/single_sample/contrasts.yaml config/integration/contrasts.yaml files (location file different single-sample integration pipelines). pipeline config, directory file read environment variables: SCDRAKE_SINGLE_SAMPLE_CONFIG_DIR single-sample pipeline. SCDRAKE_INTEGRATION_CONFIG_DIR integration pipeline. Options named lowercase set upon scdrake load attach. actual directory used depends whether run run_single_sample_r() run_integration_r(). Parameters stage almost identical cluster_markers stage (see vignette(\"stage_cluster_markers\")). just need replace CLUSTER_MARKERS CONTRASTS parameter names 🙂 different parameters . Type: list named lists parameter similar CLUSTER_MARKERS_SOURCES, additional parameter contrasts used. used specify levels source_column compared (differential expression). \"\", combinations levels source_column compared. example, source_column \"cluster_kmeans_k3\" (k-means k = 3), contains three levels, following comparisons (contrasts) made: 1_vs_2, 1_vs_3, 2_vs_3. Note lead excessive amount comparisons graph-based clustering. target (required): target level source_column. reference (required): reference level source_column. name (optional): unique contrast name. specified, created {target}_vs_{reference}. CONTRASTS_SOURCES_DEFAULTS CLUSTER_MARKERS_SOURCES_DEFAULTS, following parameters statistical tests used, hardcoded values used internally: LFC_DIRECTION (\"\") PVAL_TYPE (\"\") MIN_PROP (null) can find description important targets stage. However, full overview, inspect source code get_contrasts_subplan() function. config stage, target names similar stage cluster_markers replacing cluster_markers contrasts (exceptions, see ). Please, refer vignette(\"stage_cluster_markers\").","code":"CONTRASTS_SOURCES:   - dea_cluster_int_graph_louvain_r0.4:       source_column: \"cluster_int_graph_louvain_r0.4\"       description: \"DEA of all groups in graph-based clustering (Louvain alg. with r = 0.4) with blocking on batch\"       contrasts: \"all\"     dea_cluster_int_graph_louvain_r0.8:      source_column: \"cluster_int_graph_louvain_r0.8\"      description: \"DEA of some groups in graph-based clustering (Louvain alg. with r = 0.8)\"      contrasts:        - target: \"2\"          reference: \"1\"        - target: \"3\"          reference: \"2\"          name: \"cl3_vs_cl4\""},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/stage_contrasts.html","id":"singlecellexperiment-objects-sce","dir":"Articles","previous_headings":"","what":"SingleCellExperiment objects (SCE)","title":"Contrasts stage (`contrasts`)","text":"sce_dimred_contrasts, sce_final_contrasts, sce_contrasts","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/stage_contrasts.html","id":"tibbles-with-parameters","dir":"Articles","previous_headings":"","what":"Tibbles with parameters","title":"Contrasts stage (`contrasts`)","text":"contrasts_params, contrasts_test_params, contrasts_heatmap_params, contrasts_plot_params, contrasts_dimred_plot_params","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/stage_contrasts.html","id":"tibbles-with-cluster-markers-contrasts-test-results","dir":"Articles","previous_headings":"","what":"Tibbles with cluster markers (contrasts) test results","title":"Contrasts stage (`contrasts`)","text":"contrasts_raw: tibble, cluster_markers_raw. Used extract results contrasts interest. contrasts: tibble extracted results (markers column) contrasts interest. Contrasts identified columns target, reference, contrast_name, cell grouping origin source_column. name column comes list names CONTRASTS_SOURCES. contrasts_out: contrasts, markers coerced dataframes column names normalized snake_case. contrasts_for_tables: contrasts_out, markers dataframes prepared HTML output. See cluster_markers_for_tables vignette(\"stage_cluster_markers\").","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/stage_contrasts.html","id":"heatmaps","dir":"Articles","previous_headings":"","what":"Heatmaps","title":"Contrasts stage (`contrasts`)","text":"seu_for_contrasts_heatmaps, contrasts_heatmaps_df","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/stage_contrasts.html","id":"marker-plots","dir":"Articles","previous_headings":"","what":"Marker plots","title":"Contrasts stage (`contrasts`)","text":"contrasts_plots_top","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/stage_contrasts.html","id":"dimensionality-reduction-plots","dir":"Articles","previous_headings":"","what":"Dimensionality reduction plots","title":"Contrasts stage (`contrasts`)","text":"contrasts_dimred_plots","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/stage_contrasts.html","id":"other-targets","dir":"Articles","previous_headings":"","what":"Other targets","title":"Contrasts stage (`contrasts`)","text":"config_contrasts: list holding parameters stage.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/stage_input_qc.html","id":"section","dir":"Articles","previous_headings":"","what":"Input and quality control stage (`01_input_qc`)","title":"Input and quality control stage (`01_input_qc`)","text":"Overview Config parameters Outputs initial stage read scRNA-seq data, remove empty droplets (optionally), perform quality control, cell gene filtering. information scRNA-seq quality control can found OSCA. ⚙️ Config file: config/single_sample/01_input_qc.yaml 📋 HTML report target (config/pipeline.yaml): DRAKE_TARGETS: [\"report_input_qc\"] 📜 Example report (used config) 🪜 Structure cellranger output SingleCellExperiment object Rds file target existing drake cache (.e. different scdrake project) Delimited table Subsetting imported SingleCellExperiment object cells interest based metadata values, e.g. set clusters particular clustering method (optional) Removal empty droplets (DropletUtils::emptyDrops()) (optional) Number UMI Number detected genes (non-zero UMI count) Percentage expressed mitochondrial genes (\\(\\frac {UMI_{mitochondrial}} {UMI_{sum}} * 100\\)) Dataset-sensitive filtering, based median absolute deviation (MAD) median value QC metric across cells (theory). “number UMI” metric, lower tail used. Custom filtering, based fixed thresholds. “number UMI” metric, upper lower bounds used (theory. filtering types can choose join filters: either jointly (using operator) individually (using operator). gene considered expressed number UMI across cells greater X time expressed least Y ratio cells. Plots QC metrics visualization differences dataset-sensitive custom filtering Preparation gene annotation Final selection either dataset-sensitive custom filtered dataset. selection upon user. Config stage stored config/single_sample/01_input_qc.yaml file. Directory file read SCDRAKE_SINGLE_SAMPLE_CONFIG_DIR environment variable upon scdrake load attach, saved scdrake_single_sample_config_dir option. option used default argument value several scdrake functions. can find description important targets stage. However, full overview, inspect source code get_input_qc_subplan() function. Targets can loaded drake cache (.drake directory default) using drake::loadd() drake::readd() functions. HTML report target name: report_input_qc","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/stage_input_qc.html","id":"input-files","dir":"Articles","previous_headings":"","what":"Input files","title":"Input and quality control stage (`01_input_qc`)","text":"Type: list named character scalars parameter specifying input data type path. four possible types input data: type: \"cellranger\": output cellranger, , files raw feature-barcode matrix - barcodes.tsv, features.tsv, matrix.mtx (can also gzipped .gz extension). Internally, BC matrix imported via DropletUtils::read10xCounts() can download example PBMC data 10x Genomics using download_pbmc1k() download_pbmc1k() functions. type: \"table\": delimited file (table) representing feature-barcode matrix, additional column named ENSEMBL containing Ensembl IDs features (rows). type: \"sce\": saved SingleCellExperiment Rds format (.e. saved saveRDS() function). object must contain feature-barcode matrix raw UMI counts counts slot assays (BC matrix can retrieved counts(sce)). Additionaly, can include whatever want colData() use later (e.g. cell grouping/clusters compute markers include batch effect ). type: \"sce_drake_cache\": saved SingleCellExperiment drake cache, e.g. another scdrake project path: \"path//file//dir\": path input file directory (can relative project root directory). type: \"cellranger\", path directory containing barcodes.tsv, features.tsv, matrix.mtx files (can also gzipped .gz extension) type: \"sce_drake_cache\", path drake cache directory (usually named \".drake\") type: \"sce\" \"table\", path Rds text file delimiter: \",\": used type: \"table\". Specifies field delimiter table. target_name: \"target_name\": used type: \"sce_drake_cache\". Specifies name target drake cache imported, e.g. \"sce_final_input_qc\" Type: character scalar path RMarkdown file used HTML report pipeline stage. spatial extension, default RMarkdown file 01_input_qc_spatial.Rmd","code":"INPUT_DATA:   type: \"cellranger\"   path: \"/path/to/dir\"   delimiter: \",\"   target_name: \"target_name\" INPUT_QC_REPORT_RMD_FILE: \"Rmd/single_sample/01_input_qc.Rmd\""},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/stage_input_qc.html","id":"subsetting-of-imported-data","dir":"Articles","previous_headings":"","what":"Subsetting of imported data","title":"Input and quality control stage (`01_input_qc`)","text":"Type: null (default) named list imported data can subsetted simple selection values present column cell metadata (colData()). example , cells assigned clusters \"3\" \"4\" cluster_kmeans_k6 columns kept. can also negate selection specifying negate: true.","code":"INPUT_DATA_SUBSET: null ## Example of simple subsetting by cluster numbers INPUT_DATA_SUBSET:   subset_by: \"cluster_kmeans_k6\"   values: [\"3\", \"4\"]   negate: false"},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/stage_input_qc.html","id":"spatial-extension","dir":"Articles","previous_headings":"","what":"Spatial extension","title":"Input and quality control stage (`01_input_qc`)","text":"Type: logical scalar True, pipeline enables spatial extension. input_qc stage, spatial extension consists enabling pseudo tissue visualization, adding coordinates (array_col array_row tissue_positions.csv) Cell Metadata. Type: Null character scalar path tissue_position.csv SpaceRanger spatial output folder used adding coordinates (array_col array_row) Cell Metadata. void SPATIAL enabled.","code":"SPATIAL: False SPATIAL_LOCKS: Null"},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/stage_input_qc.html","id":"removal-of-empty-droplets","dir":"Articles","previous_headings":"","what":"Removal of empty droplets","title":"Input and quality control stage (`01_input_qc`)","text":"See ?DropletUtils::emptyDrops details. Type: logical scalar False, skip calculation removal empty droplets. might consider turning procedure input raw feature-barcode matrix cellranger, already processed dataset (table SingleCellExperiment object). Otherwise DropletUtils::emptyDrops() fail enough empty droplets total UMI count < EMPTY_DROPLETS_LOWER (100 default). Type: positive integer scalar lower bound total UMI count barcodes assumed correspond empty droplets. Type: numeric scalar <0; 1> threshold FDR adjusted p-values null hypothesis barcode comes ambient environment. words, probability droplet empty contained ambient RNA.","code":"EMPTY_DROPLETS_ENABLED: True EMPTY_DROPLETS_LOWER: 100 EMPTY_DROPLETS_FDR_THRESHOLD: 0.01"},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/stage_input_qc.html","id":"cell-filtering","dir":"Articles","previous_headings":"","what":"Cell filtering","title":"Input and quality control stage (`01_input_qc`)","text":"Two types cell filtering performed: dataset-sensitive (using MAD threshold), custom (using custom thresholds). filtering types, violation one metric threshold leads removal cell. choice cell filtering thresholds depends much dataset. works ordinary high-quality dataset might work well low-quality special dataset rare cell types. quality control chapter OSCA gives excellent background QC scRNA-seq data. Type: logical scalar False, types cell filtering disabled. filtering thresholds filtering types overridden every cell pass filtering (e.g. MAD_THRESHOLD: .inf MIN_UMI_CF: -.inf). end, SAVE_DATASET_SENSITIVE_FILTERING effect filtered SCE targets identical. QC metrics plots still calculated created. Type: logical scalar True, proceed stages dataset filtered dataset-sensitive filtering (target sce_qc_filter_genes), otherwise dataset filtered custom filtering (target sce_custom_filter_genes). Note selected SCE target referred sce_final_input_qc subsequent stages.","code":"ENABLE_CELL_FILTERING: True SAVE_DATASET_SENSITIVE_FILTERING: True"},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/stage_input_qc.html","id":"dataset-sensitive-cell-filtering","dir":"Articles","previous_headings":"Cell filtering","what":"Dataset-sensitive cell filtering","title":"Input and quality control stage (`01_input_qc`)","text":"Type: positive numeric scalar threshold maximum MAD (median absolute deviation) QC cell metrics: Number UMI (lower tail). Number detected genes = non-zero UMI count (lower tail). Percentage expressed mitochondrial genes = \\(\\frac {UMI_{mitochondrial}} {UMI_{sum}} * 100\\) (upper tail). MAD threshold 3 retain 99% non-outlier values follow normal distribution. “Lower tail” means cells metric value less -MAD_THRESHOLD MAD discarded. “upper tail”, +MAD_THRESHOLD MAD. Violation one metric threshold leads removal cell. disable dataset-sensitive filtering, set MAD_THRESHOLD: .inf. force passing cell every QC metric always lower positive infinity MAD. Type: character scalar (\"&\" | \"|\") join QC filters: Jointly (/& operator), .e., remove cells violate filters (permissive) Individually (/| operator), .e., remove cells violate LEAST ONE filter (strict)","code":"MAD_THRESHOLD: 3 DATASET_SENSITIVE_FILTERS_OPERATOR: \"&\""},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/stage_input_qc.html","id":"custom-cell-filtering","dir":"Articles","previous_headings":"Cell filtering","what":"Custom cell filtering","title":"Input and quality control stage (`01_input_qc`)","text":"Type: positive integer scalar threshold minimum number UMI per cell, .e. cells UMI less MIN_UMI_CF removed. disable filter, set MIN_UMI_CF: -.inf Type: positive integer scalar threshold maximum number UMI per cell, .e. cells UMI greater MAX_UMI_CF removed. disable filter, set MAX_UMI_CF: .inf Type: positive integer scalar threshold minimum number features (genes) detected per cell, .e. cells detected features less MIN_FEATURES removed. disable filter, set MIN_FEATURES: -.inf Type: numeric scalar <0; 1> threshold maximum ratio expressed mitochondrial genes per cell, .e. cells mitochondrial genes detected (MAX_MITO_RATIO * 100)% genes removed. disable filter, set MAX_MITO_RATIO: .inf Type: character scalar (\"&\" | \"|\") join QC filters: Jointly (/& operator), .e., remove cells violate filters (permissive) Individually (/| operator), .e., remove cells violate LEAST ONE filter (strict)","code":"MIN_UMI_CF: 1000 MAX_UMI_CF: 50000 MIN_FEATURES: 1000 MAX_MITO_RATIO: 0.2 CUSTOM_FILTERS_OPERATOR: \"&\""},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/stage_input_qc.html","id":"gene-filtering","dir":"Articles","previous_headings":"","what":"Gene filtering","title":"Input and quality control stage (`01_input_qc`)","text":"Gene filtering thresholds applied types cell filtering (performed). filter computed get_gene_filter() function following: gene considered expressed number UMIs across cells greater min_umi time expressed least min_ratio_cells ratio cells. Type: logical scalar False, gene filtering disabled. filtering thresholds overridden every gene pass filtering (MIN_UMI: 0 MIN_RATIO_CELLS: 0). Type: character scalar Regexes used match count occurences mitochondrial ribosomal features. latter currently used gene filtering. Type: zero positive integer scalar threshold minimum number UMI per cell, .e. genes UMI < MIN_UMI removed. Type: numeric scalar <0; 1> minimum ratio cells expressing gene, .e. genes expressed less (MIN_RATIO_CELLS * 100)% cells removed.","code":"num_cells <- min_ratio_cells * ncol(sce) is_expressed <- rowSums(counts(sce) >= min_umi) >= num_cells ENABLE_GENE_FILTERING: True MITO_REGEX: \"^MT-\" RIBO_REGEX: \"^RP[SL]\" MIN_UMI: 1 MIN_RATIO_CELLS: 0.01"},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/stage_input_qc.html","id":"output-files","dir":"Articles","previous_headings":"","what":"Output files","title":"Input and quality control stage (`01_input_qc`)","text":"Type: character scalar path base output directory stage. created BASE_OUT_DIR specified 00_main.yaml config. Type: character scalar name HTML report file stage. Created INPUT_QC_BASE_OUT_DIR. Subdirectories allowed.","code":"INPUT_QC_BASE_OUT_DIR: \"01_input_qc\" INPUT_QC_REPORT_HTML_FILE: \"01_input_qc.html\""},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/stage_input_qc.html","id":"html-output-parameters","dir":"Articles","previous_headings":"","what":"HTML output parameters","title":"Input and quality control stage (`01_input_qc`)","text":"Type: logical scalar passed knitr::opts_chunk() used rendering stage’s HTML report.","code":"INPUT_QC_KNITR_MESSAGE: False INPUT_QC_KNITR_WARNING: False INPUT_QC_KNITR_ECHO: False"},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/stage_input_qc.html","id":"singlecellexperiment-objects","dir":"Articles","previous_headings":"","what":"SingleCellExperiment objects","title":"Input and quality control stage (`01_input_qc`)","text":"sce_raw: untouched SCE object loaded : DropletUtils::read10xCounts() (cellranger input) readr::read_delim() (delimited table input) SingleCellExperiment object (Rds file drake cache) sce_valid_cells: SCE object empty droplets removed sce_unfiltered: sce_valid_cells added columns: Columns cell_qc target containing DataFrame cell QC metrics discard_qc: dataset-sensitive filter discard_custom: custom filter sce_qc_filter, sce_qc_filter_genes: SCE object cells filtered dataset-sensitive filtering. latter filtered genes. sce_custom_filter, sce_custom_filter_genes: SCE object cells filtered custom filtering. latter filtered genes. sce_selected: SCE object selected either sce_qc_filter_genes sce_custom_filter_genes - depends SAVE_DATASET_SENSITIVE_FILTERING parameter sce_final_input_qc: sce_selected added gene annotation (gene_annotation target) rowData(). final SCE object used next stage norm_clustering.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/stage_input_qc.html","id":"cell-filters","dir":"Articles","previous_headings":"","what":"Cell filters","title":"Input and quality control stage (`01_input_qc`)","text":"cell_qc: DataFrame cell QC metrics following list filters computed scater::isOutlier() cell_qc columns, shown individual filters (e.g. qc_lib: total column). , FALSE refers cells passing filter. qc_filters: list named lists logical values dataset-sensitive cell filtering: qc_lib (total): low number UMI (lower tail) qc_nexprs (detected): low number detected genes = non-zero UMI count (lower tail) qc_mito (subsets_mito_percent): high percentage expressed mitochondrial genes expression (upper tail) custom_filters: list named lists logical values custom cell filtering: low_count (total): low number UMIs. high_count (total): high number UMIs. low_expression (detected): low number detected genes. high_mito (subsets_mito_percent): high percentage expressed mitochondrial genes. qc_filter, custom_filter: summarized filter (“” operation) qc_filters custom_filters, respectively","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/stage_input_qc.html","id":"gene-filters","dir":"Articles","previous_headings":"","what":"Gene filters","title":"Input and quality control stage (`01_input_qc`)","text":"sce_qc_gene_filter, sce_custom_gene_filter: gene filters (logical vectors) obtained get_gene_filter() SCE objects cells filtered dataset-sensitive custom filter, respectively. , FALSE refers genes passing filter.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/stage_input_qc.html","id":"plots","dir":"Articles","previous_headings":"","what":"Plots","title":"Input and quality control stage (`01_input_qc`)","text":"sce_unfiltered_plotlist: list various violin plots cell QC metrics (ggplot2 objects), generated using sce_unfiltered target. Cells colored discard_qc column - blue points pass dataset-sensitive filter, orange ones . example, following code used plot total UMI counts: sce_qc_filter_genes_plotlist, sce_custom_filter_genes_plotlist: similar sce_unfiltered_plotlist, , cells colored filter. , cells sce_qc_filter_genes_plotlist colored discard_custom column, thus, showing cells discarded custom-filtered dataset. Vice versa sce_custom_filter_genes_plotlist.","code":"scdrake::plot_colData(   sce_unfiltered,   y = \"total\",   colour_by = \"discard_qc\",   title = \"Total count\",   scale_y = ggplot2::scale_y_log10() )"},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/stage_input_qc.html","id":"other-targets","dir":"Articles","previous_headings":"","what":"Other targets","title":"Input and quality control stage (`01_input_qc`)","text":"config_input_qc: list holding parameters stage barcode_ranks: DataFrame barcode ranks knee plot, computed DropletUtils::barcodeRanks() UMI counts sce_raw target empty_droplets: DataFrame statistics empty droplets, computed DropletUtils::emptyDrops() UMI counts sce_raw target sce_history: tibble cell gene “history”, showing numbers unfiltered filtered data. sce_history_plot: ggplot2 object summarizing information sce_history target. gene_annotation: dataframe gene annotation, processed : single ENSEMBL ID multiple symbols, gene descriptions, ENTREZ IDs, collapsed comma (,). ENSEMBL ID used symbol ENSEMBL IDs unknown symbols. example, TBCE ENSG00000285053 ENSG00000284770 ENSEMBL IDs assigned -> symbol changed TBCE_ENSG00000285053 TBCE_ENSG00000284770. gene_annotation can also retrieved rowData(sce_final_input_qc)","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/stage_int_clustering.html","id":"section","dir":"Articles","previous_headings":"","what":"Post-integration clustering stage (`02_int_clustering`)","title":"Post-integration clustering stage (`02_int_clustering`)","text":"Overview Config parameters Outputs stage uses result selected integration method performs clustering, cell type annotation visualization (similar 02_norm_clustering stage single-sample pipeline). HVGs, reduced dimensions, selected markers already computed previous stage (01_integration). ⚙️ Config file: config/integration/02_int_clustering.yaml 📋 HTML report target (config/pipeline.yaml): DRAKE_TARGETS: [\"report_int_clustering\"] 📜 Example report (used config) Config stage stored config/integration/02_int_clustering.yaml file. Directory file read SCDRAKE_INTEGRATION_CONFIG_DIR environment variable upon scdrake load attach, saved scdrake_integration_config_dir option. option used default argument value several scdrake functions. following parameters 02_norm_clustering stage single-sample pipeline (see vignette(\"stage_norm_clustering\")): exception CLUSTER_SC3_ENABLED automatically set FALSE INTEGRATION_FINAL_METHOD \"harmony\", SC3 clustering performed reduced dimensions (Harmony compute integrated expression matrix). CELL_GROUPINGS INT_CLUSTERING_REPORT_DIMRED_NAMES, INT_CLUSTERING_REPORT_CLUSTERING_NAMES, INT_CLUSTERING_REPORT_DIMRED_PLOTS_OTHER INT_CLUSTERING_KNITR_MESSAGE, INT_CLUSTERING_KNITR_WARNING, INT_CLUSTERING_KNITR_ECHO can find description important targets stage. However, full overview, inspect source code get_int_clustering_subplan() function. HTML report target name: report_int_clustering","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/stage_int_clustering.html","id":"selection-of-final-integration-method","dir":"Articles","previous_headings":"","what":"Selection of final integration method","title":"Post-integration clustering stage (`02_int_clustering`)","text":"Type: character scalar (\"mnn\" | \"rescaling\" | \"regression\" | \"harmony\") name final integration method used clustering downstream steps. Type: logical scalar Whether take result removed cell cycle-related genes. also applied “uncorrected” method (used cluster markers contrasts). True possible single-samples INTEGRATION_SOURCES parameter (01_integration.yaml) hvg_rm_cc_genes set True.","code":"INTEGRATION_FINAL_METHOD: \"mnn\" INTEGRATION_FINAL_METHOD_RM_CC: False"},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/stage_int_clustering.html","id":"cell-grouping-assignment","dir":"Articles","previous_headings":"","what":"Cell grouping assignment","title":"Post-integration clustering stage (`02_int_clustering`)","text":"Type: character scalar null 02_norm_clustering stage single-sample pipeline (see vignette(\"stage_norm_clustering\")), except additional data must contain two columns: Barcode batch. latter must match dataset names INTEGRATION_SOURCES 01_integration.yaml config file. Example:","code":"ADDITIONAL_CELL_DATA_FILE: null DataFrame with 4 rows and 3 columns                           Barcode              batch     cluster_custom                           <character>          <factor>  <factor> AAACCCAAGTTGGGAC-1-pbmc1k AAACCCAAGTTGGGAC-1   pbmc1k    2 AAACCCACATTCTGTT-1-pbmc1k AAACCCACATTCTGTT-1   pbmc1k    1 AAACCCAGTCAGACGA-1-pbmc3k AAACCCAGTCAGACGA-1   pbmc3k    1 AAACCCAGTTTGTTGG-1-pbmc3k AAACCCAGTTTGTTGG-1   pbmc3k    2 ...  Note that rownames are not mandatory."},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/stage_int_clustering.html","id":"input-files","dir":"Articles","previous_headings":"","what":"Input files","title":"Post-integration clustering stage (`02_int_clustering`)","text":"Type: character scalar path RMarkdown files used HTML report pipeline stage.","code":"INT_CLUSTERING_REPORT_RMD_FILE: \"Rmd/integration/02_int_clustering.Rmd\""},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/stage_int_clustering.html","id":"output-files","dir":"Articles","previous_headings":"","what":"Output files","title":"Post-integration clustering stage (`02_int_clustering`)","text":"Type: character scalar path base output directory stage. created BASE_OUT_DIR specified 00_main.yaml config. Type: character scalar Names files directories created INT_CLUSTERING_BASE_OUT_DIR. Subdirectories allowed.","code":"INT_CLUSTERING_BASE_OUT_DIR: \"02_int_clustering\" INT_CLUSTERING_DIMRED_PLOTS_OUT_DIR: \"dimred_plots\" INT_CLUSTERING_CELL_ANNOTATION_OUT_DIR: \"cell_annotation\" INT_CLUSTERING_OTHER_PLOTS_OUT_DIR: \"other_plots\" INT_CLUSTERING_REPORT_HTML_FILE: \"02_int_clustering.html\""},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/stage_int_clustering.html","id":"singlecellexperiment-objects","dir":"Articles","previous_headings":"","what":"SingleCellExperiment objects","title":"Post-integration clustering stage (`02_int_clustering`)","text":"sce_int_uncorrected: selected uncorrected SCE object according INTEGRATION_FINAL_METHOD_RM_CC parameter. sce_int_final: selected integrated SCE object according INTEGRATION_FINAL_METHOD INTEGRATION_FINAL_METHOD_RM_CC parameters. sce_int_clustering_final: similar sce_final_norm_clustering 02_norm_clustering stage single-sample pipeline.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/stage_int_clustering.html","id":"targes-similar-to-02_norm_clustering","dir":"Articles","previous_headings":"","what":"Targes similar to 02_norm_clustering","title":"Post-integration clustering stage (`02_int_clustering`)","text":"targets basically 02_norm_clustering pipeline single-sample pipeline (see vignette(\"stage_norm_clustering\")). However, full overview, inspect source code get_int_clustering_subplan() function. selected_markers_int_plots_final: selected markers plots selected integration method","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/stage_integration.html","id":"section","dir":"Articles","previous_headings":"","what":"Integration stage (`01_integration`)","title":"Integration stage (`01_integration`)","text":"Overview Config parameters Outputs stage imports multiple SingleCellExperiment objects performs integration using one several methods. ⚙️ Config file: config/integration/01_integration.yaml 📋 HTML report target (config/pipeline.yaml): DRAKE_TARGETS: [\"report_integration\"] 📜 Example report (used config) 🪜 Structure drake caches multiple single-sample pipelines Rds files SingleCellExperiment objects Subsetting common column row data, metadata Normalization sample inter-batch sequencing depth (batchelor::multiBatchNorm(), theory) HVG metric (gene variance CV2), apply top HVGs selection single-sample pipeline. samples must HVG metric used . Set operations (without duplicates): intersection, union, take Rescaling (batchelor::rescaleBatches(), theory): scale counts average count within batch gene Regression (batchelor::regressBatches(), theory): fit linear model gene regress uninteresting factors variation, returning matrix residuals Fast mutual nearest neighbors (batchelor::fastMNN(), theory) Harmony steps performed integration method, plus separately HVGs removed cell cycle-related genes (removal requested). Calculation PCA selection number principal components (PCs) used downstream. similar done single-sample pipeline (02_norm_clustering stage), , case, selection PCs can configured integration method. Dimensionality reduction, single-sample pipeline, PCA, can configured integration method Expression plots selected markers Mutual nearest neighbors (MNN) clustering assess integration results Assignment cells sample MNN clusters (tables, plots) Rand indices: used evaluate biological heterogeneity preservation summarizing agreement clusterings Config stage stored config/integration/01_integration.yaml file. Directory file read SCDRAKE_INTEGRATION_CONFIG_DIR environment variable upon scdrake load attach, saved scdrake_integration_config_dir option. option used default argument value several scdrake functions. can find description important targets stage. However, full overview, inspect source code get_integration_subplan() function. HTML report target name: report_integration","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/stage_integration.html","id":"integration-sources","dir":"Articles","previous_headings":"","what":"Integration sources","title":"Integration stage (`01_integration`)","text":"Type: list named lists parameter specifies datasets integrated. read single-sample pipeline results (sce_final_norm_clustering targets) taken corresponding drake caches SCE objects saved Rds format. latter correspond sce_final_norm_clustering targets, one can modify e.g. colData() needed. name nested list specifies name single-sample, e.g. pbmc1k. Parameters single-sample : path: \"path//.drake path//sce.Rds\" (character scalar): path drake cache directory SCE object Rds file (depends path_type). path_type: \"drake_cache\" (character scalar: \"drake_cache\" | \"sce\"): type input data - either drake cache directory SCE object Rds file. description: \"10x Genomics PBMC 1k dataset\" (character scalar): description single-sample, appear reports. hvg_rm_cc_genes: True (logical scalar): True, cell cycle-related genes removed prior selection highly variable genes (HVGs). method cell cycle correction 02_norm_clustering stage single-sample pipeline (see vignette(\"stage_norm_clustering\") details). hvg_cc_genes_var_expl_threshold: 5 (numeric scalar): threshold cell cycle variance explained. Genes var. expl. greater threshold marked CC-related. Currently, limitations datasets can integrated: single-samples must normalized {scran} method. HVG selection integrated data based combined HVG metrics (see relevant parameters ), single-samples use HVG metric (HVG_METRIC \"gene_var\" \"gene_cv2\").","code":"INTEGRATION_SOURCES:   - pbmc1k:       path: \"path/to/.drake or path/to/sce.Rds\"       path_type: \"drake_cache\"       description: \"10x Genomics PBMC 1k dataset\"       hvg_rm_cc_genes: True       hvg_cc_genes_var_expl_threshold: 5     pbmc3k:       path: \"path/to/.drake or path/to/sce.Rds\"       path_type: \"drake_cache\"       description: \"10x Genomics PBMC 3k dataset\"       hvg_rm_cc_genes: False       hvg_cc_genes_var_expl_threshold: null"},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/stage_integration.html","id":"selection-of-highly-variable-genes-hvgs","dir":"Articles","previous_headings":"","what":"Selection of highly variable genes (HVGs)","title":"Integration stage (`01_integration`)","text":"done prior integration, methods specified INTEGRATION_METHODS (see ). single-sample hvg_rm_cc_genes set True, cell cycle-related genes removed prior HVG combination selection. Type: character scalar (\"hvg_metric\" | \"intersection\" | \"union\" | \"\") combine HVGs single-samples: \"hvg_metric\": combine HVG metrics (gene variance CV2) apply HVG selection similar procedure 02_norm_clustering stage single-sample pipeline. Note order combine HVG metrics, samples HVG_METRIC set either \"gene_var\" (scran::combineVar()) \"gene_cv2\" (scran::combineCV2()). \"intersection\" \"union\" \"\": use common genes samples HVGs (without duplicates). Type: character scalar, integer scalar HVG selection strategy. relevant HVG_COMBINATION_INT \"hvg_metric\", .e. selection applied combined HVG metrics. parameters similar HVG_SELECTION HVG_SELECTION_VALUE 02_norm_clustering stage single-sample pipeline (see vignette(\"stage_norm_clustering\") details).","code":"HVG_COMBINATION_INT: \"hvg_metric\" HVG_SELECTION_INT: \"top\" HVG_SELECTION_VALUE_INT: 3000"},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/stage_integration.html","id":"integration-methods","dir":"Articles","previous_headings":"","what":"Integration methods","title":"Integration stage (`01_integration`)","text":"Type: list named lists named list specifying parameters one integration method. ones specified integration_params list used directly integration method, others used prior/integration. \"uncorrected\" least one integration method must set (default, methods performed). descriptions possible parameters (used multiple methods, thus described ) integration method: pca_selection_method: \"forced\" (character scalar: \"forced\" | \"elbow\" | \"technical_noise\"): see PCA_SELECTION_METHOD parameter vignette(\"stage_norm_clustering\"). pca_forced_pcs: 15 (integer scalar): force number selected PCs (pca_selection_method \"forced\"). tsne_perp: 20 (numeric scalar): t-SNE perplexity. tsne_max_iter: 1000 (positive integer scalar): maximum number t-SNE iterations. pca_selection_method: \"forced\" pca_forced_pcs: 15 tsne_perp: 20 tsne_max_iter: 1000 log.base: 2 (numeric scalar): base log-transformation. pseudo.count: 1 (numeric scalar): pseudo-count used log-transformation. pca_selection_method: \"corrected\": integration method, batchelor::multiBatchPCA() used, PCs (50 default) method used \"corrected\" specified. Otherwise PCA selection method can used. pca_forced_pcs: 15 tsne_perp: 20 tsne_max_iter: 1000 d: 50 (integer scalar): number PCs compute batchelor::multiBatchPCA(). pca_selection_method: \"corrected\" pca_forced_pcs: 15 tsne_perp: 20 tsne_max_iter: 1000 k: 20 (integer scalar): number nearest neighbors consider identifying MNNs. prop.k: null (numeric scalar): proportion cells dataset use mutual nearest neighbor searching. set, number nearest neighbors used MNN search batch redefined max(k, prop.k*N) N number cells batch. cos.norm: True (logical scalar): True, cosine normalization performed input data prior PCA. ndist: 3 (numeric scalar): threshold beyond neighbors ignored computing correction vectors. threshold defined multiple number median distances. d: 50 merge.order: null (integer vector, list lists, null): merge order single-samples. Alternatively, list lists representing tree structure specifying hierarchical merge order (tested, see batchelor::fastMNN() details). auto.merge: True (logical scalar): True, automatically identify “best” merge order. pca_selection_method: null; pca_forced_pcs: null: used, see dims.use tsne_perp: 20 tsne_max_iter: 1000 dims.use: 50 (integer scalar): number first PCs use Harmony integration. Selection PCs applied Harmony - PCA dims.use PCs computed prior integration. theta: null: diversity clustering penalty parameter. Specify variable group..vars (\"batch\"). Default theta = 2, theta = 0 encourage diversity. Larger values theta result diverse clusters. lambda: null: didge regression penalty parameter. Specify variable group..vars (\"batch\"). Default lambda = 1. Lambda must strictly positive. Smaller values result aggressive correction. sigma: 0.1: width soft kmeans clusters. Default sigma = 0.1. Sigma scales distance cell cluster centroids. Larger values sigma result cells assigned clusters. Smaller values sigma make soft k-means cluster approach hard clustering. nclust: null: number clusters model. nclust = 1 equivalent simple linear regression. tau: 0: protection overclustering small datasets large ones. tau expected number cells per cluster. block.size: 0.05: proportion cells update clustering. 0 1, default 0.05. Larger values may faster less accurate. max.iter.harmony: 10: maximum number rounds run Harmony. One round Harmony involves one clustering one correction step. max.iter.cluster: 20: maximum number rounds run clustering round Harmony. epsilon.cluster: 0.00001: convergence tolerance clustering round Harmony. Set -inf never stop early. epsilon.harmony: 0.0001: convergence tolerance Harmony. Set -inf never stop early.","code":"INTEGRATION_METHODS:   - uncorrected:       pca_selection_method: \"forced\"       pca_forced_pcs: 15       tsne_perp: 20       tsne_max_iter: 1000     rescaling:       pca_selection_method: \"forced\"       pca_forced_pcs: 15       tsne_perp: 20       tsne_max_iter: 1000       integration_params:         log.base: 2         pseudo.count: 1     regression:       pca_selection_method: \"corrected\"       pca_forced_pcs: 15       tsne_perp: 20       tsne_max_iter: 1000       integration_params:         d: 50     mnn:       pca_selection_method: \"corrected\"       pca_forced_pcs: 15       tsne_perp: 20       tsne_max_iter: 1000       integration_params:         k: 20         prop.k: null         cos.norm: True         ndist: 3         d: 50         merge.order: null         auto.merge: True     harmony:       pca_selection_method: null       pca_forced_pcs: null       tsne_perp: 20       tsne_max_iter: 1000       integration_params:         dims.use: 50         theta: null         lambda: null         sigma: 0.1         nclust: null         tau: 0         block.size: 0.05         max.iter.harmony: 10         max.iter.cluster: 20         epsilon.cluster: 0.00001         epsilon.harmony: 0.0001"},{"path":[]},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/stage_integration.html","id":"fast-mnn-clustering","dir":"Articles","previous_headings":"Integration diagnostics","what":"Fast MNN clustering","title":"Integration stage (`01_integration`)","text":"Used obtain basic integration diagnostics. See scran::buildSNNGraph() bluster::makeSNNGraph() details. Type: integer scalar number nearest neighbors consider graph construction. Type: character scalar (\"rank\" | \"number\" | \"jaccard\") type weighting scheme use shared neighbors. Type: character scalar (\"walktrap\" | \"louvain\") type MNN clustering algorithm. See igraph::cluster_walktrap() igraph::cluster_louvain() details.","code":"INTEGRATION_SNN_K: 10 INTEGRATION_SNN_TYPE: \"rank\" INTEGRATION_SNN_CLUSTERING_METHOD: \"walktrap\""},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/stage_integration.html","id":"input-files","dir":"Articles","previous_headings":"","what":"Input files","title":"Integration stage (`01_integration`)","text":"Type: character scalar null Similar SELECTED_MARKERS_FILE parameter vignette(\"stage_norm_clustering\"). Type: character scalar path RMarkdown file used HTML report pipeline stage.","code":"SELECTED_MARKERS_FILE: null INTEGRATION_REPORT_RMD_FILE: \"Rmd/integration/01_integration.Rmd\""},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/stage_integration.html","id":"output-files","dir":"Articles","previous_headings":"","what":"Output files","title":"Integration stage (`01_integration`)","text":"Type: character scalar path base output directory stage. created BASE_OUT_DIR specified 00_main.yaml config. Type: character scalar Names files directories created INTEGRATION_BASE_OUT_DIR. Subdirectories allowed.","code":"INTEGRATION_BASE_OUT_DIR: \"01_integration\" INTEGRATION_SELECTED_MARKERS_OUT_DIR: \"selected_markers\" INTEGRATION_REPORT_HTML_FILE: \"01_integration.html\""},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/stage_integration.html","id":"html-output-parameters","dir":"Articles","previous_headings":"","what":"HTML output parameters","title":"Integration stage (`01_integration`)","text":"Type: logical scalar passed knitr::opts_chunk() used rendering stage’s HTML report.","code":"INTEGRATION_KNITR_MESSAGE: False INTEGRATION_KNITR_WARNING: False INTEGRATION_KNITR_ECHO: False"},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/stage_integration.html","id":"singlecellexperiment-objects","dir":"Articles","previous_headings":"","what":"SingleCellExperiment objects","title":"Integration stage (`01_integration`)","text":"sce_int_import: list imported single-sample SCE objects, defined INTEGRATION_SOURCES parameter. drake watch changes cache, target always rerun. Also, constraints checked (common normalization method HVG metrics). sce_int_raw_snn_clustering: sce_int_import computed fast SNN clustering single-sample, used integration diagnostics sce_int_processed: sce_int_import subsetted common colData, features (rows) corresponding metadata (hvg_ids, hvg_metric_fit) sce_int_multibatchnorm: sce_int_processed SCE objects normalized inter-batch sequencing depth (batchelor::multiBatchNorm()) sce_int_df: tibble integrated SCE objects. row one method defined INTEGRATION_METHODS parameter either without removed cell cycle-related genes HVGs. See ?sce_int_df_fn information added modified metadata() integrated SCE object. integrated assay named \"integrated\", except Harmony integration, computes batch-corrected reduced dimensions (available reducedDims(sce, \"harmony\")). sce_int_pca_df: sce_int_df computed PCA selected number PCs. Also includes PC selection statistics plot sce_int_clustering_df: sce_int_pca_df computed MNN clustering used integration diagnostics sce_int_dimred_df: sce_int_pca_df computed t-SNE UMAP dimensionality reductions","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/stage_integration.html","id":"highly-variable-genes-hvgs-selection","dir":"Articles","previous_headings":"","what":"Highly variable genes (HVGs) selection","title":"Integration stage (`01_integration`)","text":"hvg_int, hvg_int_with_cc: lists HVGs selection parameters. latter NULL single-samples defined INTEGRATION_SOURCES parameter hvg_rm_cc_genes set True. hvg_plots_int_df: tibble HVG diagnostic plots","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/stage_integration.html","id":"plots","dir":"Articles","previous_headings":"","what":"Plots","title":"Integration stage (`01_integration`)","text":"sce_int_dimred_plots_df: tibble dimensionality reduction plots","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/stage_integration.html","id":"selected-markers","dir":"Articles","previous_headings":"Plots","what":"Selected markers","title":"Integration stage (`01_integration`)","text":"selected_markers_int_plots_df: tibble plots selected markers, similar selected_markers_plots 02_norm_clustering stage single-sample pipeline selected_markers_plots_files_out: make target export plots","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/stage_norm_clustering.html","id":"section","dir":"Articles","previous_headings":"","what":"Normalization and clustering stage (`02_norm_clustering`)","title":"Normalization and clustering stage (`02_norm_clustering`)","text":"Overview Config parameters Outputs stage build upon 01_input_qc stage performs perhaps important steps scRNA-seq data analysis: normalization, highly variable gene selection, dimensionality reduction, clustering, cell type annotation, visualization. ⚙️ Config file: config/single_sample/02_norm_clustering.yaml 📋 HTML report target (config/pipeline.yaml): DRAKE_TARGETS: [\"report_norm_clustering\", \"report_norm_clustering_simple\"] 📜 Example report (used config) 📜 Example simplified report (used config) 🪜 Structure Calculation cell cycle score assignment cells phases (G1, G2M, S) using list cell cycle genes Seurat::cc.genes.updated.2019 Seurat::CellCycleScoring() function Normalization deconvolution implemented scran package (scuttle::computePooledFactors(), scuttle::logNormCounts()) Regularized negative binomial regression normalize UMI count data implemented sctransform package wrapped Seurat package. method also allows regress confounding variables cell cycle score percentage mitochondrial genes expression. Note cell cycle score, better method seems removal CC-related genes prior detection highly variable genes (HVGs, see ). sctransform also returns specified number HVGs. HVGs used downstream dimensionality reduction clustering Gene variance Coefficient variation (CV2) HVGs obtained sctransform normalization Top N genes based metric (e.g. top 1000 genes highest variance) Significance (FDR) threshold Threshold metric value Prior HVG selection, cell cycle-related genes can removed. scdrake using method based percentage variance explained cell cycle phase expression profile gene (details) Removal cell doublets (scDblFinder::computeDoubletDensity()). Using elbow point Using technical noise Using fixed number PCs (forced) Graph-based clustering (mutual nearest neighbors) using Leiden, Louvain Walktrap algorithms. control number resulting clusters (granularity), multiple resolutions can specified former two algorithms. K-means clustering using defined numbers K best K selection Single-Cell Consensus Clustering (SC3) defined numbers clusters Reference datasets taken default celldex package. Note reference datasets included celldex package don’t contain every possible cell type annotation may bring inaccurate labels datasets. Thus, also possible supply SingleR custom reference datasets form {SingleCellExperiment} SummarizedExperiment object. Score heatmaps show distribution predicted cell types computed clusters (), along per-cell annotation scores, Marker heatmaps show genes markers given cell type reference current datasets,, .e. markers driven decision label cells chosen cell type, Delta scores show poor-quality ambiguous assignments based per-cell ‘delta’, .e., difference , score assigned label median across labels cell., See OSCA details Cluster 1 -> T cells Cluster 2 -> B cells Cluster 3 -> T cells can use new cell grouping e.g. plotting reduced dimensions calculation cluster markers. PCA t-SNE UMAP Expression plots selected groups genes (markers) reduced dimensions simplified report non-technical audience contains dimred plots, selected markers cell annotation results Config stage stored config/single_sample/02_norm_clustering.yaml file. Directory file read SCDRAKE_SINGLE_SAMPLE_CONFIG_DIR environment variable upon scdrake load attach, saved scdrake_single_sample_config_dir option. option used default argument value several scdrake functions. can find description important targets stage. However, full overview, inspect source code get_input_norm_clustering_subplan() function. HTML report target names: report_norm_clustering, report_norm_clustering_simple (dimred plots)","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/stage_norm_clustering.html","id":"spatial-extension","dir":"Articles","previous_headings":"","what":"Spatial extension","title":"Normalization and clustering stage (`02_norm_clustering`)","text":"Type: logical scalar True, pipeline enables spatial extension. option enables spatial extension selection spatially variable genes (SVGS), pseudo tissue visualization visualization options marker-based annotation.","code":"SPATIAL: False"},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/stage_norm_clustering.html","id":"normalization-parameters","dir":"Articles","previous_headings":"","what":"Normalization parameters","title":"Normalization and clustering stage (`02_norm_clustering`)","text":"Type: character scalar (\"scran\" | \"sctransform\" | \"none\") normalization type: \"scran\": normalization deconvolution. \"sctransform\": regularized negative binomial regression. returned counts log1p (natural log) scale converted log2. Note: SingleCellExperiment normalized method used integration. example, can take sce_final_norm_clustering, subset cells e.g. three clusters, save result Rds file, run pipeline importing file 01_input_qc stage. Note case disable empty droplets removal, cell gene filtering, data already high quality. Overall, example reclustering, otherwise hard achieve within pipeline. See vignette(\"pipeline_overview\") details normalization methods.","code":"NORMALIZATION_TYPE: \"scran\""},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/stage_norm_clustering.html","id":"scran-normalization-parameters","dir":"Articles","previous_headings":"Normalization parameters","what":"scran normalization parameters","title":"Normalization and clustering stage (`02_norm_clustering`)","text":"parameters used NORMALIZATION_TYPE \"scran\". Type: logical scalar Whether cluster cells prior normalization. See ?scran::quickCluster details. Type: character scalar (\"igraph\" | \"hclust\") clustering method: \"igraph\" uses graph-based clustering, \"hclust\" uses hierarchical clustering. See ?scran::quickCluster details.","code":"SCRAN_USE_QUICKCLUSTER: True SCRAN_QUICKCLUSTER_METHOD: \"igraph\""},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/stage_norm_clustering.html","id":"sctransform-normalization-parameters","dir":"Articles","previous_headings":"Normalization parameters","what":"sctransform normalization parameters","title":"Normalization and clustering stage (`02_norm_clustering`)","text":"parameters used NORMALIZATION_TYPE \"sctransform\". Type: list character scalar null Batch variables regress SCTransform normalization. can regress variables [\"percent.mt\", \"nFeature_RNA\", \"nCount_RNA\"] cell cycle using [\"S.Score\", \"G2M.Score\"] [\"CC.Difference\"]. However, correction cell cycle effect, better method removal cell cycle-related genes selection highly variable genes (HVGs). can set HVG selection parameters, approach explained details vignette(\"pipeline_overview\"). Type: integer scalar number top HVGs return SCTransform normalization.","code":"SCT_VARS_TO_REGRESS: null SCT_N_HVG: 3000"},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/stage_norm_clustering.html","id":"highly-variable-genes-hvgs-selection","dir":"Articles","previous_headings":"","what":"Highly variable genes (HVGs) selection","title":"Normalization and clustering stage (`02_norm_clustering`)","text":"Type: character scalar (\"gene_var\" | \"gene_cv2\" | \"sctransform\") metric used find HVGs. See https://bioconductor.org/books/3.15/OSCA.basic/feature-selection.html details. \"gene_var\": variance log-counts (scran::modelGeneVar()). \"gene_cv2\": coefficient variation (scran::modelGeneCV2()). \"sctransform\": use HVGs selected SCTransform. relevant NORMALIZATION_TYPE parameter \"sctransform\". can adjust number HVGs SCT_N_HVG parameter. SPATIAL option enabled, spatially variable genes (SVGs) automaticaly calculated together HVGs. done using Seurat::SVFInfo, selection method MoransI. union unique SVGs HVGs taking processing, see https://www.biorxiv.org/content/10.1101/2021.08.27.457741v1 details. Type: character scalar (\"top\" | \"significance\" | \"threshold\") HVG selection strategy. relevant HVG_METRIC parameter \"gene_var\" \"gene_cv2\". \"top\": take top X genes according metric (details). \"significance\": use FDR threshold (details). \"threshold\": use threshold minimum value metric (details). \"top\" \"threshold\", bio ratio columns used HVG_METRIC \"gene_var\" \"gene_cv2\", respectively. columns present DataFrame returned underlying method (scran::modelGeneVar() scran::modelGeneCV2()). Type: depends value HVG_SELECTION parameter: positive integer scalar HVG_SELECTION: \"top\". numeric scalar \\(<0; 1>\\) HVG_SELECTION: \"significance\". numeric scalar HVG_SELECTION: \"threshold\". threshold value HVG selection. following parameter combinations recommended defaults: Top 1000 genes HVG metric. Genes HVG metric significance (FDR) lesser 0.05. Genes HVG metric value greater 0 1.","code":"HVG_METRIC: \"gene_var\" HVG_SELECTION: \"top\" HVG_SELECTION_VALUE: 1000 HVG_SELECTION: \"top\" HVG_SELECTION_VALUE: 1000 HVG_SELECTION: \"significance\" HVG_SELECTION_VALUE: 0.05 HVG_METRIC: \"gene_var\" HVG_SELECTION: \"threshold\" HVG_SELECTION_VALUE: 0 HVG_METRIC: \"gene_cv2\" HVG_SELECTION: \"threshold\" HVG_SELECTION_VALUE: 1"},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/stage_norm_clustering.html","id":"removal-of-cell-cycle-related-genes-prior-to-hvg-selection","dir":"Articles","previous_headings":"","what":"Removal of cell cycle-related genes prior to HVG selection","title":"Normalization and clustering stage (`02_norm_clustering`)","text":"Type: logical scalar Whether apply correction cell cycle prior HVG selection. implement cell cycle-related genes removal strategy described . based percentage variance explained cell cycle phase expression profile gene. Note SCTransform used normalization including cell cycle variables regress , results strategy remain unclear. Type: positive numeric scalar threshold gene cell cycle variance explained, .e. genes var. expl. greater threshold marked cell cycle-related removed prior selection HVGs.","code":"HVG_RM_CC_GENES: False HVG_CC_GENES_VAR_EXPL_THRESHOLD: 5"},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/stage_norm_clustering.html","id":"doublet-detection-and-filtering","dir":"Articles","previous_headings":"","what":"Doublet detection and filtering","title":"Normalization and clustering stage (`02_norm_clustering`)","text":"Doublets droplets multiple cells captured. Type: positive numeric scalar null threshold doublet score computed scDblFinder::computeDoubletDensity(). Cells doublet score greater threshold removed. null, doublets removed, doublet score still computed.","code":"MAX_DOUBLET_SCORE: 3.5"},{"path":[]},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/stage_norm_clustering.html","id":"pca","dir":"Articles","previous_headings":"Dimensionality reduction","what":"PCA","title":"Normalization and clustering stage (`02_norm_clustering`)","text":"Type: character scalar (\"forced\" | \"elbow\" | \"technical_noise\") method select first N principal components (PCs): \"forced\": use number PCs specified PCA_FORCED_PCS parameter. \"elbow\": use elbow point method. \"technical_noise\": use technical noise. Type: positive integer scalar PCA_SELECTION_METHOD parameter \"forced\", use number first principal components.","code":"PCA_SELECTION_METHOD: \"forced\" PCA_FORCED_PCS: 15"},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/stage_norm_clustering.html","id":"t-sne","dir":"Articles","previous_headings":"Dimensionality reduction","what":"t-SNE","title":"Normalization and clustering stage (`02_norm_clustering`)","text":"t-stochastic neighbor embedding See ?scater::runTSNE underlying method. Type: numeric scalar t-SNE perplexity. Type: positive integer scalar maximum number t-SNE iterations.","code":"TSNE_PERP: 20 TSNE_MAX_ITER: 1000"},{"path":[]},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/stage_norm_clustering.html","id":"graph-based-clustering","dir":"Articles","previous_headings":"Clustering","what":"Graph-based clustering","title":"Normalization and clustering stage (`02_norm_clustering`)","text":"Parameters graph-based clustering. Type: positive integer scalar number shared nearest neighbors graph used community detection algorithms (graph-based clustering). Passed k parameter bluster::makeSNNGraph(). function’s help page: choice k controls connectivity graph resolution community detection algorithms. Smaller values k generally yield smaller, finer clusters, increasing k increase connectivity graph make difficult resolve different communities. value k can roughly interpreted anticipated size smallest subpopulation. Type: character scalar (\"rank\" | \"number\" | \"jaccard\") type weighting scheme use shared neighbors. Passed type parameter bluster::makeSNNGraph() (see function’s help page information). Type: logical scalar True, enable Leiden community detection algorithm. Type: numeric vector Resolutions Leiden clustering. Lower values result coarse-grained clustering, higher ones fine-grained structures. Cell-cluster memberships named cluster_graph_leiden_r{r} (e.g. colData() SCE object). Type: logical scalar True, enable Louvain community detection algorithm. Type: numeric vector Resolutions Louvain clustering. Lower values result coarse-grained clustering, higher ones fine-grained structures. Cell-cluster memberships named cluster_graph_louvain_r{r} (e.g. colData() SCE object). Type: logical scalar True, enable Walktrap community detection algorithm.","code":"CLUSTER_GRAPH_SNN_K: 10 CLUSTER_GRAPH_SNN_TYPE: \"rank\" CLUSTER_GRAPH_LEIDEN_ENABLED: True CLUSTER_GRAPH_LEIDEN_RESOLUTIONS: [0.2, 0.4, 0.6, 0.8, 1.0] CLUSTER_GRAPH_LOUVAIN_ENABLED: False CLUSTER_GRAPH_LOUVAIN_RESOLUTIONS: [0.2, 0.4, 0.6, 0.8, 1.0] CLUSTER_GRAPH_WALKTRAP_ENABLED: False"},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/stage_norm_clustering.html","id":"k-means-clustering","dir":"Articles","previous_headings":"Clustering","what":"k-means clustering","title":"Normalization and clustering stage (`02_norm_clustering`)","text":"Type: logical scalar True, enable k-means clustering selected numbers clusters (ks). Type: integer vector vector number clusters compute k-means. Note: !code 3:6 evaluate c(3, 4, 5, 6). Type: logical scalar True, enable k-means clustering best k based gap statistics.","code":"CLUSTER_KMEANS_K_ENABLED: False CLUSTER_KMEANS_K: !code 3:6 CLUSTER_KMEANS_KBEST_ENABLED: False"},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/stage_norm_clustering.html","id":"sc3-clustering","dir":"Articles","previous_headings":"Clustering","what":"SC3 clustering","title":"Normalization and clustering stage (`02_norm_clustering`)","text":"Type: logical scalar True, enable SC3 selected numbers clusters (ks). Type: integer vector vector number clusters compute SC3 clustering. Note: !code 3:6 evaluate c(3, 4, 5, 6). Type: integer scalar number CPU cores use SC3 computation. may lead --memory errors number cores greater 1. Note drake may problems pipeline run parallel mode time target using parallel code (within target parallelism). SC3 computation recommended run pipeline sequential mode (DRAKE_PARALLELISM: \"loop\") set DRAKE_TARGETS: [\"cluster_sce_sc3\"]. cluster_sce_sc3 target finished, can switch parallelism back clustermq future. Type: logical scalar False, skip SC3 clustering.","code":"CLUSTER_SC3_ENABLED: False CLUSTER_SC3_K: !code 5:6 CLUSTER_SC3_N_CORES: 1 CLUSTER_SC3_ENABLED: False"},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/stage_norm_clustering.html","id":"cell-type-annotation","dir":"Articles","previous_headings":"","what":"Cell type annotation","title":"Normalization and clustering stage (`02_norm_clustering`)","text":"Type: named list (dictionary) named lists Default parameters computation reporting cell type annotation. can overriden cell annotation reference source CELL_ANNOTATION_SOURCES (see ). GENES: \"de\" (character scalar: \"de\" | \"sd\" | \"\"): feature selection mode, see Details ?SingleR::trainSingleR(). SD_THRESH: 1 (numeric scalar): minimum threshold standard deviation per gene. used GENES: \"sd\". DE_METHOD: \"classic\" (character scalar: \"classic\" | \"wilcox\" | \"t\"): DE genes detected pairs labels. Defaults \"classic\", sorts genes log-fold changes takes top DE_N. Setting \"wilcox\" \"t\" use Wilcoxon ranked sum test Welch t-test labels, respectively, take top DE_N upregulated genes per comparison. DE_N: null (null integer scalar): number DE genes use GENES: \"de\". DE_METHOD: \"classic\", defaults \\(500 * (2/3) ^ log2(N)\\) \\(N\\) number unique labels. Otherwise, null defaults 10. ASSAY_TYPE: \"logcounts\" (character scalar integer): assay reference dataset containing relevant expression matrix. QUANTILE: 0.8 (numeric scalar): quantile correlation distribution use compute score label. TUNE_THRESH: 0.05 (numeric scalar): maximum difference maximum correlation use fine-tuning. ASSAY_TYPE: \"logcounts\" (character scalar integer): assay test dataset containing relevant expression matrix. N_MADS: 3 (numeric scalar): number MADs use defining low outliers per-label distribution delta values (.e., difference median). MIN_DIFF_MED: -.inf (numeric scalar): minimum acceptable delta cell. MIN_DIFF_NEXT: 0 (numeric scalar): minimum difference best score next best score fine-tuning. HEATMAP_N_TOP_MARKERS: 20 (integer scalar): many top markers put heatmaps classification. Markers computed classification using predicted cell labels. Type: list named lists null Specifies reference dataset(s) used cell type annotation. method used SingleR training classification described . names named lists used name reference datasets, e.g. prefixes names colData() columns containing per-cell labels. info structure related targets given Targets section. skip cell annotation step, define CELL_ANNOTATION_SOURCES null. reference dataset must following parameters: reference_type: \"celldex\" (character scalar: \"celldex\" | \"file\"): type reference dataset. reference_type: \"celldex\": name function call celldex package. function must return SummarizedExperiment object. See celldex’s vignette overview available datasets. reference_type: \"file\": path Rds file saved SingleCellExperiment SummarizedExperiment object. assay type specified TRAIN_PARAMS/assay_type must present assayNames() object. label_column must present colData() object. description: \"...\" (character scalar): description reference dataset, appear plots. label_column: \"label.main\" (character scalar): specifies column colData() reference dataset used training. datasets celldex package, label.main, label.fine (granular labels), label.ont (cell ontology IDs). label_subsets: [] (character vector): labels subset reference dataset prior training, e.g. [\"T cells\", \"B cells\", \"Progenitors\"]. entry (e.g. human_primary_cell_atlas_main ) can override default parameters CELL_ANNOTATION_SOURCES_DEFAULTS (using lowercase names), e.g. override corresponding parameters TRAIN_PARAMS CELL_ANNOTATION_SOURCES_DEFAULTS.","code":"CELL_ANNOTATION_SOURCES_DEFAULTS:   TRAIN_PARAMS:     GENES: \"de\"     SD_THRESH: 1     DE_METHOD: \"classic\"     DE_N: null     ASSAY_TYPE: \"logcounts\"   CLASSIFY_PARAMS:     QUANTILE: 0.8     TUNE_THRESH: 0.05     ASSAY_TYPE: \"logcounts\"   PRUNE_SCORE_PARAMS:     N_MADS: 3     MIN_DIFF_MED: -.inf     MIN_DIFF_NEXT: 0   DIAGNOSTICS_PARAMS:     HEATMAP_N_TOP_MARKERS: 20 CELL_ANNOTATION_SOURCES:   - human_primary_cell_atlas_main:       reference_type: \"celldex\"       reference: \"HumanPrimaryCellAtlasData\"       description: >         Microarray datasets derived from human primary cells (Mabbott et al. 2013).         Most of the labels refer to blood subpopulations but cell types from other tissues are also available.       label_column: \"label.main\"       label_subsets: []     monaco_immune_fine:       reference_type: \"celldex\"       reference: \"MonacoImmuneData\"       description: \"This is the human immune reference that best covers all of the bases for a typical PBMC sample.\"       label_column: \"label.fine\"       label_subsets: [] CELL_ANNOTATION_SOURCES:   - human_primary_cell_atlas_main:       ...       train_params:         de_method: \"wilcox\"         de_n: 30"},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/stage_norm_clustering.html","id":"marker-based-cell-annotation-signatures","dir":"Articles","previous_headings":"","what":"Marker-based cell annotation signatures","title":"Normalization and clustering stage (`02_norm_clustering`)","text":"Type: logical scalar Whether marker-based annotation enabled. Marker-based annotation based expression profiles, markers taken user-defined file. Resulted annotation stored annotation_metadata target. Marker-based cell annotation implemented Giotto package enrichment function, based PAGE method Kim SY et al. Type: logical scalar Path user-define file contacting markers expected cell type. column name one cell type, rows gene markers. Example: Type: logical scalar Whether scale gene profiles. Type: numeric scalar Minimal overlap genes cell/cell selected clusters, assign cell type. Type: character scalar clustering (column cell metadata) perform annotation. Type: character scalar value show resulting heatmap. Type: character scalar toghether spatial option. Whether show pseudo tissue cell plots enrichment annotation. Type: character scalar dimension reduction use show result marker-based annotation.","code":"MANUAL_ANNOTATION: False ANNOTATION_MARKERS: Null Astrocytes,Endothelial,Neurons GFAP,PECAM1,SLC6A1 SLC1A3,A2M,CHAT GLUL,,GAD2 SCALE_ANNOTATION: False OVERLAP: 5 ANNOTATION_CLUSTERING: \"cluster_kmeans_k4\" SHOW_VALUE: \"value\" (`\"value\"` | `\"zscores\"` | `\"zscores_rescaled\"`) MAKE_CELL_PLOT: False HEATMAP_DIMRED: \"umap\""},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/stage_norm_clustering.html","id":"cell-grouping-assignment","dir":"Articles","previous_headings":"","what":"Cell grouping assignment","title":"Normalization and clustering stage (`02_norm_clustering`)","text":"Using two parameters , possible add custom cell metadata rearrange current one new groupings (saved colData() columns SingleCellExperiment object). groupings can referenced parameters, e.g. NORM_CLUSTERING_REPORT_DIMRED_PLOTS_OTHER cluster_markers contrasts stages. Type: character scalar null path file additional cell data added colData() final SCE object stage. additional data overwrite existing columns (e.g. cluster_graph_louvain), appended CELL_GROUPINGS applied, can refer additional data columns inside CELL_GROUPINGS. additional data, can cell barcodes present cell filtering 01_input_qc stage - missing ones NA set resulting data. Rownames mandatory. supported file formats CSV (comma separated, .csv extension) Rds (dataframe-like objects, .Rds extension). additional data must contain Barcode column joined original cell data (colData()). Type: list named lists null parameter specifies new cell groupings based existing columns (primarily clustering ones). key name new cell grouping (column colData() sce_dimred target) contains named list form: source_column (character scalar): name existing column colData(). description (character scalar, optional): description cell grouping, appear plots. set, name assignment used. <old level>: \"<new level>\": assignment old level new level. Different old levels new level merged. Order assignments matter, levels just replaced (hood, dplyr::recode() used). Unspecified levels kept . replace existing groupings (columns). possible column names source_column, see sce_final_norm_clustering target section . Let’s look example cell grouping: source_column: \"cluster_graph_leiden_r0.4\": name column colData() whose level used new assignments. description: \"Graph-based clustering ...\": description new assignment. set, name grouping (cluster_graph_leiden_r0.4_annotated) used instead. assignments: assignments old levels new ones. , level (cluster) 6 renamed \"B\", levels 1 7 merged new level \"memory_CD4+\". unspecified levels kept .","code":"ADDITIONAL_CELL_DATA_FILE: null CELL_GROUPINGS: null CELL_GROUPINGS:   - cluster_graph_leiden_r0.4_annotated:       source_column: \"cluster_graph_leiden_r0.4\"       description: \"Graph-based clustering (Leiden alg.), annotated clusters\"       assignments:         1: \"memory_CD4+\"         6: \"B\"         7: \"memory_CD4+\""},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/stage_norm_clustering.html","id":"dimensionality-reduction-plots","dir":"Articles","previous_headings":"","what":"Dimensionality reduction plots","title":"Normalization and clustering stage (`02_norm_clustering`)","text":"Type: character vector (\"umap\" | \"pca\" | \"tsne\") vector names dimensionality reduction methods plots report made. Type: list named lists character scalars Names variables colData() plot dimreds color , displayed report. format \"variable_name\": \"description\", description appear plot title. Variables defined CELL_GROUPINGS parameter can description set null - description CELL_GROUPINGS used.","code":"NORM_CLUSTERING_REPORT_DIMRED_NAMES: [\"umap\", \"pca\", \"tsne\"] NORM_CLUSTERING_REPORT_DIMRED_PLOTS_OTHER:   - \"phase\": \"Cell cycle phases\"     \"doublet_score\": \"Doublet score\"     \"total\": \"Total number of UMI\"     \"detected\": \"Detected number of genes\""},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/stage_norm_clustering.html","id":"input-files","dir":"Articles","previous_headings":"","what":"Input files","title":"Normalization and clustering stage (`02_norm_clustering`)","text":"Type: character scalar null path CSV file groups markers make expression dimred plots . Set null skip. plots created NORM_CLUSTERING_REPORT_DIMRED_NAMES. format following: row defines gene symbols group. First column name group second column gene symbols delimited “:”. Example: Naive_CD4+_T,IL7R:CCR7 use header! example CSV file PBMC 1k dataset automatically copied newly initialized project (system.file(\"extdata\", \"selected_markers.csv\", package = \"scdrake\", mustWork = TRUE)). can also view file GitHub . Type: character scalar Paths RMarkdown files used HTML reports pipeline stage. NORM_CLUSTERING_REPORT_RMD_FILE technically detailed, NORM_CLUSTERING_REPORT_SIMPLE_RMD_FILE outputs dimensionality reduction plots along cell annotation.","code":"SELECTED_MARKERS_FILE: null NORM_CLUSTERING_REPORT_RMD_FILE: \"Rmd/single_sample/02_norm_clustering.Rmd\" NORM_CLUSTERING_REPORT_SIMPLE_RMD_FILE: \"Rmd/single_sample/02_norm_clustering_simple.Rmd\""},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/stage_norm_clustering.html","id":"output-files","dir":"Articles","previous_headings":"","what":"Output files","title":"Normalization and clustering stage (`02_norm_clustering`)","text":"Type: character scalar path base output directory stage. created BASE_OUT_DIR specified 00_main.yaml config. Type: character scalar Names files directories created NORM_CLUSTERING_BASE_OUT_DIR. Subdirectories allowed.","code":"NORM_CLUSTERING_BASE_OUT_DIR: \"02_norm_clustering\" NORM_CLUSTERING_SELECTED_MARKERS_OUT_DIR: \"selected_markers\" NORM_CLUSTERING_DIMRED_PLOTS_OUT_DIR: \"dimred_plots\" NORM_CLUSTERING_OTHER_PLOTS_OUT_DIR: \"other_plots\" NORM_CLUSTERING_CELL_ANNOTATION_OUT_DIR: \"cell_annotation\" NORM_CLUSTERING_REPORT_HTML_FILE: \"02_norm_clustering.html\" NORM_CLUSTERING_REPORT_SIMPLE_HTML_FILE: \"02_norm_clustering_simple.html\""},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/stage_norm_clustering.html","id":"html-output-parameters","dir":"Articles","previous_headings":"","what":"HTML output parameters","title":"Normalization and clustering stage (`02_norm_clustering`)","text":"Type: logical scalar passed knitr::opts_chunk() used rendering stage’s HTML report.","code":"NORM_CLUSTERING_KNITR_MESSAGE: False NORM_CLUSTERING_KNITR_WARNING: False NORM_CLUSTERING_KNITR_ECHO: False"},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/stage_norm_clustering.html","id":"singlecellexperiment-objects","dir":"Articles","previous_headings":"","what":"SingleCellExperiment objects","title":"Normalization and clustering stage (`02_norm_clustering`)","text":"sce_cc: SCE object (sce_final_input_qc target input_qc stage) added cell cycle information colData(): phase (\"G1\", \"G2m\" \"S\"), s_score, g2m_score, cc_difference (s_score - g2m_score). sce_norm: sce_cc normalized counts SingleCellExperiment::logcounts() assay normalization_type item added metadata(). sce_norm_hvg: sce_norm added HVG information: metadata(): hvg_metric, hvg_selection, hvg_selection_value, hvg_metric_fit, hvg_rm_cc_genes, hvg_ids rowData(): is_hvg (logical) parameter HVG_RM_CC_GENES True, sce_norm_hvg also contain PCA dimensionality reduction (named pca_with_cc) whose computation HVGs used. sce_rm_doublets: sce_norm_hvg removed doublets added information: metadata(): has_filtered_doublets (FALSE MAX_DOUBLET_SCORE parameter null), max_doublet_score colData(): doublet_score (numeric), is_doublet (logical) sce_pca: sce_rm_doublets calculated PCA (50 PCs). Reduced dimensions can retrieved SingleCellExperiment::reducedDim(sce_pca, \"pca\") sce_pca_selected_pcs: sce_pca selected number PCs. Reduced dimensions pca slot subsetted selected number PCs, pca_all slot contains full matrix 50 PCs. Information selection PCs added metadata(): pca_selection_method, pca_selected_pcs. sce_dimred: sce_pca_selected_pcs calculated t-SNE UMAP, using selected number PCs calculation sce_final_norm_clustering: final SCE object stage used cluster_markers contrasts stages. object derived sce_dimred, cell clusterings along CELL_GROUPINGS added colData(). names columns containing cell clusterings : <r> based CLUSTER_GRAPH_LEIDEN_RESOLUTIONS CLUSTER_GRAPH_LOUVAIN_RESOLUTIONS parameters <k> based CLUSTER_KMEANS_K parameter <k> based CLUSTER_SC3_K parameter names reduces dimensionality matrices (can retrieved SingleCellExperiment::reducedDim()): PCA: \"pca\" t-SNE: \"tsne\" UMAP: \"umap\" can view names SingleCellExperiment::reducedDimNames()","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/stage_norm_clustering.html","id":"selection-of-pcs","dir":"Articles","previous_headings":"","what":"Selection of PCs","title":"Normalization and clustering stage (`02_norm_clustering`)","text":"pca_elbow_pcs, pca_gene_var_pcs: number selected PCs elbow point technical variance methods, respectively pca_selected_pcs_plot: ggplot2 object showing cummulative variance explained selected number first PCs methods","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/stage_norm_clustering.html","id":"cell-clustering","dir":"Articles","previous_headings":"","what":"Cell clustering","title":"Normalization and clustering stage (`02_norm_clustering`)","text":"clusters_all: named list integer vectors wraps clusterings ","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/stage_norm_clustering.html","id":"graph-based-clustering-1","dir":"Articles","previous_headings":"Cell clustering","what":"Graph-based clustering","title":"Normalization and clustering stage (`02_norm_clustering`)","text":"graph_snn: igraph object shared nearest-neighbor graph, returned scran::buildSNNGraph() cluster_graph_leiden, cluster_graph_walktrap, cluster_graph_louvain: lists cell clusters returned igraph::cluster_walktrap() igraph::cluster_louvain(), respectively. functions using graph_snn input cluster_graph_louvain_df, cluster_graph_walktrap_df, cluster_graph_leiden_df: dataframes graph-based clustering results cluster_graph_leiden_clustree, cluster_graph_louvain_clustree: ggplot2 objects clustree::clustree() plots","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/stage_norm_clustering.html","id":"k-means","dir":"Articles","previous_headings":"Cell clustering","what":"k-means","title":"Normalization and clustering stage (`02_norm_clustering`)","text":"cluster_kmeans_kbest_gaps: clusGap object used calculate best K. Returned cluster::clusGap(), matrix selected PCs passed cluster_kmeans_kbest_k: best K k-means, returned cluster::maxSE() cluster_kmeans_kbest, cluster_kmeans_k: lists cell clusters returned stats::kmeans(). former, cluster_kmeans_kbest_k used number clusters. latter, Ks CLUSTER_KMEANS_K parameter used. cluster_kmeans_k_df, cluster_kmeans_kbest_df: dataframes k-means clustering results cluster_kmeans_k_clustree: ggplot2 object clustree::clustree() plot. CLUSTER_KMEANS_KBEST_ENABLED True, also contain k-means result best k.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/stage_norm_clustering.html","id":"sc3","dir":"Articles","previous_headings":"Cell clustering","what":"SC3","title":"Normalization and clustering stage (`02_norm_clustering`)","text":"sce_sc3: SingleCellExperiment object returned SC3::sc3() cluster_sc3: list cell clusters cluster_sc3_df: dataframe SC3 clustering results cluster_sc3_stability_plots: list ggplot2 objects, returned make_sc3_stability_plots() (SC3::sc3_plot_cluster_stability() used internally) cluster_sc3_clustree: ggplot2 object clustree::clustree() plot","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/stage_norm_clustering.html","id":"cell-type-annotation-1","dir":"Articles","previous_headings":"","what":"Cell type annotation","title":"Normalization and clustering stage (`02_norm_clustering`)","text":"cell_annotation_params: tibble parameters parsed CELL_ANNOTATION_SOURCES cell_annotation: cell_annotation_params added cell_annotation list column holding outputs (DataFrames) SingleR::SingleR(). structure DataFrames described ?SingleR::classifySingleR(). cell_annotation_labels: named list character vectors per-cell label assignments. Later added cell_data target turn, colData() sce_final_norm_clustering sce_int_clustering_final (integration pipeline) targets/objects. default, three vectors labels reference dataset named : <reference_name>_labels_raw: “raw” labels. Taken first.labels column SingleR::SingleR() output <reference_name>_labels: fine-tuned labels. Taken labels column SingleR::SingleR() output <reference_name>_labels_pruned: fine-tuned pruned labels (contains NAs low quality labels). Taken pruned.labels column SingleR::SingleR() output. Note can use names cell_annotation_labels’s items CELL_GROUPINGS NORM_CLUSTERING_REPORT_DIMRED_PLOTS_OTHER parameters, also use cluster_markers (CLUSTER_MARKERS_SOURCES) contrasts (CONTRASTS_SOURCES) stages cell_annotation_diagnostic_plots: cell_annotation added list columns holding diagnostic plots, .e. reference dataset: score_heatmaps: heatmaps per-cell label scores created clustering (column annotation) (details). marker_heatmaps: NULL cell_annotation$train_params$de \"de\", otherwise heatmap label containing top upregulated markers pairwise t-tests (details). Number top markers specified cell_annotation$diagnostics_params$heatmap_n_top_markers. delta_distribution_plot: violin plots (one figure / object) per-cell deltas label. Deltas differences score assigned label median across labels cell (details). cell_annotation_diagnostic_plots_files: paths PDF files diagnostic plots cell_annotation_diagnostic_plots (score_heatmaps_out_file, delta_distribution_plot_out_file, marker_heatmaps_out_file). means make target, files created.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/stage_norm_clustering.html","id":"plots","dir":"Articles","previous_headings":"","what":"Plots","title":"Normalization and clustering stage (`02_norm_clustering`)","text":"hvg_plot: patchwork object HVG metric statistics (average expression vs. variance) pca_phase_plots: list one two {ggplot2} objects. first one plot first two PCs colored cell cycle phase, PCA computed using HVGs. parameter HVG_RM_CC_GENES True, second plot first one, PCA computed genes. case also means first plot, PCA computed using HVGs removed cell cycle-related genes. pca_doublet_plot, pca_total_plot: {ggplot2} plots first two PCs colored doublet score total number UMIs, respectively dimred_plots_clustering: tibble holding plots reduced dimensions colored clustering dimred_plots_clustering_files_out, dimred_plots_clustering_united_files: make target export plots (latter produces single multipage PDF) dimred_plots_other_vars: tibble holding plots reduced dimensions colored specified variable, defined NORM_CLUSTERING_REPORT_DIMRED_NAMES NORM_CLUSTERING_REPORT_DIMRED_PLOTS_OTHER parameters. dimred_plots_other_vars_files_out: make target export plots","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/stage_norm_clustering.html","id":"selected-markers","dir":"Articles","previous_headings":"Plots","what":"Selected markers","title":"Normalization and clustering stage (`02_norm_clustering`)","text":"selected_markers_plots: tibble holding selected marker plots (patchwork objects) dimensional reduction specified NORM_CLUSTERING_REPORT_DIMRED_NAMES parameter. Selected markers read CSV file defined SELECTED_MARKERS_FILE parameter. selected_markers_plots_files_out: make target export plots can also use underlying function selected_markers_dimplot(): selected_markers_df tibble can read CSV file ","code":"selected_markers_dimplot(   sce = sce_final_norm_clustering,   dimred = \"umap\",   selected_markers_df = selected_markers_df,   assay = \"logcounts\" ) selected_markers_df <- readr::read_csv(\"markers.csv\", col_names = c(\"group\", \"markers\"), col_types = \"cc\")"},{"path":"https://bioinfocz.github.io/scdrake/dev/articles/stage_norm_clustering.html","id":"other-targets","dir":"Articles","previous_headings":"","what":"Other targets","title":"Normalization and clustering stage (`02_norm_clustering`)","text":"config_norm_clustering: list holding parameters stage cc_genes: dataframe cell cycle genes, based Seurat::cc.genes.updated.2019 data. ORGANISM parameter 00_main.yaml config \"mouse\", gene symbols first converted sentence-case (\"MKI67\" -> \"Mki67\"). cell_data: DataFrame holding colData() sce_rm_doublets, clusterings clusters_all target, cell annotation labels cell_annotation_labels target, new cell groupings defined CELL_GROUPINGS parameter.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jiri Novotny. Author, maintainer. Jan Kubovciak. Author. Lucie Pfeiferova. Author. Michal Kolar. Funder.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Kubovciak J, Kolar M, Novotny J (2023). “Scdrake: reproducible scalable pipeline scRNA-seq data analysis.” Bioinformatics Advances, 3(1). doi:10.1093/bioadv/vbad089.","code":"@Article{,   title = {Scdrake: a reproducible and scalable pipeline for scRNA-seq data analysis},   author = {Jan Kubovciak and Michal Kolar and Jiri Novotny},   editor = {Guoqiang Yu},   year = {2023},   journal = {Bioinformatics Advances},   volume = {3},   number = {1},   doi = {10.1093/bioadv/vbad089}, }"},{"path":"https://bioinfocz.github.io/scdrake/dev/index.html","id":"scdrake","dir":"","previous_headings":"","what":"A pipeline for droplet-based single-cell RNA-seq data secondary analysis implemented in the drake Make-like toolkit for R language","title":"A pipeline for droplet-based single-cell RNA-seq data secondary analysis implemented in the drake Make-like toolkit for R language","text":"scdrake scalable reproducible pipeline secondary analysis droplet-based single-cell RNA-seq data (scRNA-seq) spot-based spatial transcriptomics data (SRT). scdrake R package built top drake package, Make-like pipeline toolkit R language. main features scdrake pipeline : Import scRNA-seq data: 10x Genomics Cell Ranger output, delimited table, SingleCellExperiment object. Import SRT data: 10x Genomics Space Ranger output, delimited table, SingleCellExperiment object, tissue positions file Space ranger. Quality control filtering cells/spots genes, removal empty droplets. Higly variable genes detection, cell cycle scoring, normalization, clustering, dimensionality reduction. Spatially variable genes detection (SRT data) Cell type annotation using reference sets, cell type annotation using user-provided marker genes. Integration multiple datasets. Computation cluster markers differentially expressed genes clusters (denoted “contrasts”). can find links example outputs . Want change parameter? problem! parts pipeline changed rerun, --date ones skipped. Want reuse intermediate results analyses? problem! pipeline smartly defined checkpoints can loaded drake cache. Want extend pipeline? problem! pipeline definition just R object can arbitrarily extended. scdrake purposed? primarily intended tech-savvy users (bioinformaticians), pass results (reports, images) non-technical persons (biologists). time, bioinformaticians can quickly react biologists’ needs changing parameters pipeline, efficiently skips already finished parts. dialogue biologist bioinformatician indispensable scRNA-seq data analysis. scdrake ensures communication performed effective reproducible manner. pipeline structure along diagrams links outputs described vignette(\"pipeline_overview\") (link). use scdrake research, please, consider citing Kubovciak J, Kolar M, Novotny J (2023). “Scdrake: reproducible scalable pipeline scRNA-seq data analysis.” Bioinformatics Advances, 3(1). doi:10.1093/bioadv/vbad089. Huge thanks go authors Orchestrating Single-Cell Analysis Bioconductor book whose methods recommendations scdrake largely based.","code":""},{"path":[]},{"path":"https://bioinfocz.github.io/scdrake/dev/index.html","id":"using-a-docker-image-recommended","dir":"","previous_headings":"","what":"Using a Docker image (recommended)","title":"A pipeline for droplet-based single-cell RNA-seq data secondary analysis implemented in the drake Make-like toolkit for R language","text":"Docker image based official Bioconductor image (version 3.15) available. handy reproducible way use scdrake dependencies already installed versions fixed. addition, parent Bioconductor image comes bundled RStudio Server. complete guide usage scdrake’s Docker image can found Docker vignette. strongly recommend go even experienced Docker user. can find just basic command download image run detached container RStudio Docker run scdrake Singularity. can also run image SingularityCE (without RStudio) - see Singularity section Docker vignette . image already downloaded local Docker storage, can use singularity pull docker-daemon:<image> can pull Docker image latest stable scdrake version using list available versions Docker Hub repository. latest development version use Note Mac users M1/M2 chipsets: version 1.5.0 (inclusive), arm64 images available.","code":"docker pull jirinovo/scdrake:1.6.0 singularity pull docker:jirinovo/scdrake:1.6.0 docker pull jirinovo/scdrake:latest singularity pull docker:jirinovo/scdrake:latest docker pull jirinovo/scdrake:1.5.0-bioc3.15-arm64"},{"path":"https://bioinfocz.github.io/scdrake/dev/index.html","id":"running-the-container","dir":"","previous_headings":"Using a Docker image (recommended)","what":"Running the container","title":"A pipeline for droplet-based single-cell RNA-seq data secondary analysis implemented in the drake Make-like toolkit for R language","text":"common cases host machines: Linux running Docker Engine, Windows MacOS running Docker Desktop. First make shared directory mounted container: run image expose RStudio Server port 8787 host: Singularity, also make shared directories execute container (“run forget”):","code":"mkdir ~/scdrake_projects cd ~/scdrake_projects docker run -d \\   -v $(pwd):/home/rstudio/scdrake_projects \\   -p 8787:8787 \\   -e USERID=$(id -u) \\   -e GROUPID=$(id -g) \\   -e PASSWORD=1234 \\   jirinovo/scdrake:1.6.0 mkdir -p ~/scdrake_singularity cd ~/scdrake_singularity mkdir -p home/${USER} scdrake_projects singularity exec \\     -e \\     --no-home \\     --bind \"home/${USER}/:/home/${USER},scdrake_projects/:/home/${USER}/scdrake_projects\" \\     --pwd \"/home/${USER}/scdrake_projects\" \\     path/to/scdrake_image.sif \\     scdrake <args> <command>"},{"path":[]},{"path":"https://bioinfocz.github.io/scdrake/dev/index.html","id":"install-the-required-system-packages","dir":"","previous_headings":"Installing {scdrake} manually (not recommended)","what":"Install the required system packages","title":"A pipeline for droplet-based single-cell RNA-seq data secondary analysis implemented in the drake Make-like toolkit for R language","text":"Linux, follow commands distribution . MacOS: $ brew install libxml2 imagemagick@6 harfbuzz fribidi libgit2 geos pandoc","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/index.html","id":"install-r--42","dir":"","previous_headings":"Installing {scdrake} manually (not recommended)","what":"Install R >= 4.2","title":"A pipeline for droplet-based single-cell RNA-seq data secondary analysis implemented in the drake Make-like toolkit for R language","text":"See https://cloud.r-project.org/ now , commands R.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/index.html","id":"install-renv","dir":"","previous_headings":"Installing {scdrake} manually (not recommended)","what":"Install {renv}","title":"A pipeline for droplet-based single-cell RNA-seq data secondary analysis implemented in the drake Make-like toolkit for R language","text":"{renv} R package management local R libraries. intended used per-project basis, .e. project use library R packages.","code":"install.packages(\"renv\")"},{"path":"https://bioinfocz.github.io/scdrake/dev/index.html","id":"initialize-a-new-renv-library","dir":"","previous_headings":"Installing {scdrake} manually (not recommended)","what":"Initialize a new {renv} library","title":"A pipeline for droplet-based single-cell RNA-seq data secondary analysis implemented in the drake Make-like toolkit for R language","text":"Switch directory analyze data initialize new renv library: Now exit run R. see message renv library activated.","code":"renv::consent(TRUE) renv::init()"},{"path":"https://bioinfocz.github.io/scdrake/dev/index.html","id":"install-biocmanager","dir":"","previous_headings":"Installing {scdrake} manually (not recommended)","what":"Install BiocManager","title":"A pipeline for droplet-based single-cell RNA-seq data secondary analysis implemented in the drake Make-like toolkit for R language","text":"","code":"renv::install(\"BiocManager\")"},{"path":"https://bioinfocz.github.io/scdrake/dev/index.html","id":"install-bioconductor-315","dir":"","previous_headings":"Installing {scdrake} manually (not recommended)","what":"Install Bioconductor 3.15","title":"A pipeline for droplet-based single-cell RNA-seq data secondary analysis implemented in the drake Make-like toolkit for R language","text":"","code":"BiocManager::install(version = \"3.15\")"},{"path":"https://bioinfocz.github.io/scdrake/dev/index.html","id":"restore-scdrake-dependencies-from-lockfile","dir":"","previous_headings":"Installing {scdrake} manually (not recommended)","what":"Restore {scdrake} dependencies from lockfile","title":"A pipeline for droplet-based single-cell RNA-seq data secondary analysis implemented in the drake Make-like toolkit for R language","text":"renv also allows export current installed versions R packages (things) lockfile. lockfile available scdrake can use install dependencies lockfile latest development version use","code":"## -- This is a lockfile for the latest stable version of scdrake. download.file(\"https://raw.githubusercontent.com/bioinfocz/scdrake/1.6.0/renv.lock\") ## -- You can increase the number of CPU cores to speed up the installation. options(Ncpus = 2) renv::restore(lockfile = \"renv.lock\", repos = BiocManager::repositories()) download.file(\"https://raw.githubusercontent.com/bioinfocz/scdrake/main/renv.lock\")"},{"path":"https://bioinfocz.github.io/scdrake/dev/index.html","id":"install-the-scdrake-package","dir":"","previous_headings":"Installing {scdrake} manually (not recommended)","what":"Install the {scdrake} package","title":"A pipeline for droplet-based single-cell RNA-seq data secondary analysis implemented in the drake Make-like toolkit for R language","text":"Now can finally install scdrake package, using non-standard approach - without dependencies (already installed lockfile). latest development version use \"bioinfocz/scdrake\".","code":"remotes::install_github(   \"bioinfocz/scdrake@1.6.0\",   dependencies = FALSE, upgrade = FALSE,   keep_source = TRUE, build_vignettes = TRUE,   repos = BiocManager::repositories() )"},{"path":"https://bioinfocz.github.io/scdrake/dev/index.html","id":"install-the-command-line-interface-cli","dir":"","previous_headings":"Installing {scdrake} manually (not recommended)","what":"Install the command line interface (CLI)","title":"A pipeline for droplet-based single-cell RNA-seq data secondary analysis implemented in the drake Make-like toolkit for R language","text":"Optionally, can install scdrake’s CLI scripts CLI now accessible scdrake command. default, CLI installed ~/.local/bin, usually present PATH environment variable. case isn’t, just add ~/.bashrc: export PATH=\"${HOME}/.local/bin:${PATH}\" Every time using CLI make sure current working directory inside renv project. can read reasons . might notice per-project renv library installed CLI “disconnected” install scdrake CLI within multiple projects (renv libraries), CLI scripts ~/.local/bin overwritten time. run scdrake command inside renv project, renv directory automatically detected renv library activated renv::load(), proper, locally installed scdrake package used. Also, built-guard: version CLI must match version bundled CLI scripts inside installed scdrake package. Anyway, think changes CLI won’t frequent, shouldn’t problem time. TIP: save time space, can symlink renv/library directory multiple scdrake projects.","code":"scdrake::install_cli()"},{"path":"https://bioinfocz.github.io/scdrake/dev/index.html","id":"quickstart","dir":"","previous_headings":"","what":"Quickstart","title":"A pipeline for droplet-based single-cell RNA-seq data secondary analysis implemented in the drake Make-like toolkit for R language","text":"First run scdrake image Docker Singularity - see Docker vignette can go Get Started vignette","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/index.html","id":"vignettes-and-other-readings","dir":"","previous_headings":"","what":"Vignettes and other readings","title":"A pipeline for droplet-based single-cell RNA-seq data secondary analysis implemented in the drake Make-like toolkit for R language","text":"See https://bioinfocz.github.io/scdrake documentation website latest stable version (1.6.0) links vignettes become real :-) See https://bioinfocz.github.io/scdrake/dev documentation website current development version. Using Docker image: https://bioinfocz.github.io/scdrake/articles/scdrake_docker.html (vignette(\"scdrake_docker\")) 01 Quick start (single-sample pipeline): vignette(\"scdrake\") 02 Integration pipeline guide: vignette(\"scdrake_integration\") Advanced topics: vignette(\"scdrake_advanced\") Extending pipeline: vignette(\"scdrake_extend\") official drake book: https://books.ropensci.org/drake/ Pipeline overview: vignette(\"pipeline_overview\") FAQ & Howtos: vignette(\"scdrake_faq\") Spatial extension: vignette(\"scdrake_spatial\") Command line interface (CLI): vignette(\"scdrake_cli\") Config files (internals): vignette(\"scdrake_config\") Environment variables: vignette(\"scdrake_envvars\") Pipeline config -> vignette(\"config_pipeline\") Main config -> vignette(\"config_main\") Stage 01_input_qc: reading data, filtering, quality control -> vignette(\"stage_input_qc\") Stage 02_norm_clustering: normalization, HVG selection, SVG selection, dimensionality reduction, clustering, (marker-based) cell type annotation -> vignette(\"stage_norm_clustering\") Stage 01_integration: reading data integration -> vignette(\"stage_integration\") Stage 02_int_clustering: post-integration clustering cell annotation -> vignette(\"stage_int_clustering\") Stage cluster_markers -> vignette(\"stage_cluster_markers\") Stage contrasts (differential expression) -> vignette(\"stage_contrasts\") encourage users read basics drake package. necessary know drake internals successfully run scdrake pipeline, knowledge plus. can read minimum basics vignette(\"drake_basics\"). Also, prior knowledge Bioconductor classes (especially SingleCellExperiment) considerable.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"A pipeline for droplet-based single-cell RNA-seq data secondary analysis implemented in the drake Make-like toolkit for R language","text":"citation output using citation(\"scdrake\") R. Please run check updates cite scdrake. Please note scdrake made possible thanks many R bioinformatics software authors, cited either vignettes /paper(s) describing package.","code":"print(citation(\"scdrake\"), bibtex = TRUE) To cite package ‘scdrake’ in publications use:    Jiri Novotny and Jan Kubovciak (2021). scdrake: A Pipeline For 10x Chromium Single-Cell RNA-seq Data Analysis.   https://github.com/bioinfocz/scdrake, https://bioinfocz.github.io/scdrake.  A BibTeX entry for LaTeX users is    @Manual{,     title = {scdrake: A Pipeline For 10x Chromium Single-Cell RNA-seq Data Analysis},     author = {Jiri Novotny and Jan Kubovciak},     year = {2021},     note = {https://github.com/bioinfocz/scdrake, https://bioinfocz.github.io/scdrake},   }"},{"path":"https://bioinfocz.github.io/scdrake/dev/index.html","id":"help-and-support","dir":"","previous_headings":"","what":"Help and support","title":"A pipeline for droplet-based single-cell RNA-seq data secondary analysis implemented in the drake Make-like toolkit for R language","text":"case problems suggestions, please, open new issue. happy answer questions, integrate new ideas, resolve problems 😊 can also use GitHub Discussions, mainly topics related development (bugs, feature requests etc.), need e.g. general help.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/index.html","id":"contribution","dir":"","previous_headings":"","what":"Contribution","title":"A pipeline for droplet-based single-cell RNA-seq data secondary analysis implemented in the drake Make-like toolkit for R language","text":"want contribute scdrake, read contribution guide, please. pull requests welcome! 🙂","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"A pipeline for droplet-based single-cell RNA-seq data secondary analysis implemented in the drake Make-like toolkit for R language","text":"Please note scdrake project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":[]},{"path":"https://bioinfocz.github.io/scdrake/dev/index.html","id":"funding","dir":"","previous_headings":"Acknowledgements","what":"Funding","title":"A pipeline for droplet-based single-cell RNA-seq data secondary analysis implemented in the drake Make-like toolkit for R language","text":"work supported ELIXIR CZ research infrastructure project (MEYS Grant : LM2018131 LM2023055) including access computing storage facilities.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/index.html","id":"software-and-methods-used-by-scdrake","dir":"","previous_headings":"Acknowledgements","what":"Software and methods used by {scdrake}","title":"A pipeline for droplet-based single-cell RNA-seq data secondary analysis implemented in the drake Make-like toolkit for R language","text":"Many things used scdrake, really worth mentioning: Bioconductor ecosystem. Orchestrating Single-Cell Analysis Bioconductor book. scran, scater, great packages Aaron Lun et al. drake package. rmarkdown package, ones tidyverse ecosystem.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/index.html","id":"development-tools","dir":"","previous_headings":"Acknowledgements","what":"Development tools","title":"A pipeline for droplet-based single-cell RNA-seq data secondary analysis implemented in the drake Make-like toolkit for R language","text":"Continuous code testing possible thanks GitHub Actions usethis, remotes, rcmdcheck. Customized use Bioconductor’s docker containers. documentation website generated pkgdown. code styled automatically thanks styler. documentation formatted thanks devtools roxygen2. package developed using {biocthis}.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/SCDRAKE_CLI_VERSION.html","id":null,"dir":"Reference","previous_headings":"","what":"Matching CLI version for this package version. — SCDRAKE_CLI_VERSION","title":"Matching CLI version for this package version. — SCDRAKE_CLI_VERSION","text":"Matching CLI version package version.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/SCDRAKE_CLI_VERSION.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Matching CLI version for this package version. — SCDRAKE_CLI_VERSION","text":"","code":"SCDRAKE_CLI_VERSION"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/SCDRAKE_CLI_VERSION.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Matching CLI version for this package version. — SCDRAKE_CLI_VERSION","text":"object class character length 1.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/add_item_to_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Add named item (including NULL) to a list. — add_item_to_list","title":"Add named item (including NULL) to a list. — add_item_to_list","text":"Add named item (including NULL) list.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/add_item_to_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add named item (including NULL) to a list. — add_item_to_list","text":"","code":"add_item_to_list(l, key, value = NULL)"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/add_item_to_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add named item (including NULL) to a list. — add_item_to_list","text":"l list. key character scalar: name value placed. value object.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/add_item_to_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add named item (including NULL) to a list. — add_item_to_list","text":"list.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/add_item_to_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add named item (including NULL) to a list. — add_item_to_list","text":"","code":"add_item_to_list(list(1, a = 2), \"b\") #> [[1]] #> [1] 1 #>  #> $a #> [1] 2 #>  #> $b #> NULL #>"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/add_marker_table_links.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert specified columns of a marker table to HTML links. — add_marker_table_links","title":"Convert specified columns of a marker table to HTML links. — add_marker_table_links","text":"Convert specified columns marker table HTML links.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/add_marker_table_links.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert specified columns of a marker table to HTML links. — add_marker_table_links","text":"","code":"add_marker_table_links(   df,   links = list(list(colname_target = \"ENSEMBL\", colname_source = \"ENSEMBL\", template_url     = \"https://www.ensembl.org/{ensembl_species}/Gene/Summary?g={id}\"),     list(colname_target = \"ENTREZID\", colname_source = \"ENTREZID\", template_url =     \"https://www.ncbi.nlm.nih.gov/gene/{id}\"), list(colname_target = \"SYMBOL\",     colname_source = \"SYMBOL\", template_url =     \"https://www.genecards.org/cgi-bin/carddisp.pl?gene={id}\")),   ensembl_species = \"Homo_sapiens\" )"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/add_marker_table_links.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert specified columns of a marker table to HTML links. — add_marker_table_links","text":"df dataframe-like object. links list named lists. named list three items: colname_target: column df converted link. colname_source: column df used data source. template_url: URL template link {id} replaced values colname_source column df. ENSEMBL column also used ensembl_species parameter (see default value links). ensembl_species character scalar: ID/name ENSEMBL species.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/add_marker_table_links.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert specified columns of a marker table to HTML links. — add_marker_table_links","text":"modified df.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/additional_cell_data_fn.html","id":null,"dir":"Reference","previous_headings":"","what":"Load additional cell data from a CSV or Rds (dataframe) file. — additional_cell_data_fn","title":"Load additional cell data from a CSV or Rds (dataframe) file. — additional_cell_data_fn","text":"Load additional cell data CSV Rds (dataframe) file.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/additional_cell_data_fn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load additional cell data from a CSV or Rds (dataframe) file. — additional_cell_data_fn","text":"","code":"additional_cell_data_fn(additional_cell_data_file)"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/additional_cell_data_fn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load additional cell data from a CSV or Rds (dataframe) file. — additional_cell_data_fn","text":"additional_cell_data_file character scalar: path input file.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/additional_cell_data_fn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load additional cell data from a CSV or Rds (dataframe) file. — additional_cell_data_fn","text":"dataframe-like object.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/as_seurat.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a SingleCellExperiment to Seurat object. — as_seurat","title":"Convert a SingleCellExperiment to Seurat object. — as_seurat","text":"wrapper around Seurat::.Seurat().","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/as_seurat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a SingleCellExperiment to Seurat object. — as_seurat","text":"","code":"as_seurat(sce, sce_assay = NULL, seurat_assay = \"RNA\", add_rowData = TRUE, ...)"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/as_seurat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a SingleCellExperiment to Seurat object. — as_seurat","text":"sce SingleCellExperiment object. sce_assay character scalar: name assay sce (e.g. counts logcounts). Use NULL convert assays (default). seurat_assay character scalar: name assay new Seurat object. add_rowData logical scalar: TRUE, add rowData(sce) meta.features slot assay new Seurat object. ... Passed Seurat::.Seurat().","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/as_seurat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a SingleCellExperiment to Seurat object. — as_seurat","text":"Seurat object.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/assert_that_.html","id":null,"dir":"Reference","previous_headings":"","what":"A wrapper around assertthat::assert_that(). — assert_that_","title":"A wrapper around assertthat::assert_that(). — assert_that_","text":"Provides nicer error message generated cli::cli_alert_danger().","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/assert_that_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A wrapper around assertthat::assert_that(). — assert_that_","text":"","code":"assert_that_(..., env = parent.frame(), msg = NULL)"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/assert_that_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A wrapper around assertthat::assert_that(). — assert_that_","text":"... Passed assertthat::assert_that(). env Passed assertthat::assert_that() cli::cli_alert_danger(). Defaults caller env. msg Passed cli::cli_alert_danger().","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/assert_that_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A wrapper around assertthat::assert_that(). — assert_that_","text":"TRUE assertion TRUE :)","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/calc_sc3.html","id":null,"dir":"Reference","previous_headings":"","what":"Run SC3 clustering for a specific k. — calc_sc3","title":"Run SC3 clustering for a specific k. — calc_sc3","text":"See SC3::sc3() details.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/calc_sc3.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run SC3 clustering for a specific k. — calc_sc3","text":"","code":"calc_sc3(sce_pca, sc3_k, is_integration, BPPARAM = BiocParallel::SerialParam())"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/calc_sc3.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run SC3 clustering for a specific k. — calc_sc3","text":"sce_pca SingleCellExperiment object calculated PCA. sc3_k integer vector: numbers clusters SC3. is_integration logical scalar: TRUE, clusterings named cluster_int_*, otherwise cluster_*. BPPARAM BiocParallel::BiocParallelParam object.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/calc_sc3.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run SC3 clustering for a specific k. — calc_sc3","text":"SingleCellExperiment object returned SC3::sc3().","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/calc_sc3.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Run SC3 clustering for a specific k. — calc_sc3","text":"is_integration TRUE, logcounts(sce_pca) coerced matrix.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/calculate_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate metadata for manual cell/spot annotation for heatmap visualisation. — calculate_metadata","title":"Calculate metadata for manual cell/spot annotation for heatmap visualisation. — calculate_metadata","text":"Calculate metadata manual cell/spot annotation heatmap visualisation.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/calculate_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate metadata for manual cell/spot annotation for heatmap visualisation. — calculate_metadata","text":"","code":"calculate_metadata(sce, enrichment, clustering)"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/calculate_metadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate metadata for manual cell/spot annotation for heatmap visualisation. — calculate_metadata","text":"sce SingleCellExperiment object enrichment precalculated enrichment score cell/spot clustering vector selected clustering used annotation, inheritated meta_heatmap plotting","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/cc_genes_fn.html","id":null,"dir":"Reference","previous_headings":"","what":"Get dataframe of cell cycle genes. — cc_genes_fn","title":"Get dataframe of cell cycle genes. — cc_genes_fn","text":"wrapper around data bundled Seurat package (cc.genes.updated.2019).","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/cc_genes_fn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get dataframe of cell cycle genes. — cc_genes_fn","text":"","code":"cc_genes_fn(sce_final_input_qc, organism, annotation_db_file)"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/cc_genes_fn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get dataframe of cell cycle genes. — cc_genes_fn","text":"sce_final_input_qc (input target) SingleCellExperiment object. organism character scalar: \"mouse\", gene symbols converted sentence-case (e.g. \"Gapdh\"). annotation_db_file character scalar: path AnnotationDbi SQLite file.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/cc_genes_fn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get dataframe of cell cycle genes. — cc_genes_fn","text":"dataframe. Output target: cc_genes","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/cell_annotation_diagnostic_plots_files_fn.html","id":null,"dir":"Reference","previous_headings":"","what":"Save cell annotation diagnostic plots to PDF files. — cell_annotation_diagnostic_plots_files_fn","title":"Save cell annotation diagnostic plots to PDF files. — cell_annotation_diagnostic_plots_files_fn","text":"Save cell annotation diagnostic plots PDF files.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/cell_annotation_diagnostic_plots_files_fn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save cell annotation diagnostic plots to PDF files. — cell_annotation_diagnostic_plots_files_fn","text":"","code":"cell_annotation_diagnostic_plots_files_fn(cell_annotation_diagnostic_plots)"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/cell_annotation_diagnostic_plots_files_fn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save cell annotation diagnostic plots to PDF files. — cell_annotation_diagnostic_plots_files_fn","text":"cell_annotation_diagnostic_plots (input target) tibble.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/cell_annotation_diagnostic_plots_files_fn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Save cell annotation diagnostic plots to PDF files. — cell_annotation_diagnostic_plots_files_fn","text":"character vector. Output target: cell_annotation_diagnostic_plots_files","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/cell_annotation_diagnostic_plots_fn.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate diagnostic plots for cell annotation. — cell_annotation_diagnostic_plots_fn","title":"Generate diagnostic plots for cell annotation. — cell_annotation_diagnostic_plots_fn","text":"Three list character vector columns added cell_annotation: score_heatmaps: heatmaps per-cell label scores created clustering (column annotation) (details). Generated SingleR::plotScoreHeatmap() marker_heatmaps: NULL cell_annotation$train_params$de \"de\", otherwise heatmap label containing top upregulated markers pairwise t-tests (details). Number top markers specified cell_annotation$diagnostics_params$heatmap_n_top_markers delta_distribution_plot: violin plots (one figure / object) per-cell deltas label. Deltas differences score assigned label median across labels cell (details) Columns output PDF files named score_heatmaps_out_file etc.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/cell_annotation_diagnostic_plots_fn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate diagnostic plots for cell annotation. — cell_annotation_diagnostic_plots_fn","text":"","code":"cell_annotation_diagnostic_plots_fn(   cell_annotation,   cell_data,   sce,   base_out_dir,   do_heatmaps = FALSE,   cluster_cols_regex = \"^cluster_\" )"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/cell_annotation_diagnostic_plots_fn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate diagnostic plots for cell annotation. — cell_annotation_diagnostic_plots_fn","text":"cell_annotation (input target) tibble. cell_data (input target) DataFrame. sce SingleCellExperiment object. base_out_dir character scalar: path output directory reference dataset diagnostic plots saved . do_heatmaps logical scalar: TRUE, generate score heatmaps. cluster_cols_regex character scalar: regex match columns colData() cluster labels. columns used annotation score heatmaps.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/cell_annotation_diagnostic_plots_fn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate diagnostic plots for cell annotation. — cell_annotation_diagnostic_plots_fn","text":"tibble. Output target: cell_annotation_diagnostic_plots","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/cell_annotation_fn.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform cell annotation via SingleR::SingleR(). — cell_annotation_fn","title":"Perform cell annotation via SingleR::SingleR(). — cell_annotation_fn","text":"new list column cell_annotation added cell_annotation_params, containing returned DataFrames (one reference dataset) SingleR::SingleR(). train_params classify_params cell_annotation_params passed SingleR::SingleR(), internally SingleR::trainSingleR() SingleR::classifySingleR(), respectively. Label pruning performed via SingleR::pruneScores() calling SingleR::SingleR(), parameters defined cell_annotation_params$prune_score_params.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/cell_annotation_fn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform cell annotation via SingleR::SingleR(). — cell_annotation_fn","text":"","code":"cell_annotation_fn(   cell_annotation_params,   sce_test,   BPPARAM = BiocParallel::SerialParam() )"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/cell_annotation_fn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform cell annotation via SingleR::SingleR(). — cell_annotation_fn","text":"cell_annotation_params (input target) tibble. sce_test (input target) SingleCellExperiment object predict cell labels . BPPARAM BiocParallel::BiocParallelParam object.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/cell_annotation_fn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform cell annotation via SingleR::SingleR(). — cell_annotation_fn","text":"tibble. Output target: cell_annotation","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/cell_annotation_labels_fn.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a named list of cell labels returned from SingleR::SingleR(). — cell_annotation_labels_fn","title":"Create a named list of cell labels returned from SingleR::SingleR(). — cell_annotation_labels_fn","text":"SingleR::SingleR() returns three types cell labels. returned list function, names prefixed reference dataset's name modified : first.labels (\"raw\" labels) -> <reference_name>_labels_raw labels (fine-tuned, unpruned labels) -> <reference_name>_labels pruned.labels (fine-tuned pruned labels) -> <reference_name>_labels_pruned Pruned labels contain NAs low quality labels.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/cell_annotation_labels_fn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a named list of cell labels returned from SingleR::SingleR(). — cell_annotation_labels_fn","text":"","code":"cell_annotation_labels_fn(cell_annotation)"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/cell_annotation_labels_fn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a named list of cell labels returned from SingleR::SingleR(). — cell_annotation_labels_fn","text":"cell_annotation (input target) tibble.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/cell_annotation_labels_fn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a named list of cell labels returned from SingleR::SingleR(). — cell_annotation_labels_fn","text":"named list. Output target: cell_annotation_labels","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/cell_annotation_params_fn.html","id":null,"dir":"Reference","previous_headings":"","what":"Load a list of cell annotation references into a tibble. — cell_annotation_params_fn","title":"Load a list of cell annotation references into a tibble. — cell_annotation_params_fn","text":"Cell annotation references defined 02_norm_clustering.yaml (single-sample) 02_int_clustering.yaml (integration) config files CELL_ANNOTATION_SOURCES parameter.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/cell_annotation_params_fn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load a list of cell annotation references into a tibble. — cell_annotation_params_fn","text":"","code":"cell_annotation_params_fn(cell_annotation_sources, biomart_dataset = NULL)"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/cell_annotation_params_fn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load a list of cell annotation references into a tibble. — cell_annotation_params_fn","text":"cell_annotation_sources list cell annotation reference sources. biomart_dataset Currently used.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/cell_annotation_params_fn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load a list of cell annotation references into a tibble. — cell_annotation_params_fn","text":"tibble. Output target: cell_annotation_params","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/cell_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Create new cell groups based on existing ones. — make_cell_groupings","title":"Create new cell groups based on existing ones. — make_cell_groupings","text":"basically recoding levels. new column (cell group) based levels existing column.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/cell_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create new cell groups based on existing ones. — make_cell_groupings","text":"","code":"make_cell_groupings(df, cell_groupings, do_cbind = FALSE)"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/cell_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create new cell groups based on existing ones. — make_cell_groupings","text":"df dataframe. cell_groupings named list named lists. Names outer list used new columns df. nested lists must following values: source_column: name column df use. assignments: named list values form old_level = new_level. See CELL_GROUPINGS parameter 02_norm_clustering.yaml 02_int_clustering.yaml config. do_cbind logical scalar: TRUE, bind column-wise df dataframe new cell groupings.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/cell_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create new cell groups based on existing ones. — make_cell_groupings","text":"dataframe.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/cell_data_fn.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge all cell-related data to a single DataFrame. — cell_data_fn","title":"Merge all cell-related data to a single DataFrame. — cell_data_fn","text":"Merge cell-related data single DataFrame.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/cell_data_fn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge all cell-related data to a single DataFrame. — cell_data_fn","text":"","code":"cell_data_fn(   col_data,   clusters_all,   cell_annotation_labels,   cell_groupings,   additional_cell_data,   pipeline_type = c(\"single_sample\", \"integration\") )"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/cell_data_fn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge all cell-related data to a single DataFrame. — cell_data_fn","text":"col_data dataframe. clusters_all named list. cell_annotation_labels named list. cell_groupings dataframe: see make_cell_groupings(). additional_cell_data data.frame-like object additional cell data joined. pipeline_type character scalar: \"single_sample\", additional_cell_data must contain Barcode column. \"integration\", additional_cell_data must contain Barcode batch columns.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/cell_data_fn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge all cell-related data to a single DataFrame. — cell_data_fn","text":"DataFrame object.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/cells_per_cluster_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a frequency table of cell-cluster assignments. — cells_per_cluster_table","title":"Get a frequency table of cell-cluster assignments. — cells_per_cluster_table","text":"janitor::tabyl() used underhood.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/cells_per_cluster_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a frequency table of cell-cluster assignments. — cells_per_cluster_table","text":"","code":"cells_per_cluster_table(clusters, var_name = \"Cluster\")  cells_per_cluster_table(clusters, var_name = \"Cluster\")"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/cells_per_cluster_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a frequency table of cell-cluster assignments. — cells_per_cluster_table","text":"clusters vector. var_name character scalar: name column returned dataframe.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/cells_per_cluster_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a frequency table of cell-cluster assignments. — cells_per_cluster_table","text":"dataframe frequency cell-cluster assignments. dataframe.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/cells_per_cluster_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a frequency table of cell-cluster assignments. — cells_per_cluster_table","text":"","code":"cells_per_cluster_table(rep(1:3, each = 2)) #>   Cluster n percent #> 1       1 2     33% #> 2       2 2     33% #> 3       3 2     33% cells_per_cluster_table(rep(c(1, 2), each = 5)) #>   Cluster n percent #> 1       1 5     50% #> 2       2 5     50%"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/cells_per_cluster_table_collapsed_html.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a HTML of table collapsible by button. — cells_per_cluster_table_collapsed_html","title":"Print a HTML of table collapsible by button. — cells_per_cluster_table_collapsed_html","text":"table generated render_bootstrap_table().","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/cells_per_cluster_table_collapsed_html.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a HTML of table collapsible by button. — cells_per_cluster_table_collapsed_html","text":"","code":"cells_per_cluster_table_collapsed_html(   df,   id = get_random_strings(1, 10),   label = \"Show cells per cluster table\" )"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/cells_per_cluster_table_collapsed_html.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a HTML of table collapsible by button. — cells_per_cluster_table_collapsed_html","text":"df dataframe-like object. id character scalar: id attribute table. Used match button collapsible content (table). label character scalar: label button.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/cells_per_cluster_table_collapsed_html.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print a HTML of table collapsible by button. — cells_per_cluster_table_collapsed_html","text":"Invisibly NULL.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/check_pandoc.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for pandoc's binary. — check_pandoc","title":"Check for pandoc's binary. — check_pandoc","text":"See RSTUDIO_PANDOC parameter pipeline.yaml config (vignette(\"config_pipeline\")).","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/check_pandoc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for pandoc's binary. — check_pandoc","text":"","code":"check_pandoc(cache = FALSE, verbose = TRUE, ...)"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/check_pandoc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for pandoc's binary. — check_pandoc","text":"cache, ... Passed rmarkdown::find_pandoc(). verbose logical scalar: TRUE, verbose.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/check_pandoc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for pandoc's binary. — check_pandoc","text":"Invisibly TRUE directory pandoc's binary exists, FALSE otherwise.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/check_pkg_installed.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if a package is installed and display an informative message. — check_pkg_installed","title":"Check if a package is installed and display an informative message. — check_pkg_installed","text":"Check package installed display informative message.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/check_pkg_installed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if a package is installed and display an informative message. — check_pkg_installed","text":"","code":"check_pkg_installed(pkg, msg = \"\", verbose = TRUE)  check_qs_installed(verbose = TRUE)  check_future_installed(verbose = TRUE)  check_clustermq_installed(verbose = TRUE)  check_future.callr_installed(verbose = TRUE)  check_sc3_version(verbose = TRUE)  check_scdrake_packages(verbose = TRUE)"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/check_pkg_installed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if a package is installed and display an informative message. — check_pkg_installed","text":"pkg character scalar: name package. msg character scalar: additional message displayed. verbose logical scalar: TRUE, verbose.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/check_pkg_installed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if a package is installed and display an informative message. — check_pkg_installed","text":"TRUE package installed, FALSE otherwise. check_scdrake_packages() returns TRUE tested packages installed {SC3} installed <github.com/gorgitko/SC3>, FALSE otherwise.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/check_pkg_installed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if a package is installed and display an informative message. — check_pkg_installed","text":"","code":"check_pkg_installed(\"utils\") #> [1] TRUE check_pkg_installed(\"zzz\") #> ! Package zzz is not installed.  #> ℹ Please, consider its installation with #> `BiocManager::install(\"zzz\")` #> [1] FALSE check_qs_installed() #> [1] TRUE"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/check_scdrake.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for selected scdrake dependencies. — check_scdrake","title":"Check for selected scdrake dependencies. — check_scdrake","text":"function check : Packages might installed default: qs, clustermq, future, future.callr (system support forking/multicore), SC3 (installed <github.com/gorgitko/SC3>) pandoc available. yq available.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/check_scdrake.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for selected scdrake dependencies. — check_scdrake","text":"","code":"check_scdrake(verbose = TRUE)"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/check_scdrake.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for selected scdrake dependencies. — check_scdrake","text":"verbose logical scalar: TRUE, verbose.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/check_scdrake.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for selected scdrake dependencies. — check_scdrake","text":"Invisibly TRUE checks return TRUE, FALSE otherwise.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/check_yq.html","id":null,"dir":"Reference","previous_headings":"","what":"Check the availability and version of the yq tool. — check_yq","title":"Check the availability and version of the yq tool. — check_yq","text":"Check availability version yq tool.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/check_yq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check the availability and version of the yq tool. — check_yq","text":"","code":"check_yq(   yq_binary = getOption(\"scdrake_yq_binary\"),   repair_executable = TRUE,   verbose = TRUE )"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/check_yq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check the availability and version of the yq tool. — check_yq","text":"yq_binary character scalar: path yq tool's binary. repair_executable logical scalar: TRUE, make binary executable. verbose logical scalar: TRUE, verbose. default value obtained getOption(\"scdrake_verbose\").","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/check_yq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check the availability and version of the yq tool. — check_yq","text":"TRUE checks pass.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/check_yq.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check the availability and version of the yq tool. — check_yq","text":"R run command line, PATH environment variable inherited current shell session. R run within RStudio Server, user's PATH used. modify environment R run within project, place .Renviron file root project, e.g.:   Environment variables defined .Renviron available R session run within RStudio project. Alternatively R scdrake package loaded, can set path yq tool's binary options(scdrake_yq_binary = \"/path//yq/binary\").","code":"echo 'PATH=${PATH}:\"/path/to/dir/with/yq\"' >> .Renviron"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/cli.html","id":null,"dir":"Reference","previous_headings":"","what":"Install or check the command line interface scripts. — install_cli","title":"Install or check the command line interface scripts. — install_cli","text":"scripts (scdrake shell script scdrake.R) bundled scdrake package paths can retrieved :   check_cli() checking presence scdrake CLI script PATH environment variable, whether command $ scdrake -h finishes successfully.","code":"system.file(\"scdrake\", package = \"scdrake\", mustWork = TRUE) system.file(\"scdrake.R\", package = \"scdrake\", mustWork = TRUE)"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/cli.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Install or check the command line interface scripts. — install_cli","text":"","code":"install_cli(   dir = NULL,   type = c(\"user\", \"system\"),   ask = TRUE,   verbose = TRUE,   .dry = FALSE )  check_cli(verbose = TRUE)"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/cli.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Install or check the command line interface scripts. — install_cli","text":"dir character scalar: path directory scripts copied . NULL, path determined based type. type character scalar: \"user\": install user's home directory .local/bin \"system\": install /usr/local/bin ask logical scalar: TRUE, ask copying. verbose logical scalar: TRUE, verbose. .dry logical scalar: TRUE, copy files just return output paths.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/cli.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Install or check the command line interface scripts. — install_cli","text":"install_cli(): invisibly character vector length two: paths installed files. check_cli(): invisibly TRUE checks successful, FALSE otherwise.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/cluster_markers_fn.html","id":null,"dir":"Reference","previous_headings":"","what":"Add LFC summaries for Wilcox tests, obtained from t-test results. — cluster_markers_fn","title":"Add LFC summaries for Wilcox tests, obtained from t-test results. — cluster_markers_fn","text":"Add LFC summaries Wilcox tests, obtained t-test results.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/cluster_markers_fn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add LFC summaries for Wilcox tests, obtained from t-test results. — cluster_markers_fn","text":"","code":"cluster_markers_fn(cluster_markers_raw)"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/cluster_markers_fn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add LFC summaries for Wilcox tests, obtained from t-test results. — cluster_markers_fn","text":"cluster_markers_raw (input target) tibble.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/cluster_markers_fn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add LFC summaries for Wilcox tests, obtained from t-test results. — cluster_markers_fn","text":"tibble. Output target: cluster_markers","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/cluster_markers_heatmaps_df_fn.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a final tibble holding parameters for cluster markers heatmaps generation. — cluster_markers_heatmaps_df_fn","title":"Create a final tibble holding parameters for cluster markers heatmaps generation. — cluster_markers_heatmaps_df_fn","text":"Compared cluster_markers_heatmap_params target, output tibble expanded marker test type etc.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/cluster_markers_heatmaps_df_fn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a final tibble holding parameters for cluster markers heatmaps generation. — cluster_markers_heatmaps_df_fn","text":"","code":"cluster_markers_heatmaps_df_fn(   cluster_markers_processed,   cluster_markers_heatmap_params,   out_dir )"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/cluster_markers_heatmaps_df_fn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a final tibble holding parameters for cluster markers heatmaps generation. — cluster_markers_heatmaps_df_fn","text":"cluster_markers_processed (input target) tibble. cluster_markers_heatmap_params (input target) tibble. out_dir character scalar: path output directory heatmap PDFs.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/cluster_markers_heatmaps_df_fn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a final tibble holding parameters for cluster markers heatmaps generation. — cluster_markers_heatmaps_df_fn","text":"tibble. Output target: cluster_markers_heatmaps_df","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/cluster_markers_out_fn.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a final dataframe of cluster markers. — cluster_markers_out_fn","title":"Create a final dataframe of cluster markers. — cluster_markers_out_fn","text":"Create final dataframe cluster markers.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/cluster_markers_out_fn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a final dataframe of cluster markers. — cluster_markers_out_fn","text":"","code":"cluster_markers_out_fn(cluster_markers_processed)"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/cluster_markers_out_fn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a final dataframe of cluster markers. — cluster_markers_out_fn","text":"cluster_markers_processed (input target) tibble.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/cluster_markers_out_fn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a final dataframe of cluster markers. — cluster_markers_out_fn","text":"tibble. Output target: cluster_markers_out","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/cluster_markers_params.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract columns with certain parameters from cluster markers sources tibble. — cluster_markers_test_params_fn","title":"Extract columns with certain parameters from cluster markers sources tibble. — cluster_markers_test_params_fn","text":"Statistical test-related parameters. Plotting-related parameters. Heatmap-related parameters.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/cluster_markers_params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract columns with certain parameters from cluster markers sources tibble. — cluster_markers_test_params_fn","text":"","code":"cluster_markers_test_params_fn(cluster_markers_params)  cluster_markers_plot_params_fn(cluster_markers_params)  cluster_markers_heatmap_params_fn(cluster_markers_params)"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/cluster_markers_params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract columns with certain parameters from cluster markers sources tibble. — cluster_markers_test_params_fn","text":"cluster_markers_params (input target) tibble.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/cluster_markers_params.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract columns with certain parameters from cluster markers sources tibble. — cluster_markers_test_params_fn","text":"tibble. Output target: cluster_markers_test_params tibble. Output target: cluster_markers_plot_params tibble. Output target: cluster_markers_heatmap_params","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/cluster_markers_params_fn.html","id":null,"dir":"Reference","previous_headings":"","what":"Load a list of cluster markers sources into a tibble. — cluster_markers_params_fn","title":"Load a list of cluster markers sources into a tibble. — cluster_markers_params_fn","text":"Cluster markers sources defined cluster_markers.yaml config file CLUSTER_MARKERS_SOURCES parameter.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/cluster_markers_params_fn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load a list of cluster markers sources into a tibble. — cluster_markers_params_fn","text":"","code":"cluster_markers_params_fn(cluster_markers_sources, cell_data)"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/cluster_markers_params_fn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load a list of cluster markers sources into a tibble. — cluster_markers_params_fn","text":"cluster_markers_sources list cluster markers sources. cell_data list colData() columns.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/cluster_markers_params_fn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load a list of cluster markers sources into a tibble. — cluster_markers_params_fn","text":"tibble. Output target: cluster_markers_params","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/cluster_markers_processed_fn.html","id":null,"dir":"Reference","previous_headings":"","what":"Add additional summary columns of cluster markers for comparisons with other group levels. — cluster_markers_processed_fn","title":"Add additional summary columns of cluster markers for comparisons with other group levels. — cluster_markers_processed_fn","text":"Add additional summary columns cluster markers comparisons group levels.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/cluster_markers_processed_fn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add additional summary columns of cluster markers for comparisons with other group levels. — cluster_markers_processed_fn","text":"","code":"cluster_markers_processed_fn(cluster_markers)"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/cluster_markers_processed_fn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add additional summary columns of cluster markers for comparisons with other group levels. — cluster_markers_processed_fn","text":"cluster_markers (input target) tibble.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/cluster_markers_processed_fn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add additional summary columns of cluster markers for comparisons with other group levels. — cluster_markers_processed_fn","text":"tibble. Output target: cluster_markers_processed","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/cluster_sc3_cluster_stability_plots_file_fn.html","id":null,"dir":"Reference","previous_headings":"","what":"Save SC3 cluster stability plots to a single PDF. — cluster_sc3_cluster_stability_plots_file_fn","title":"Save SC3 cluster stability plots to a single PDF. — cluster_sc3_cluster_stability_plots_file_fn","text":"Save SC3 cluster stability plots single PDF.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/cluster_sc3_cluster_stability_plots_file_fn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save SC3 cluster stability plots to a single PDF. — cluster_sc3_cluster_stability_plots_file_fn","text":"","code":"cluster_sc3_cluster_stability_plots_file_fn(   cluster_sc3_df,   out_dir,   is_integration )"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/cluster_sc3_cluster_stability_plots_file_fn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save SC3 cluster stability plots to a single PDF. — cluster_sc3_cluster_stability_plots_file_fn","text":"cluster_sc3_df (input target) tibble returned cluster_sc3_df_fn(). out_dir character scalar: output directory. is_integration logical scalar: TRUE, clusterings named cluster_int_*, otherwise cluster_*.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/cluster_sc3_cluster_stability_plots_file_fn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Save SC3 cluster stability plots to a single PDF. — cluster_sc3_cluster_stability_plots_file_fn","text":"character scalar: path output PDF file. {out_dir}/cluster_sc3_stability_plots_k{k}.pdf k ks joined -.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/cluster_sc3_df_fn.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a dataframe of SC3 clusters for a selected number of clusters. — cluster_sc3_df_fn","title":"Create a dataframe of SC3 clusters for a selected number of clusters. — cluster_sc3_df_fn","text":"function just extracts cell-cluster membership cluster_sce_sc3 object generates cluster stability plots.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/cluster_sc3_df_fn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a dataframe of SC3 clusters for a selected number of clusters. — cluster_sc3_df_fn","text":"","code":"cluster_sc3_df_fn(cluster_sce_sc3, sc3_k, is_integration)"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/cluster_sc3_df_fn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a dataframe of SC3 clusters for a selected number of clusters. — cluster_sc3_df_fn","text":"cluster_sce_sc3 (input target) SingleCellExperiment object calculated SC3 clustering. sc3_k numeric vector: numbers clusters SC3. is_integration logical scalar: TRUE, clusterings named cluster_int_*, otherwise cluster_*.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/cluster_sc3_df_fn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a dataframe of SC3 clusters for a selected number of clusters. — cluster_sc3_df_fn","text":"tibble whose columns mostly self-explanatory, except data column, list type contains another tibble cluster_stability_plot column holding ggplot object returned SC3::sc3_plot_cluster_stability().","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/collapse_ensembl_multivals.html","id":null,"dir":"Reference","previous_headings":"","what":"Collapse a character vector by ","title":"Collapse a character vector by ","text":"Used multiVals parameter AnnotationDbi::mapIds().","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/collapse_ensembl_multivals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Collapse a character vector by ","text":"","code":"collapse_ensembl_multivals(x)"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/collapse_ensembl_multivals.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Collapse a character vector by ","text":"x character vector.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/collapse_ensembl_multivals.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Collapse a character vector by ","text":"character scalar.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/contrasts_fn.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract contrast statistics from cluster markers tests. — contrasts_fn","title":"Extract contrast statistics from cluster markers tests. — contrasts_fn","text":"Extract contrast statistics cluster markers tests.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/contrasts_fn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract contrast statistics from cluster markers tests. — contrasts_fn","text":"","code":"contrasts_fn(contrasts_raw, contrasts_params)"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/contrasts_fn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract contrast statistics from cluster markers tests. — contrasts_fn","text":"contrasts_raw (input target) tibble. contrasts_params (input target) tibble.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/contrasts_fn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract contrast statistics from cluster markers tests. — contrasts_fn","text":"tibble. Output target: contrasts","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/contrasts_heatmaps_df_fn.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a tibble holding contrast results and heatmap parameters. — contrasts_heatmaps_df_fn","title":"Create a tibble holding contrast results and heatmap parameters. — contrasts_heatmaps_df_fn","text":"Create tibble holding contrast results heatmap parameters.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/contrasts_heatmaps_df_fn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a tibble holding contrast results and heatmap parameters. — contrasts_heatmaps_df_fn","text":"","code":"contrasts_heatmaps_df_fn(contrasts, contrasts_heatmap_params, out_dir)"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/contrasts_heatmaps_df_fn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a tibble holding contrast results and heatmap parameters. — contrasts_heatmaps_df_fn","text":"contrasts (input target) tibble. contrasts_heatmap_params (input target) tibble. out_dir character scalar: path base directory saving heatmaps.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/contrasts_heatmaps_df_fn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a tibble holding contrast results and heatmap parameters. — contrasts_heatmaps_df_fn","text":"tibble. Output target: contrasts_heatmaps_df","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/contrasts_out_fn.html","id":null,"dir":"Reference","previous_headings":"","what":"Format a tibble with contrast results. — contrasts_out_fn","title":"Format a tibble with contrast results. — contrasts_out_fn","text":"Format tibble contrast results.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/contrasts_out_fn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format a tibble with contrast results. — contrasts_out_fn","text":"","code":"contrasts_out_fn(contrasts)"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/contrasts_out_fn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format a tibble with contrast results. — contrasts_out_fn","text":"contrasts (input target) tibble.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/contrasts_out_fn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format a tibble with contrast results. — contrasts_out_fn","text":"tibble. Output target: contrasts_out","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/contrasts_params.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare a tibble with parameters for contrasts tests. — contrasts_params_fn","title":"Prepare a tibble with parameters for contrasts tests. — contrasts_params_fn","text":"Extract heatmap-related parameters. Extract plotting-related parameters.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/contrasts_params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare a tibble with parameters for contrasts tests. — contrasts_params_fn","text":"","code":"contrasts_params_fn(contrasts_sources, cell_data)  contrasts_heatmap_params_fn(contrasts_params, contrasts_test_params)  contrasts_plot_params_fn(contrasts_params)"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/contrasts_params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare a tibble with parameters for contrasts tests. — contrasts_params_fn","text":"contrasts_sources named list. cell_data named list: items columns colData(). used assign cells groups blocks. contrasts_params (input target) tibble. contrasts_test_params (input target) tibble.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/contrasts_params.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare a tibble with parameters for contrasts tests. — contrasts_params_fn","text":"tibble. Output target: contrasts_params tibble. Output target: contrasts_heatmap_params tibble. Output target: contrasts_plot_params","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/create_dirs.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a basic directory structure based on paths in config. — create_single_sample_dirs","title":"Create a basic directory structure based on paths in config. — create_single_sample_dirs","text":"Create basic directory structure based paths config.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/create_dirs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a basic directory structure based on paths in config. — create_single_sample_dirs","text":"","code":"create_single_sample_dirs(cfg)  create_integration_dirs(cfg)"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/create_dirs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a basic directory structure based on paths in config. — create_single_sample_dirs","text":"cfg scdrake_list. Obtained load_single_sample_configs() load_integration_configs().","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/create_dirs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a basic directory structure based on paths in config. — create_single_sample_dirs","text":"Invisibly NULL.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/create_dummy_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a blank ggplot with label. — create_dummy_plot","title":"Create a blank ggplot with label. — create_dummy_plot","text":"Create blank ggplot label.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/create_dummy_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a blank ggplot with label. — create_dummy_plot","text":"","code":"create_dummy_plot(label)"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/create_dummy_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a blank ggplot with label. — create_dummy_plot","text":"label character scalar: text display plot.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/create_dummy_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a blank ggplot with label. — create_dummy_plot","text":"ggplot2 object.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/create_seu_for_heatmaps.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Seurat object used for heatmap generation. — create_seu_for_heatmaps","title":"Create a Seurat object used for heatmap generation. — create_seu_for_heatmaps","text":"Create Seurat object used heatmap generation.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/create_seu_for_heatmaps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Seurat object used for heatmap generation. — create_seu_for_heatmaps","text":"","code":"create_seu_for_heatmaps(sce_dimred, calc_zscore = TRUE)"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/create_seu_for_heatmaps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Seurat object used for heatmap generation. — create_seu_for_heatmaps","text":"sce_dimred SingleCellExperiment object calculated dimreds. calc_zscore logical scalar: TRUE, calculate z-scores UMI counts assays$RNA@scale.data slot.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/create_seu_for_heatmaps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Seurat object used for heatmap generation. — create_seu_for_heatmaps","text":"Seurat object.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/create_signature_matrix_fn.html","id":null,"dir":"Reference","previous_headings":"","what":"Create signature matrix from provided file containing names with markers. — create_signature_matrix_fn","title":"Create signature matrix from provided file containing names with markers. — create_signature_matrix_fn","text":"Create signature matrix provided file containing names markers.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/create_signature_matrix_fn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create signature matrix from provided file containing names with markers. — create_signature_matrix_fn","text":"","code":"create_signature_matrix_fn(markers_file)"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/create_signature_matrix_fn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create signature matrix from provided file containing names with markers. — create_signature_matrix_fn","text":"markers_file csv file containing list annotation names selected markers.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/dimred_plots_cell_annotation_params_df_fn.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a tibble with parameters for dimred plots of cell annotation labels. — dimred_plots_cell_annotation_params_df_fn","title":"Make a tibble with parameters for dimred plots of cell annotation labels. — dimred_plots_cell_annotation_params_df_fn","text":"Make tibble parameters dimred plots cell annotation labels.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/dimred_plots_cell_annotation_params_df_fn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a tibble with parameters for dimred plots of cell annotation labels. — dimred_plots_cell_annotation_params_df_fn","text":"","code":"dimred_plots_cell_annotation_params_df_fn(   dimred_names,   cell_annotation_params,   out_dir = NULL )"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/dimred_plots_cell_annotation_params_df_fn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a tibble with parameters for dimred plots of cell annotation labels. — dimred_plots_cell_annotation_params_df_fn","text":"dimred_names character vector: names dimreds. cell_annotation_params (input target) tibble. out_dir character scalar: output directory PDF PNG files later saved.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/dimred_plots_cell_annotation_params_df_fn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a tibble with parameters for dimred plots of cell annotation labels. — dimred_plots_cell_annotation_params_df_fn","text":"tibble. Output target: dimred_plots_other_vars_params","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/dimred_plots_clustering_fn.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a dimred plot for each clustering and dimred method. — dimred_plots_clustering_fn","title":"Make a dimred plot for each clustering and dimred method. — dimred_plots_clustering_fn","text":"Make dimred plot clustering dimred method.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/dimred_plots_clustering_fn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a dimred plot for each clustering and dimred method. — dimred_plots_clustering_fn","text":"","code":"dimred_plots_clustering_fn(   sce_dimred,   dimred_names,   cluster_df,   spatial = FALSE,   out_dir = NULL )"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/dimred_plots_clustering_fn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a dimred plot for each clustering and dimred method. — dimred_plots_clustering_fn","text":"sce_dimred SingleCellExperiment object computed dimreds specified dimred_names. dimred_names character vector: dimred names use plotting. cluster_df tibble. spatial logical vector, TRUE enable pseudotissue visualization spatial transcriptomics datasets out_dir character scalar: output directory PDF PNG files saved.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/dimred_plots_clustering_fn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a dimred plot for each clustering and dimred method. — dimred_plots_clustering_fn","text":"tibble. Output target: dimred_plots_clustering","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/dimred_plots_clustering_united_files_fn.html","id":null,"dir":"Reference","previous_headings":"","what":"Put clustering dimred plots for different parameters (resolution, k) into a single PDF. — dimred_plots_clustering_united_files_fn","title":"Put clustering dimred plots for different parameters (resolution, k) into a single PDF. — dimred_plots_clustering_united_files_fn","text":"Put clustering dimred plots different parameters (resolution, k) single PDF.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/dimred_plots_clustering_united_files_fn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Put clustering dimred plots for different parameters (resolution, k) into a single PDF. — dimred_plots_clustering_united_files_fn","text":"","code":"dimred_plots_clustering_united_files_fn(   dimred_plots_clustering,   out_dir = NULL )"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/dimred_plots_clustering_united_files_fn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Put clustering dimred plots for different parameters (resolution, k) into a single PDF. — dimred_plots_clustering_united_files_fn","text":"dimred_plots_clustering (input target) tibble. out_dir character scalar: output directory PDF files later saved.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/dimred_plots_clustering_united_files_fn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Put clustering dimred plots for different parameters (resolution, k) into a single PDF. — dimred_plots_clustering_united_files_fn","text":"tibble. Output target: dimred_plots_clustering_united_files","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/dimred_plots_from_params_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Make dimred plots of selected variables. — dimred_plots_from_params_df","title":"Make dimred plots of selected variables. — dimred_plots_from_params_df","text":"Make dimred plots selected variables.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/dimred_plots_from_params_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make dimred plots of selected variables. — dimred_plots_from_params_df","text":"","code":"dimred_plots_from_params_df(sce_dimred, dimred_plots_params_df)"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/dimred_plots_from_params_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make dimred plots of selected variables. — dimred_plots_from_params_df","text":"sce_dimred (input target) SingleCellExperiment object. Input target integration plan sce_int_clustering_final. dimred_plots_params_df (input target) tibble.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/dimred_plots_from_params_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make dimred plots of selected variables. — dimred_plots_from_params_df","text":"tibble. Output target: dimred_plots_other_vars","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/dimred_plots_other_vars_params_df_fn.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a tibble with parameters for dimred plots of selected variables. — dimred_plots_other_vars_params_df_fn","title":"Make a tibble with parameters for dimred plots of selected variables. — dimred_plots_other_vars_params_df_fn","text":"Make tibble parameters dimred plots selected variables.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/dimred_plots_other_vars_params_df_fn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a tibble with parameters for dimred plots of selected variables. — dimred_plots_other_vars_params_df_fn","text":"","code":"dimred_plots_other_vars_params_df_fn(   dimred_names,   dimred_plots_other,   out_dir = NULL )"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/dimred_plots_other_vars_params_df_fn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a tibble with parameters for dimred plots of selected variables. — dimred_plots_other_vars_params_df_fn","text":"dimred_names character vector: names dimreds. dimred_plots_other named list: see NORM_CLUSTERING_REPORT_DIMRED_PLOTS_OTHER parameter 02_norm_clustering.yaml 02_int_clustering.yaml config. out_dir character scalar: output directory PDF PNG files later saved.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/dimred_plots_other_vars_params_df_fn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a tibble with parameters for dimred plots of selected variables. — dimred_plots_other_vars_params_df_fn","text":"tibble. Output target: dimred_plots_other_vars_params","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/dot-apply_config_patches.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply YAML config patches to package-bundled configs. — .apply_config_patches","title":"Apply YAML config patches to package-bundled configs. — .apply_config_patches","text":"used tests/testthat/test-run_pipeline.R tests modifications default config files needed. patches located tests/testthat/run_pipeline_config_patches. patches applied, local versions updated default ones, similar standard behaviour (update_config()).","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/dot-apply_config_patches.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply YAML config patches to package-bundled configs. — .apply_config_patches","text":"","code":".apply_config_patches(   patches_dir,   analysis_config_dir,   pipeline_config_dir = getOption(\"scdrake_pipeline_config_dir\") )"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/dot-apply_config_patches.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply YAML config patches to package-bundled configs. — .apply_config_patches","text":"patches_dir character scalar: path directory config patches. files must named bundled ones, e.g. 02_norm_clustering.yaml. analysis_config_dir character scalar: path directory analysis config files. pipeline_config_dir character scalar: path directory pipeline config file (pipeline.yaml).","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/dot-apply_config_patches.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply YAML config patches to package-bundled configs. — .apply_config_patches","text":"Invisibly NULL.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/dot-apply_config_patches.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Apply YAML config patches to package-bundled configs. — .apply_config_patches","text":"pipeline_config_dir directory used pipeline.default.yaml file present patches_dir.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/dot-check_integration_methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for valid INTEGRATION_SOURCES parameter. — .check_integration_methods","title":"Check for valid INTEGRATION_SOURCES parameter. — .check_integration_methods","text":"Check valid INTEGRATION_SOURCES parameter.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/dot-check_integration_methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for valid INTEGRATION_SOURCES parameter. — .check_integration_methods","text":"","code":".check_integration_methods(   integration_methods,   method_names = c(\"uncorrected\", \"rescaling\", \"regression\", \"mnn\", \"harmony\"),   params = c(\"pca_selection_method\", \"pca_forced_pcs\", \"tsne_perp\", \"tsne_max_iter\") )"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/dot-check_integration_methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for valid INTEGRATION_SOURCES parameter. — .check_integration_methods","text":"integration_methods named list. method_names character vector: valid names integration methods. params character vector: names valid parameters integration method.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/dot-check_integration_methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for valid INTEGRATION_SOURCES parameter. — .check_integration_methods","text":"Invisibly TRUE checks valid.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/dot-check_marker_sources.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for correct structure of CLUSTER_MARKERS_SOURCES or CONTRASTS_SOURCES. — .check_marker_sources","title":"Check for correct structure of CLUSTER_MARKERS_SOURCES or CONTRASTS_SOURCES. — .check_marker_sources","text":"Check correct structure CLUSTER_MARKERS_SOURCES CONTRASTS_SOURCES.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/dot-check_marker_sources.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for correct structure of CLUSTER_MARKERS_SOURCES or CONTRASTS_SOURCES. — .check_marker_sources","text":"","code":".check_marker_sources(   marker_sources,   check_test_params = FALSE,   marker_type = c(\"global\", \"contrast\") )"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/dot-check_marker_sources.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for correct structure of CLUSTER_MARKERS_SOURCES or CONTRASTS_SOURCES. — .check_marker_sources","text":"marker_sources named list. check_test_params logical scalar: TRUE, check also params_* test type. marker_type character scalar: \"global\" cluster markers, \"contrast\" contrasts.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/dot-check_marker_sources.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for correct structure of CLUSTER_MARKERS_SOURCES or CONTRASTS_SOURCES. — .check_marker_sources","text":"TRUE invisibly checks valid.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/dot-get_dict_param.html","id":null,"dir":"Reference","previous_headings":"","what":"Unlist a list of length one containing a named list. — .get_dict_param","title":"Unlist a list of length one containing a named list. — .get_dict_param","text":"used YAML parameters need defined way, otherwise get overwritten default values. Example parameter:","code":"PARAM:   - var_1:       a: 1     var_2:       b: 2"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/dot-get_dict_param.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unlist a list of length one containing a named list. — .get_dict_param","text":"","code":".get_dict_param(   param,   not_empty = FALSE,   empty_to_null = TRUE,   name = deparse(substitute(param)) )"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/dot-get_dict_param.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unlist a list of length one containing a named list. — .get_dict_param","text":"param list length one containing named list. not_empty logical scalar: TRUE, throw error param NULL empty list. empty_to_null logical scalar: TRUE param empty list, return NULL. name passed param symbol, used error messages.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/dot-get_dict_param.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Unlist a list of length one containing a named list. — .get_dict_param","text":"named list, NULL empty_to_null TRUE conditions met.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/dot-hereize_paths.html","id":null,"dir":"Reference","previous_headings":"","what":"Using the here package, contruct paths relative to project's root directory. — .hereize_paths","title":"Using the here package, contruct paths relative to project's root directory. — .hereize_paths","text":"Using package, contruct paths relative project's root directory.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/dot-hereize_paths.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Using the here package, contruct paths relative to project's root directory. — .hereize_paths","text":"","code":".hereize_paths(cfg, paths)"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/dot-hereize_paths.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Using the here package, contruct paths relative to project's root directory. — .hereize_paths","text":"cfg named list. paths character vector: names items cfg paths modify.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/dot-hereize_paths.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Using the here package, contruct paths relative to project's root directory. — .hereize_paths","text":"modified cfg.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/dot-load_config_group.html","id":null,"dir":"Reference","previous_headings":"","what":"Load a group of YAML config files. — .load_config_group","title":"Load a group of YAML config files. — .load_config_group","text":"Load group YAML config files.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/dot-load_config_group.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load a group of YAML config files. — .load_config_group","text":"","code":".load_config_group(dir, cfg_defs, cfg_pipeline = NULL, process = TRUE, ...)"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/dot-load_config_group.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load a group of YAML config files. — .load_config_group","text":"dir character scalar: path directory YAML config files. cfg_defs list lists length three. list, first item name YAML file dir, second one name resulting named list, third one processing function. cfg_pipeline One : scdrake_list object: pipeline config (see load_pipeline_config()) obtained pipeline.yaml file located pipeline config directory NULL: config loaded using path defined scdrake_pipeline_config_dir option scalar character fs_path object: config loaded path process logical scalar: TRUE, apply processing function associated config list. ... Passed load_pipeline_config(), load_config(), .load_configs().","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/dot-load_config_group.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load a group of YAML config files. — .load_config_group","text":"named scdrake_list scdrake_lists entry cfg_defs list.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/dot-load_configs.html","id":null,"dir":"Reference","previous_headings":"","what":"Load a list of YAML config files. — .load_configs","title":"Load a list of YAML config files. — .load_configs","text":"Load list YAML config files.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/dot-load_configs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load a list of YAML config files. — .load_configs","text":"","code":".load_configs(dir, cfg_defs, other_variables = NULL, process = TRUE, ...)"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/dot-load_configs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load a list of YAML config files. — .load_configs","text":"dir path directory YAML config files. cfg_defs list lists length three. list, first item name YAML file dir, second one name resulting named list, third one processing function. other_variables Passed load_config(). process logical scalar: TRUE, apply processing function associated config list. ... Currently used.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/dot-load_configs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load a list of YAML config files. — .load_configs","text":"named list lists loaded YAML configs.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/dot-paths_to_base_dir.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct paths relative to base directory. — .paths_to_base_dir","title":"Construct paths relative to base directory. — .paths_to_base_dir","text":"Construct paths relative base directory.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/dot-paths_to_base_dir.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct paths relative to base directory. — .paths_to_base_dir","text":"","code":".paths_to_base_dir(cfg, base_out_dir, paths)"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/dot-paths_to_base_dir.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct paths relative to base directory. — .paths_to_base_dir","text":"cfg named list. base_out_dir character scalar: path base directory. paths character vector: names items cfg paths modify.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/dot-paths_to_base_dir.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct paths relative to base directory. — .paths_to_base_dir","text":"modified cfg.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/dot-update_configs_recursive.html","id":null,"dir":"Reference","previous_headings":"","what":"Recursively update local configs using a file glob *.default.yaml. — .update_configs_recursive","title":"Recursively update local configs using a file glob *.default.yaml. — .update_configs_recursive","text":"Recursively update local configs using file glob *.default.yaml.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/dot-update_configs_recursive.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Recursively update local configs using a file glob *.default.yaml. — .update_configs_recursive","text":"","code":".update_configs_recursive(dir, ...)"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/dot-update_configs_recursive.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Recursively update local configs using a file glob *.default.yaml. — .update_configs_recursive","text":"dir character scalar: path directory recursively search config files. ... Passed update_config().","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/dot-update_configs_recursive.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Recursively update local configs using a file glob *.default.yaml. — .update_configs_recursive","text":"","code":"if (FALSE) { .update_configs_recursive(\"config/single_sample\") }"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/download_example_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Download PBMC example data from 10x Genomics. — download_example_data","title":"Download PBMC example data from 10x Genomics. — download_example_data","text":"data files raw feature barcode matrices. download_pbmc1k(): PBMC 1k dataset (v3 chemistry, Cell Ranger 3.0.0) download_pbmc3k(): PBMC 3k dataset (v2 chemistry, Cell Ranger 1.1.0) credits go 10x Genomics. Visit https://www.10xgenomics.com/resources/datasets information.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/download_example_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download PBMC example data from 10x Genomics. — download_example_data","text":"","code":"download_pbmc1k(out_dir, ask = TRUE, verbose = getOption(\"scdrake_verbose\"))  download_pbmc3k(out_dir, ask = TRUE, verbose = getOption(\"scdrake_verbose\"))"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/download_example_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download PBMC example data from 10x Genomics. — download_example_data","text":"out_dir character scalar: path directory data downloaded extracted. automatically created exist. ask logical scalar: TRUE, ask download. verbose logical scalar: TRUE, verbose. default value obtained getOption(\"scdrake_verbose\").","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/download_example_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download PBMC example data from 10x Genomics. — download_example_data","text":"vector downloaded files (invisibly).","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/download_yq.html","id":null,"dir":"Reference","previous_headings":"","what":"Download the binary of the yq tool (version 3.4.1). — download_yq","title":"Download the binary of the yq tool (version 3.4.1). — download_yq","text":"function side-effects default, see set_as_default argument.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/download_yq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download the binary of the yq tool (version 3.4.1). — download_yq","text":"","code":"download_yq(   url = NULL,   os = NULL,   arch = NULL,   yq_version = \"3.4.1\",   destfile = get_yq_default_path(),   set_as_default = TRUE,   do_check = TRUE,   ask = TRUE,   overwrite = FALSE,   dry = FALSE,   verbose = getOption(\"scdrake_verbose\") )"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/download_yq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download the binary of the yq tool (version 3.4.1). — download_yq","text":"url character scalar: URL binary downloaded. NULL, created os, arch, yq_version. os character scalar: specifies current OS (\"linux\", \"windows\", \"darwin\" macOS). NULL, determined .Platform$OS.type. arch character scalar: specifies current CPU architecture (32, 64, \"arm64\"). NULL, determined .Machine$sizeof.pointer (4 -> 32, 8 -> 64) R.version \"arm64\" (identified \"aarch64\" Apple's M1 chipsets). yq_version character scalar: yq tool version. destfile character scalar: destination file. set_as_default logical scalar: TRUE, set options(scdrake_yq_binary = destfile). do_check logical scalar: TRUE, functionality downloaded (present) yq binary checked. ask logical scalar: TRUE, ask yq binary downloaded. overwrite logical scalar: TRUE, overwrite existing yq binary exists. dry logical scalar: TRUE, download yq binary just return URL. verbose logical scalar: TRUE, verbose. default value obtained getOption(\"scdrake_verbose\").","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/download_yq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download the binary of the yq tool (version 3.4.1). — download_yq","text":"character scalar length two: destfile URL yq binary. Note Windows platform, destfile contain .exe extension, automatically added. !overwrite && fs::file_exists(destfile), NULL invisibly.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/empty_droplets_fn.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate empty droplet statistics for each cell. — empty_droplets_fn","title":"Calculate empty droplet statistics for each cell. — empty_droplets_fn","text":"See DropletUtils::emptyDrops() implementation details.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/empty_droplets_fn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate empty droplet statistics for each cell. — empty_droplets_fn","text":"","code":"empty_droplets_fn(   sce_raw,   empty_droplets_lower,   empty_droplets_enabled = TRUE,   BPPARAM = BiocParallel::SerialParam() )"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/empty_droplets_fn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate empty droplet statistics for each cell. — empty_droplets_fn","text":"sce_raw (input target) SingleCellExperiment object. empty_droplets_lower integer scalar: lower bound total UMI count barcodes assumed correspond empty droplets. Passed DropletUtils::emptyDrops(). empty_droplets_enabled logical scalar: TRUE, skip empty droplets calculation return NULL. BPPARAM BiocParallel::BiocParallelParam object.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/empty_droplets_fn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate empty droplet statistics for each cell. — empty_droplets_fn","text":"DataFrame object (value returned DropletUtils::emptyDrops()) empty_droplets_enabled TRUE, NULL otherwise. Output target: empty_droplets","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/filter_markers.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter a dataframe with cluster markers. — filter_markers","title":"Filter a dataframe with cluster markers. — filter_markers","text":"Filter dataframe cluster markers.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/filter_markers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter a dataframe with cluster markers. — filter_markers","text":"","code":"filter_markers(   markers,   top_n,   top_n_wt = c(\"top\", \"fdr\", \"lfc\", \"auc\"),   distinct_by = NULL )"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/filter_markers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter a dataframe with cluster markers. — filter_markers","text":"markers dataframe-like object. top_n numeric scalar: number top markers keep. top_n_wt character scalar: name column markers top markers determined: \"top\": minimum rank across pairwise comparisons. possible markers computed pval.type=\"\". \"fdr\": False Discovery Rate \"lfc\": log2 fold change \"auc\": Area Curve. possible marker test \"wilcox\". distinct_by character scalar: name column markers unique rows kept.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/filter_markers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter a dataframe with cluster markers. — filter_markers","text":"filtered markers object.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/filter_nulls.html","id":null,"dir":"Reference","previous_headings":"","what":"Return list with removed NULL elements. — filter_nulls","title":"Return list with removed NULL elements. — filter_nulls","text":"Return list removed NULL elements.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/filter_nulls.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return list with removed NULL elements. — filter_nulls","text":"","code":"filter_nulls(l)"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/filter_nulls.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return list with removed NULL elements. — filter_nulls","text":"l list.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/filter_nulls.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return list with removed NULL elements. — filter_nulls","text":"list without NULL elements.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/filter_nulls.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return list with removed NULL elements. — filter_nulls","text":"","code":"filter_nulls(list(a = 1, b = NULL, c = 3)) #> $a #> [1] 1 #>  #> $c #> [1] 3 #>"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/format_shell_command.html","id":null,"dir":"Reference","previous_headings":"","what":"Format a shell command as a Markdown codeblock. — format_shell_command","title":"Format a shell command as a Markdown codeblock. — format_shell_command","text":"shell command formatted item lines put onto separate line suffixed  \\.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/format_shell_command.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format a shell command as a Markdown codeblock. — format_shell_command","text":"","code":"format_shell_command(lines, language = \"bash\", wrap = TRUE)  wrap_code(lines, collapse = TRUE, language = \"bash\")  format_shell_commands(commands, language = \"bash\", wrap = TRUE)"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/format_shell_command.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format a shell command as a Markdown codeblock. — format_shell_command","text":"lines character vector: code lines. language character scalar: codeblock language. wrap logical scalar: TRUE, run wrap_code() onto formatted command. collapse logical scalar: TRUE, collapse lines newline (\\n). commands list character vectors command lines passed format_shell_command().","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/format_shell_command.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format a shell command as a Markdown codeblock. — format_shell_command","text":"character vector.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/format_used_functions.html","id":null,"dir":"Reference","previous_headings":"","what":"Use the {downlit} package to generate a Markdown list of autolinked functions wrapped inside <details> tags. — format_used_functions","title":"Use the {downlit} package to generate a Markdown list of autolinked functions wrapped inside <details> tags. — format_used_functions","text":"Use {downlit} package generate Markdown list autolinked functions wrapped inside <details> tags.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/format_used_functions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use the {downlit} package to generate a Markdown list of autolinked functions wrapped inside <details> tags. — format_used_functions","text":"","code":"format_used_functions(functions, do_cat = FALSE)"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/format_used_functions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use the {downlit} package to generate a Markdown list of autolinked functions wrapped inside <details> tags. — format_used_functions","text":"functions character scalar: functions autolinked, e.g. scran::clusterCells(). do_cat logical scalar: TRUE, cat result stdout.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/format_used_functions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use the {downlit} package to generate a Markdown list of autolinked functions wrapped inside <details> tags. — format_used_functions","text":"character scalar. Invisibly do_cat TRUE.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/format_used_functions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Use the {downlit} package to generate a Markdown list of autolinked functions wrapped inside <details> tags. — format_used_functions","text":"","code":"format_used_functions(c(\"scran::clusterCells()\", \"Seurat::DimPlot()\"), do_cat = TRUE) #>  #> <details> #>   <summary class='used-functions'>Show used functions ▾<\/summary> #>  #>   <div class='used-functions-content'> #> -   [`scran::clusterCells()`](https://rdrr.io/pkg/scran/man/clusterCells.html) #> -   [`Seurat::DimPlot()`](https://satijalab.org/seurat/reference/DimPlot.html) #>  #>   <\/div> #> <\/details> #>"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/generate_cell_annotation_plots_section.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a section with dimred plots used in some RMarkdown files. — generate_cell_annotation_plots_section","title":"Generate a section with dimred plots used in some RMarkdown files. — generate_cell_annotation_plots_section","text":"hierarchy composed tabsets: Selected annotation reference Dimred plots (UMAP, t-SNE, PCA)","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/generate_cell_annotation_plots_section.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a section with dimred plots used in some RMarkdown files. — generate_cell_annotation_plots_section","text":"","code":"generate_cell_annotation_plots_section(   dimred_plots_cell_annotation_files,   cell_annotation_diagnostic_plots,   dimred_plots_rel_start = \".\",   cell_annotation_diagnostic_plots_rel_start = \".\",   main_header = \"Cell annotation\",   main_header_level = 1,   text = NULL )"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/generate_cell_annotation_plots_section.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a section with dimred plots used in some RMarkdown files. — generate_cell_annotation_plots_section","text":"dimred_plots_cell_annotation_files tibble. cell_annotation_diagnostic_plots tibble NULL. dimred_plots_rel_start, cell_annotation_diagnostic_plots_rel_start character scalar: relative start path directory dimred plots, selected markers cell annotation diagnostic plots PDFs. See Relative links section create_a_link(). main_header character scalar: text main header. main_header_level numeric scalar: level main header. text character text: additional text displayed top section.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/generate_cell_annotation_plots_section.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a section with dimred plots used in some RMarkdown files. — generate_cell_annotation_plots_section","text":"Invisibly NULL.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/generate_dimred_plots_clustering_section.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a section of clustering dimensionality reduction plots in an RMarkdown document. — generate_dimred_plots_clustering_section","title":"Generate a section of clustering dimensionality reduction plots in an RMarkdown document. — generate_dimred_plots_clustering_section","text":"hierarchy composed tabsets: Dimred (UMAP, t-SNE, PCA) Clustering parameters (resolution, k), applicable","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/generate_dimred_plots_clustering_section.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a section of clustering dimensionality reduction plots in an RMarkdown document. — generate_dimred_plots_clustering_section","text":"","code":"generate_dimred_plots_clustering_section(   dimred_plots_clustering_files,   dimred_plots_clustering_united_files,   algorithm_category,   algorithm,   rel_start_dir,   header_level )"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/generate_dimred_plots_clustering_section.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a section of clustering dimensionality reduction plots in an RMarkdown document. — generate_dimred_plots_clustering_section","text":"dimred_plots_clustering_files tibble. dimred_plots_clustering_united_files tibble. algorithm_category, algorithm Character vectors filter dimred_plots_clustering_files dimred_plots_clustering_united_files. rel_start_dir character scalar: path HTML file links PDF files. See Relative links section create_a_link(). header_level integer scalar: first header level.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/generate_dimred_plots_clustering_section.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a section of clustering dimensionality reduction plots in an RMarkdown document. — generate_dimred_plots_clustering_section","text":"Invisibly NULL, Markdown elements directly printed stdout.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/generate_dimred_plots_section.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a section with dimred plots used in some RMarkdown files. — generate_dimred_plots_section","title":"Generate a section with dimred plots used in some RMarkdown files. — generate_dimred_plots_section","text":"hierarchy composed tabsets: Dimred (UMAP, t-SNE, PCA) Dimred plots selected variables","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/generate_dimred_plots_section.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a section with dimred plots used in some RMarkdown files. — generate_dimred_plots_section","text":"","code":"generate_dimred_plots_section(   dimred_plots_other_vars_files,   selected_markers_plots_files,   dimred_plots_rel_start = \".\",   selected_markers_files_rel_start = \".\",   main_header = \"Dimensionality reduction\",   main_header_level = 1 )"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/generate_dimred_plots_section.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a section with dimred plots used in some RMarkdown files. — generate_dimred_plots_section","text":"dimred_plots_other_vars_files tibble. selected_markers_plots_files tibble. dimred_plots_rel_start, selected_markers_files_rel_start character scalar: relative start path directory dimred plots selected markers. See Relative links section create_a_link(). main_header character scalar: text main header. main_header_level numeric scalar: level main header.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/generate_dimred_plots_section.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a section with dimred plots used in some RMarkdown files. — generate_dimred_plots_section","text":"Invisibly NULL, Markdown elements directly printed stdout.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/generate_markers_results_section.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a table with links to marker results. — generate_markers_results_section","title":"Generate a table with links to marker results. — generate_markers_results_section","text":"function used directly Rmd files side effects (chunks results = \"asis\").","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/generate_markers_results_section.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a table with links to marker results. — generate_markers_results_section","text":"","code":"generate_markers_results_section(df, group_var, dt_order_by, base_out_dir)"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/generate_markers_results_section.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a table with links to marker results. — generate_markers_results_section","text":"df dataframe-like object. group_var character scalar: name grouping variable df. dt_order_by character scalar: name column df order rows . base_out_dir character scalar: path base dir cluster_markers contrasts stage. Used determine relative paths rendered HTML files PDF files (marker plots, heatmaps).","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/generate_markers_results_section.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a table with links to marker results. — generate_markers_results_section","text":"Invisibly NULL.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/generate_stage_report.html","id":null,"dir":"Reference","previous_headings":"","what":"Render RMarkdown document for a stage of the pipeline. — generate_stage_report","title":"Render RMarkdown document for a stage of the pipeline. — generate_stage_report","text":"Render RMarkdown document stage pipeline.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/generate_stage_report.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Render RMarkdown document for a stage of the pipeline. — generate_stage_report","text":"","code":"generate_stage_report(   rmd_file,   out_html_file_name,   output_dir = fs::path_dir(out_html_file_name),   css_file = here(\"Rmd/common/stylesheet.css\"),   params = list(),   message = TRUE,   warning = TRUE,   echo = TRUE,   quiet = TRUE,   other_deps = NULL,   drake_cache_dir = here(\".drake\"),   ... )"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/generate_stage_report.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Render RMarkdown document for a stage of the pipeline. — generate_stage_report","text":"rmd_file character scalar: path Rmd file render. out_html_file_name character scalar: name output HTML file. output_dir character scalar: path directory out_html_file_name created. directory created exist. css_file character scalar: path CSS file included resulting HTML. params list RMarkdown document parameters: passed rmarkdown::render() together css_file drake_cache_dir items. message, warning, echo logical scalar: passed knitr::opts_chunk$set(). quiet logical scalar: TRUE, verbose rendering. Passed rmarkdown::render(). other_deps list symbols (unquoted): used inside drake::plan() mark target dependencies, loaded (drake::loadd()) read (drake::loadd()) inside rmd_file. drake_cache_dir character scalar: path drake cache directory. ... Passed rmarkdown::render().","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/generate_stage_report.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Render RMarkdown document for a stage of the pipeline. — generate_stage_report","text":"Invisibly NULL.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/generate_stage_report.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Render RMarkdown document for a stage of the pipeline. — generate_stage_report","text":"currently working within scdrake project, can review Rmd files Rmd/ directory. list Rmd files currently bundled scdrake package:   short description Rmd files: Common single-sample integration analyses: Cluster markers: common/cluster_markers.Rmd (signpost), common/cluster_markers_table_template.Rmd (actual table markers) Contrasts: common/cluster_markers.Rmd, common/cluster_markers_table_template.Rmd Single-sample analysis: Input QC: single_sample/01_input_qc.Rmd. Input data overview, empty droplets detection, cell gene filtering visualization. Normalization clustering: single_sample/02_norm_clustering.Rmd, single_sample/02_norm_clustering_simple.Rmd (clustering visualization - dimred plots). Overview normalization highly variable genes selection, doublet score plots, selection principal components, clustering diagnostics, dimred plots clusterings variables. Integration analysis: Integration: integration/01_integration.Rmd. Overview input datasets, highly variable genes selection, selection principal components, dimred plots integration, integration diagnostics. Clustering: integration/02_int_clustering.Rmd. Clustering diagnostics, dimred plots clusterings variables. Rmd files also accompanied list config parameters runtime information.","code":"fs::dir_tree(system.file(\"Rmd\", package = \"scdrake\")) #> /home/rstudio/scdrake_source/inst/Rmd #> +-- common #> |   +-- _footer.Rmd #> |   +-- _header.Rmd #> |   +-- cluster_markers.Rmd #> |   +-- cluster_markers_table_template.Rmd #> |   +-- clustering #> |   |   +-- cluster_graph_leiden.Rmd #> |   |   +-- cluster_graph_louvain.Rmd #> |   |   +-- cluster_graph_walktrap.Rmd #> |   |   +-- cluster_kmeans.Rmd #> |   |   +-- cluster_sc3.Rmd #> |   |   \\-- clustering.Rmd #> |   +-- contrasts.Rmd #> |   +-- contrasts_table_template.Rmd #> |   \\-- stylesheet.css #> +-- integration #> |   +-- 01_integration.Rmd #> |   \\-- 02_int_clustering.Rmd #> \\-- single_sample #>     +-- 01_input_qc.Rmd #>     +-- 01_input_qc_children #>     |   +-- cell_filtering_custom.Rmd #>     |   +-- cell_filtering_qc.Rmd #>     |   +-- empty_droplets.Rmd #>     |   +-- empty_droplets_spat.Rmd #>     |   +-- gene_filtering_custom.Rmd #>     |   \\-- gene_filtering_qc.Rmd #>     +-- 01_input_qc_spatial.Rmd #>     +-- 02_norm_clustering.Rmd #>     \\-- 02_norm_clustering_simple.Rmd"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/generate_stage_report.html","id":"working-with-rmd-files-outside-of-a-plan","dir":"Reference","previous_headings":"","what":"Working with Rmd files outside of a plan","title":"Render RMarkdown document for a stage of the pipeline. — generate_stage_report","text":"Rmd file stage can rendered (generate_stage_report(), rmarkdown::render() - see ), run interactively RStudio, outside drake plan. However, assumes: working directory root scdrake project. interactive usage RStudio, set Options -> R Markdown -> Basic -> Evaluate chunks directory \"Project\". Otherwise working directory location Rmd file running R code chunks. Also, Rmd files parametrized, .e. referencing params list, passed rmarkdown::render() generate_stage_report(). order code chunks work properly, create variable named params_ (must available global environment) containing named list. Currently, list must contain single item: drake_cache_dir path drake cache used load targets inside Rmd files. Example: params_ <- list(drake_cache_dir = \".drake_my_analysis\") NOTE: recommended call rmarkdown::render() directly stage's Rmd file, generate_stage_report() also sets temporary options passes proper params parameter.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/generate_stage_report.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Render RMarkdown document for a stage of the pipeline. — generate_stage_report","text":"","code":"if (FALSE) { generate_stage_report(   rmd_file = here(\"Rmd/single_sample/01_input_qc.Rmd\"),   out_html_file_name = \"01_input_qc.html\",   output_dir = here(\"my_output\"),   drake_cache_dir = here(\".drake_cache\") ) }"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/getDistinctColors.html","id":null,"dir":"Reference","previous_headings":"","what":"A helper function for asigning colors in pseudotissue visualization — getDistinctColors","title":"A helper function for asigning colors in pseudotissue visualization — getDistinctColors","text":"Adapted function Giotto package Dries et al, 2021, rewrite use scdrake package SingleCellExperiment object","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/getDistinctColors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A helper function for asigning colors in pseudotissue visualization — getDistinctColors","text":"","code":"getDistinctColors(n)"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/getDistinctColors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A helper function for asigning colors in pseudotissue visualization — getDistinctColors","text":"n Number desired colors.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/getDistinctColors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A helper function for asigning colors in pseudotissue visualization — getDistinctColors","text":"character vector distinct colors.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/get_cell_annotation_subplan.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a subplan for cell annotation via SingleR — get_cell_annotation_subplan","title":"Get a subplan for cell annotation via SingleR — get_cell_annotation_subplan","text":"Get subplan cell annotation via SingleR","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/get_cell_annotation_subplan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a subplan for cell annotation via SingleR — get_cell_annotation_subplan","text":"","code":"get_cell_annotation_subplan(   sce_target_name,   sce_dimred_plots_target_name,   cell_annotation_sources,   cell_annotation_out_dir,   report_dimred_names,   dimred_plots_out_dir,   do_heatmaps_ )"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/get_cell_annotation_subplan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a subplan for cell annotation via SingleR — get_cell_annotation_subplan","text":"sce_target_name, sce_dimred_plots_target_name character scalar: name target representing SCE object used cell annotation dimred plots. cell_annotation_sources tibble cell annotation parameters. cell_annotation_out_dir character scalar: output directory diagnostic plots. report_dimred_names character vector: dimred names plots. dimred_plots_out_dir character scalar: output directory dimred plots. do_heatmaps_ logical scalar: TRUE, make heatmaps annotated predicted cell types cluster memberships.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/get_cell_annotation_subplan.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a subplan for cell annotation via SingleR — get_cell_annotation_subplan","text":"drake::drake_plan()","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/get_clustering_graph_subplan.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a subplan for graph-based clustering. — get_clustering_graph_subplan","title":"Get a subplan for graph-based clustering. — get_clustering_graph_subplan","text":"Currently supported community-based detection algorithms : igraph::cluster_leiden() igraph::cluster_louvain() igraph::cluster_walktrap() See run_graph_based_clustering() details.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/get_clustering_graph_subplan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a subplan for graph-based clustering. — get_clustering_graph_subplan","text":"","code":"get_clustering_graph_subplan(   sce_target_name,   dimred,   cluster_graph_louvain_enabled,   cluster_graph_louvain_resolutions_,   cluster_graph_walktrap_enabled,   cluster_graph_leiden_enabled,   cluster_graph_leiden_resolutions_,   cluster_graph_snn_k_,   cluster_graph_snn_type_,   is_integration,   plots_out_dir )"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/get_clustering_graph_subplan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a subplan for graph-based clustering. — get_clustering_graph_subplan","text":"sce_target_name character scalar: name target representing SCE object used SNN graph construction. dimred character scalar: reducedDim() use clustering. cluster_graph_louvain_resolutions_, cluster_graph_leiden_resolutions_ numeric vector: resolutions calculate selected clustering method. cluster_graph_leiden_enabled, cluster_graph_louvain_enabled, cluster_graph_walktrap_enabled logical scalar: FALSE, disable selected clustering set corresponding targets NULL. cluster_graph_snn_k_, cluster_graph_snn_type_ Passed graph_snn_fn(). is_integration logical scalar: TRUE, clustering results named cluster_int_graph_<method>[_r<r>]. FALSE, named cluster_graph_<method>[_r<r>]. plots_out_dir character scalar: path output directory save plots (e.g. clustree::clustree()).","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/get_clustering_graph_subplan.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a subplan for graph-based clustering. — get_clustering_graph_subplan","text":"drake::drake_plan()","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/get_clustering_kmeans_subplan.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a subplan for k-means clustering. — get_clustering_kmeans_subplan","title":"Get a subplan for k-means clustering. — get_clustering_kmeans_subplan","text":"Besides k-means selected number ks, also best k algorithm.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/get_clustering_kmeans_subplan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a subplan for k-means clustering. — get_clustering_kmeans_subplan","text":"","code":"get_clustering_kmeans_subplan(   sce_target_name,   dimred,   cluster_kmeans_k_enabled,   cluster_kmeans_k,   cluster_kmeans_kbest_enabled,   is_integration,   plots_out_dir )"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/get_clustering_kmeans_subplan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a subplan for k-means clustering. — get_clustering_kmeans_subplan","text":"sce_target_name character scalar: name target representing SCE object used k-means clustering. dimred character scalar: reducedDim() use clustering. cluster_kmeans_k_enabled, cluster_kmeans_kbest_enabled logical scalar: FALSE, disable selected clustering set corresponding targets NULL. cluster_kmeans_k integer vector: ks k-means. is_integration logical scalar: TRUE, clustering results named cluster_int_kmeans_<method>[_k<k>]. FALSE, named cluster_kmeans_<method>[_k<k>]. plots_out_dir character scalar: path output directory save plots (e.g. clustree::clustree()).","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/get_clustering_kmeans_subplan.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a subplan for k-means clustering. — get_clustering_kmeans_subplan","text":"drake::drake_plan()","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/get_clustering_sc3_subplan.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a subplan for SC3 clustering. — get_clustering_sc3_subplan","title":"Get a subplan for SC3 clustering. — get_clustering_sc3_subplan","text":"Get subplan SC3 clustering.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/get_clustering_sc3_subplan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a subplan for SC3 clustering. — get_clustering_sc3_subplan","text":"","code":"get_clustering_sc3_subplan(   sce_target_name,   cluster_sc3_enabled,   cluster_sc3_k_,   cluster_sc3_n_cores,   is_integration,   plots_out_dir,   seed = 1 )"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/get_clustering_sc3_subplan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a subplan for SC3 clustering. — get_clustering_sc3_subplan","text":"sce_target_name character scalar: name target representing SCE object used SC3 clustering. cluster_sc3_enabled logical scalar: FALSE, disable selected clustering set corresponding targets NULL. cluster_sc3_k_ integer vector: ks SC3. cluster_sc3_n_cores integer scalar: number cores use parallel execution SC3 algorithm. is_integration logical scalar: TRUE, clustering results named cluster_int_sc3_k<k>. FALSE, named cluster_sc3_k<k>. plots_out_dir character scalar: path output directory save plots (e.g. clustree::clustree()). seed integer scalar: random seed SC3.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/get_clustering_sc3_subplan.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a subplan for SC3 clustering. — get_clustering_sc3_subplan","text":"drake::drake_plan()","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/get_clustering_subplan.html","id":null,"dir":"Reference","previous_headings":"","what":"Get subplan for clustering. — get_clustering_subplan","title":"Get subplan for clustering. — get_clustering_subplan","text":"Besides clustering , plan also includes dimred plots computed clusters.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/get_clustering_subplan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get subplan for clustering. — get_clustering_subplan","text":"","code":"get_clustering_subplan(   cfg,   sce_clustering_target_name,   sce_dimred_plots_target_name,   dimred,   report_dimred_names,   dimred_plots_out_dir,   other_plots_out_dir,   is_integration,   spatial,   seed = 1 )"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/get_clustering_subplan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get subplan for clustering. — get_clustering_subplan","text":"cfg list parameters 02_norm_clustering 02_int_clustering stage. sce_clustering_target_name, sce_dimred_plots_target_name character scalar: name target representing SCE object used SC3 clustering dimred plots, respectively. dimred character scalar: reducedDim() use clustering. applied graph-based k-means clustering. report_dimred_names character vector: dimreds use plotting clustering results. dimred_plots_out_dir, other_plots_out_dir character scalar: path output directory save plots. is_integration logical scalar: TRUE, clustering results named cluster_int_* prefix. spatial logical scalar: TRUE, enabling pseudotissue spatial visualization spatial transcriptomics datasets. seed integer scalar: random seed SC3.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/get_clustering_subplan.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get subplan for clustering. — get_clustering_subplan","text":"combined drake::drake_plan() : get_clustering_graph_subplan() get_clustering_kmeans_subplan() get_clustering_sc3_subplan()","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/get_dimred_plots_other_vars_subplan.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a subplan for dimensionality reduction plots of selected variables. — get_dimred_plots_other_vars_subplan","title":"Get a subplan for dimensionality reduction plots of selected variables. — get_dimred_plots_other_vars_subplan","text":"Get subplan dimensionality reduction plots selected variables.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/get_dimred_plots_other_vars_subplan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a subplan for dimensionality reduction plots of selected variables. — get_dimred_plots_other_vars_subplan","text":"","code":"get_dimred_plots_other_vars_subplan(   sce_target_name,   report_dimred_plots_other,   report_dimred_names,   dimred_plots_out_dir )"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/get_dimred_plots_other_vars_subplan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a subplan for dimensionality reduction plots of selected variables. — get_dimred_plots_other_vars_subplan","text":"sce_target_name character scalar: name target stores SCE object, used plotting. report_dimred_plots_other character vector: variables colData(<sce_target_name>) plot. report_dimred_names character vector: dimred names plotting (\"pca\", \"tsne\", \"umap\"). dimred_plots_out_dir character scalar: output directory save PDFs .","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/get_dimred_plots_other_vars_subplan.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a subplan for dimensionality reduction plots of selected variables. — get_dimred_plots_other_vars_subplan","text":"drake::drake_plan()","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/get_gene_filter.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a logical filter for genes not passing a ratio of cells expressing a gene and a minimum number of UMI per gene. — get_gene_filter","title":"Get a logical filter for genes not passing a ratio of cells expressing a gene and a minimum number of UMI per gene. — get_gene_filter","text":"gene considered expressed number UMIs across cells greater min_umi time expressed least min_ratio_cells ratio cells.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/get_gene_filter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a logical filter for genes not passing a ratio of cells expressing a gene and a minimum number of UMI per gene. — get_gene_filter","text":"","code":"get_gene_filter(sce, min_ratio_cells, min_umi)"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/get_gene_filter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a logical filter for genes not passing a ratio of cells expressing a gene and a minimum number of UMI per gene. — get_gene_filter","text":"sce SingleCellExperiment object. min_ratio_cells numeric scalar: minimum ratio cells expressing gene. min_umi numeric scalar: minimum number UMI per gene across cells.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/get_gene_filter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a logical filter for genes not passing a ratio of cells expressing a gene and a minimum number of UMI per gene. — get_gene_filter","text":"logical vector length nrow(sce): TRUE genes passing filter, FALSE otherwise. consistency cell filters, e.g. qc_filter target, TRUE means , .e. cell passing filter.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/get_int_method_description.html","id":null,"dir":"Reference","previous_headings":"","what":"Return description for an integration method. — get_int_method_description","title":"Return description for an integration method. — get_int_method_description","text":"Return description integration method.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/get_int_method_description.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return description for an integration method. — get_int_method_description","text":"","code":"get_int_method_description(   int_method_name = c(\"uncorrected\", \"rescaling\", \"regression\", \"mnn\", \"harmony\") )"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/get_int_method_description.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return description for an integration method. — get_int_method_description","text":"int_method_name character scalar: integration method name.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/get_int_method_description.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return description for an integration method. — get_int_method_description","text":"named list character scalars: header, description, fn_link.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/get_pca_gene_var_pcs.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a number of PCs corresponding to biological variation. — get_pca_gene_var_pcs","title":"Get a number of PCs corresponding to biological variation. — get_pca_gene_var_pcs","text":"strategy described OSCA.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/get_pca_gene_var_pcs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a number of PCs corresponding to biological variation. — get_pca_gene_var_pcs","text":"","code":"get_pca_gene_var_pcs(   sce_pca,   BSPARAM = BiocSingular::IrlbaParam(),   BPPARAM = BiocParallel::SerialParam() )"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/get_pca_gene_var_pcs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a number of PCs corresponding to biological variation. — get_pca_gene_var_pcs","text":"sce_pca SingleCellExperiment object calculated PCA. BSPARAM BiocSingular::BiocSingularParam object. BPPARAM BiocParallel::BiocParallelParam object.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/get_pca_gene_var_pcs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a number of PCs corresponding to biological variation. — get_pca_gene_var_pcs","text":"integer scalar.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/get_pca_selected_pcs.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a final selection of number of PCs. — get_pca_selected_pcs","title":"Get a final selection of number of PCs. — get_pca_selected_pcs","text":"number PCs selection strategy controlled: single-sample analysis, via PCA_SELECTION_METHOD PCA_FORCED_PCS parameters 02_norm_clustering.yaml. integration analysis, via pca_selection_method pca_forced_pcs subparameters INTEGRATION_METHODS parameter 01_integration.yaml.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/get_pca_selected_pcs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a final selection of number of PCs. — get_pca_selected_pcs","text":"","code":"get_pca_selected_pcs(   sce_pca,   pca_elbow_pcs,   pca_gene_var_pcs,   pca_selection_method = c(\"elbow\", \"technical_noise\", \"forced\"),   pca_forced_pcs = NULL )"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/get_pca_selected_pcs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a final selection of number of PCs. — get_pca_selected_pcs","text":"sce_pca SingleCellExperiment object calculated PCA. pca_elbow_pcs numeric scalar: number PCs selected elbow point strategy. pca_gene_var_pcs numeric scalar: number PCs selected technical noise strategy. pca_selection_method character scalar: final selection strategy. pca_forced_pcs numeric scalar: constant number PCs defined config file.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/get_pca_selected_pcs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a final selection of number of PCs. — get_pca_selected_pcs","text":"modified SingleCellExperiment object: full PCA matrix \"pca_all\" slot reducedDim(). subsetted PCA matrix \"pca\" slot reducedDim(). New items added metadata(): pca_selection_method, pca_selected_pcs","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/get_plan.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a drake plan for a specific analysis type. — get_plan","title":"Get a drake plan for a specific analysis type. — get_plan","text":"functions internally loading binding smaller plans (subplans) full plans. using get_common_subplan(), get_cluster_markers_subplan(), get_contrasts_subplan(). get_single_sample_plan() uses get_input_qc_subplan() get_norm_clustering_subplan(). get_integration_plan() uses get_integration_subplan() get_int_clustering_subplan().","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/get_plan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a drake plan for a specific analysis type. — get_plan","text":"","code":"get_single_sample_plan(cfg, cfg_pipeline = NULL)  get_integration_plan(cfg, cfg_pipeline = NULL)"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/get_plan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a drake plan for a specific analysis type. — get_plan","text":"cfg get_single_sample_plan(): list config lists returned load_single_sample_configs(). get_integration_plan(): list config lists returned load_integration_configs(). cfg_pipeline One : scdrake_list object: pipeline config (see load_pipeline_config()) obtained pipeline.yaml file located pipeline config directory NULL: config loaded using path defined scdrake_pipeline_config_dir option","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/get_plan.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a drake plan for a specific analysis type. — get_plan","text":"drake::drake_plan()","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/get_random_strings.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate random strings compounded from alphabetical characters by default. — get_random_strings","title":"Generate random strings compounded from alphabetical characters by default. — get_random_strings","text":"wrapper around stringi::stri_rand_strings().","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/get_random_strings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate random strings compounded from alphabetical characters by default. — get_random_strings","text":"","code":"get_random_strings(n, length, pattern = \"[A-Za-z]\")"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/get_random_strings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate random strings compounded from alphabetical characters by default. — get_random_strings","text":"n, length, pattern Passed stringi::stri_rand_strings().","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/get_random_strings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate random strings compounded from alphabetical characters by default. — get_random_strings","text":"character vector.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/get_subplan_common.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a drake subplan common to all pipelines. — get_subplan_common","title":"Get a drake subplan common to all pipelines. — get_subplan_common","text":"subplan storing configs runtime information. subplan cluster_markers stage. subplan contrasts stage (differential expression).","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/get_subplan_common.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a drake subplan common to all pipelines. — get_subplan_common","text":"","code":"get_common_subplan(   cfg_pipeline,   cfg_main,   pipeline_type_ = c(\"single_sample\", \"integration\") )  get_cluster_markers_subplan(cfg, cfg_pipeline, cfg_main)  get_contrasts_subplan(cfg, cfg_pipeline, cfg_main)"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/get_subplan_common.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a drake subplan common to all pipelines. — get_subplan_common","text":"cfg_pipeline scdrake_list object: pipeline config (see load_pipeline_config()) obtained pipeline.yaml file located pipeline config directory. cfg_main list general parameters (loaded 00_main.yaml single-sample integration config directory). pipeline_type_ character scalar indicating type pipeline. Based pipeline type, targets depend different targets. cfg list parameters stage (single-sample integration config directory, loaded e.g. cluster_markers.yaml, etc.).","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/get_subplan_common.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a drake subplan common to all pipelines. — get_subplan_common","text":"drake::drake_plan()","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/get_subplan_common.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get a drake subplan common to all pipelines. — get_subplan_common","text":"pipeline_type target defined plan returned get_common_subplan().","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/get_subplan_integration.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a drake plan for a stage of integration pipeline. — get_subplan_integration","title":"Get a drake plan for a stage of integration pipeline. — get_subplan_integration","text":"plan 01_integration stage. plan 02_int_clustering stage. following subplans included: get_clustering_graph_subplan(), get_clustering_kmeans_subplan(), get_clustering_sc3_subplan() Bound together get_clustering_subplan() get_cell_annotation_subplan() get_dimred_plots_other_vars_subplan()","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/get_subplan_integration.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a drake plan for a stage of integration pipeline. — get_subplan_integration","text":"","code":"get_integration_subplan(cfg, cfg_pipeline, cfg_main)  get_int_clustering_subplan(cfg, cfg_pipeline, cfg_main)"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/get_subplan_integration.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a drake plan for a stage of integration pipeline. — get_subplan_integration","text":"cfg list parameters stage (integration config directory, e.g. loaded 01_integration.yaml, etc.). cfg_pipeline scdrake_list object: pipeline config (see load_pipeline_config()) obtained pipeline.yaml file located pipeline config directory. cfg_main list general parameters (loaded 00_main.yaml integration config directory).","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/get_subplan_integration.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a drake plan for a stage of integration pipeline. — get_subplan_integration","text":"drake::drake_plan()","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/get_subplan_single_sample.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a drake plan for a stage of single-sample pipeline. — get_subplan_single_sample","title":"Get a drake plan for a stage of single-sample pipeline. — get_subplan_single_sample","text":"plan 01_input_qc stage. plan 02_norm_clustering stage. following subplans included: get_clustering_graph_subplan(), get_clustering_kmeans_subplan(), get_clustering_sc3_subplan() Bound together get_clustering_subplan() get_cell_annotation_subplan() get_dimred_plots_other_vars_subplan()","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/get_subplan_single_sample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a drake plan for a stage of single-sample pipeline. — get_subplan_single_sample","text":"","code":"get_input_qc_subplan(cfg, cfg_pipeline, cfg_main)  get_norm_clustering_subplan(cfg, cfg_pipeline, cfg_main)"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/get_subplan_single_sample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a drake plan for a stage of single-sample pipeline. — get_subplan_single_sample","text":"cfg list parameters stage (loaded single-sample config directory, e.g. 01_input_qc.yaml, etc.). cfg_pipeline scdrake_list object: pipeline config (see load_pipeline_config()) obtained pipeline.yaml file located pipeline config directory. cfg_main list general parameters (loaded 00_main.yaml single-sample config directory).","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/get_subplan_single_sample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a drake plan for a stage of single-sample pipeline. — get_subplan_single_sample","text":"drake::drake_plan()","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/get_sys_env.html","id":null,"dir":"Reference","previous_headings":"","what":"Read an environment variable and if needed, assign a default value. — get_sys_env","title":"Read an environment variable and if needed, assign a default value. — get_sys_env","text":"Read environment variable needed, assign default value.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/get_sys_env.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read an environment variable and if needed, assign a default value. — get_sys_env","text":"","code":"get_sys_env(   var,   default = NULL,   type = c(\"character\", \"double\", \"integer\", \"logical\"),   verbose = getOption(\"scdrake_verbose\") )"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/get_sys_env.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read an environment variable and if needed, assign a default value. — get_sys_env","text":"var character scalar: name environment variable. default default value (different NULL) environment variable unset (empty string). type character scalar: R type variable coerced. verbose logical scalar: TRUE, verbose. default value obtained getOption(\"scdrake_verbose\").","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/get_sys_env.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read an environment variable and if needed, assign a default value. — get_sys_env","text":"character scalar environment variable set, default , empty character scalar default = NULL variable unset.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/get_sys_env.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read an environment variable and if needed, assign a default value. — get_sys_env","text":"","code":"get_sys_env(\"PATH\") #> ℹ Using environment variable `PATH` with value \"/usr/lib/rstudio-server/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\" (character) #> [1] \"/usr/lib/rstudio-server/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\" get_sys_env(\"NON_EXISTING\") #> ℹ Using environment variable `NON_EXISTING` with value \"\" (character) #> [1] \"\" get_sys_env(\"NON_EXISTING\", default = \"default_value\") #> ℹ Environment variable `NON_EXISTING` is not set -> using default value \"default_value\" (character) #> [1] \"default_value\""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/get_tmp_dir.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a path to the temporary directory according to the OS. — get_tmp_dir","title":"Get a path to the temporary directory according to the OS. — get_tmp_dir","text":"Source: https://stackoverflow.com/questions/16474696/read-system-tmp-dir--r","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/get_tmp_dir.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a path to the temporary directory according to the OS. — get_tmp_dir","text":"","code":"get_tmp_dir()"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/get_top_hvgs.html","id":null,"dir":"Reference","previous_headings":"","what":"Get top N highly variable genes (HVGs) by a specified metric. — get_top_hvgs","title":"Get top N highly variable genes (HVGs) by a specified metric. — get_top_hvgs","text":"Types HVG metrics specified 02_norm_clustering.yaml 01_integration.yaml configs. See corresponding section .","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/get_top_hvgs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get top N highly variable genes (HVGs) by a specified metric. — get_top_hvgs","text":"","code":"get_top_hvgs(   sce_norm,   hvg_metric_fit,   hvg_selection_value,   hvg_metric = c(\"gene_var\", \"gene_cv2\", \"sctransform\"),   hvg_selection = c(\"top\", \"significance\", \"threshold\") )"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/get_top_hvgs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get top N highly variable genes (HVGs) by a specified metric. — get_top_hvgs","text":"sce_norm SingleCellExperiment object computed HVG metric. hvg_metric_fit DataFrame HVG metric fit produced e.g. scran::modelGeneVar(). hvg_selection_value numeric scalar: threshold value select HVGs. depends hvg_metric. hvg_metric character scalar: type HVG metric. sctransform used, HVGs selected underlying method, number controlled SCT_N_HVG parameter 02_norm_clustering.yaml. metric types, see hvg_selection hvg_selection_value parameters. hvg_selection character scalar: method use selection HVGs. relevant hvg_metric \"gene_var\" \"gene_cv2\". See https://bioconductor.org/books/3.15/OSCA.basic/feature-selection.html#hvg-selection https://bioconductor.org/books/3.15/OSCA.advanced/-hvgs.html#-hvg-selection-strategies details. \"top\": Take top X genes according metric. \"bio\" \"ratio\" columns used hvg_metric \"gene_var\" \"gene_cv2\", respectively. \"significance\": Use FDR threshold. \"threshold\": Use threshold minimum value metric. \"bio\" \"ratio\" columns used hvg_metric \"gene_var\" \"gene_cv2\", respectively.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/get_top_hvgs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get top N highly variable genes (HVGs) by a specified metric. — get_top_hvgs","text":"character vector HVG IDs (ENSEMBL).","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/get_used_qc_filters_operator_desc.html","id":null,"dir":"Reference","previous_headings":"","what":"Return an informative message about the used operator to join cell QC filters — get_used_qc_filters_operator_desc","title":"Return an informative message about the used operator to join cell QC filters — get_used_qc_filters_operator_desc","text":"Return informative message used operator join cell QC filters","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/get_used_qc_filters_operator_desc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return an informative message about the used operator to join cell QC filters — get_used_qc_filters_operator_desc","text":"","code":"get_used_qc_filters_operator_desc(operator = c(\"&\", \"|\"))"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/get_used_qc_filters_operator_desc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return an informative message about the used operator to join cell QC filters — get_used_qc_filters_operator_desc","text":"operator character scalar: used operator.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/get_used_qc_filters_operator_desc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return an informative message about the used operator to join cell QC filters — get_used_qc_filters_operator_desc","text":"character scalar: message","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/get_yq_default_path.html","id":null,"dir":"Reference","previous_headings":"","what":"Return a default download path for the yq tool's binary. — get_yq_default_path","title":"Return a default download path for the yq tool's binary. — get_yq_default_path","text":"difference platforms Windows .exe extension added.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/get_yq_default_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return a default download path for the yq tool's binary. — get_yq_default_path","text":"","code":"get_yq_default_path()"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/get_yq_default_path.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return a default download path for the yq tool's binary. — get_yq_default_path","text":"character scalar.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/grapes-and-and-grapes.html","id":null,"dir":"Reference","previous_headings":"","what":"A short-circuit evaluation-like function similar to bash's && operator. — %&&%","title":"A short-circuit evaluation-like function similar to bash's && operator. — %&&%","text":"right-hand side (y) evaluated left-hand side (x) identical TRUE. Useful verbosity (verbose %&&% message(\"Hello world!\")).","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/grapes-and-and-grapes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A short-circuit evaluation-like function similar to bash's && operator. — %&&%","text":"","code":"x %&&% y"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/grapes-and-and-grapes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A short-circuit evaluation-like function similar to bash's && operator. — %&&%","text":"x logical scalar: left-hand side argument. y right-hand side expression.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/grapes-and-and-grapes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A short-circuit evaluation-like function similar to bash's && operator. — %&&%","text":"y x TRUE, else invisible(NULL)","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/grapes-and-and-grapes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A short-circuit evaluation-like function similar to bash's && operator. — %&&%","text":"","code":"TRUE %&&% message(\"printed\") #> printed FALSE %&&% message(\"not printed\")"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/graph_snn_fn.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute shared nearest neighbors (SNN) graph. — graph_snn_fn","title":"Compute shared nearest neighbors (SNN) graph. — graph_snn_fn","text":"Compute shared nearest neighbors (SNN) graph.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/graph_snn_fn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute shared nearest neighbors (SNN) graph. — graph_snn_fn","text":"","code":"graph_snn_fn(   sce,   snn_k,   snn_type,   dimred = \"pca\",   BPPARAM = BiocParallel::SerialParam() )"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/graph_snn_fn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute shared nearest neighbors (SNN) graph. — graph_snn_fn","text":"sce SingleCellExperiment object. snn_k integer scalar: number shared nearest neighbors, passed scran::buildSNNGraph() snn_type character scalar: type weighting scheme use SNN, passed scran::buildSNNGraph() dimred character scalar: name matrix reducedDim() used calculate SNN. BPPARAM BiocParallel::BiocParallelParam object.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/graph_snn_fn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute shared nearest neighbors (SNN) graph. — graph_snn_fn","text":"object class igraph. Output target: graph_snn","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/highlight_points.html","id":null,"dir":"Reference","previous_headings":"","what":"Highlight points belonging to certain levels. — highlight_points","title":"Highlight points belonging to certain levels. — highlight_points","text":"Highlighting means alpha value levels decreased.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/highlight_points.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Highlight points belonging to certain levels. — highlight_points","text":"","code":"highlight_points(p, column_name, levels, alpha_val = 0.1)"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/highlight_points.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Highlight points belonging to certain levels. — highlight_points","text":"p ggplot2 object. column_name character scalar: name column p levels read. levels character vector: levels highlight. alpha_val numeric scalar: alpha value set levels levels.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/highlight_points.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Highlight points belonging to certain levels. — highlight_points","text":"ggplot2 object.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/highlight_points.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Highlight points belonging to certain levels. — highlight_points","text":"","code":"p <- ggplot2::ggplot(   mtcars,   ggplot2::aes(x = cyl, y = mpg, color = factor(am)) ) +   ggplot2::geom_point() highlight_points(p, \"am\", \"0\", alpha_val = 0.25)"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/html_links.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a HTML link as <a><\/a> or in the form of image as <a><img /><\/a>. — create_a_link","title":"Generate a HTML link as <a><\/a> or in the form of image as <a><img /><\/a>. — create_a_link","text":"Generate HTML link <><\/> form image <><img /><\/>.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/html_links.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a HTML link as <a><\/a> or in the form of image as <a><img /><\/a>. — create_a_link","text":"","code":"create_a_link(   href,   text,   href_rel_start = NULL,   target = \"_blank\",   do_cat = FALSE,   ... )  create_img_link(   href,   img_src,   href_rel_start = NULL,   img_src_rel_start = NULL,   img_width = \"250px\",   img_height = \"\",   target = \"_blank\",   do_cat = FALSE,   ... )"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/html_links.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a HTML link as <a><\/a> or in the form of image as <a><img /><\/a>. — create_a_link","text":"href character scalar vector (create_img_link()): URL. text character scalar vector (create_img_link()): text link. href_rel_start character scalar: relative start href. See section Relative links. target character scalar: target parameter <> tag. do_cat logical scalar: TRUE, print (using cat()) result returning. ... Named parameters put resulting <> tag. img_src character scalar: path image. img_src_rel_start character scalar: href_rel_start, image. img_width, img_height character scalar: image size.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/html_links.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a HTML link as <a><\/a> or in the form of image as <a><img /><\/a>. — create_a_link","text":"character scalar.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/html_links.html","id":"relative-links","dir":"Reference","previous_headings":"","what":"Relative links","title":"Generate a HTML link as <a><\/a> or in the form of image as <a><img /><\/a>. — create_a_link","text":"Sometimes URL supplied href parameter absolute, relative output displayed. cases use href_rel_start parameter, allows make href relative something. example, saving plot file relative working directory, output/plots/plot.pdf, want include link file RMarkdown output, output/report.html. point view HTML file, output/plots/plot.pdf obviously exist. However, can use href_rel_start = \"output\" specify href relative directory, resulting link plots/plot.pdf. Thanks fs::path_rel(), used underhood, even non-children href can used, e.g. HTML located output/reports/report.html, href_rel_start = \"output/reports\" result link ../plots/plot.pdf.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/html_links.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a HTML link as <a><\/a> or in the form of image as <a><img /><\/a>. — create_a_link","text":"","code":"create_a_link(\"google.com\", \"Google\") #> [1] \"<a href='google.com' target='_blank' >Google<\/a>\" # If you want to reference a file relative to HTML saved in \"output/report.html\" create_a_link(\"output/plots/plot.pdf\", \"Link to plot\", href_rel_start = \"output\") #> [1] \"<a href='plots/plot.pdf' target='_blank' >Link to plot<\/a>\""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/hvg_int_list_fn.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a named list of HVG data (gene IDs, fit, metadata). — hvg_int_list_fn","title":"Get a named list of HVG data (gene IDs, fit, metadata). — hvg_int_list_fn","text":"Get named list HVG data (gene IDs, fit, metadata).","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/hvg_int_list_fn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a named list of HVG data (gene IDs, fit, metadata). — hvg_int_list_fn","text":"","code":"hvg_int_list_fn(   sce_int_multibatchnorm,   hvg_selection_value,   hvg_combination = c(\"hvg_metric\", \"intersection\", \"union\", \"all\"),   hvg_selection = c(\"top\", \"significance\", \"threshold\") )"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/hvg_int_list_fn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a named list of HVG data (gene IDs, fit, metadata). — hvg_int_list_fn","text":"sce_int_multibatchnorm (input target) SingleCellExperiment object processed batchelor::multiBatchNorm(). hvg_selection_value, hvg_combination, hvg_selection See sce_int_combine_hvgs().","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/hvg_int_list_fn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a named list of HVG data (gene IDs, fit, metadata). — hvg_int_list_fn","text":"named list. Output target: hvg_int_list","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/hvg_plot_int_fn.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a HVG plot for uncorrected SingleCellExperiment object (processed by batchelor::multiBatchNorm()). — hvg_plot_int_fn","title":"Make a HVG plot for uncorrected SingleCellExperiment object (processed by batchelor::multiBatchNorm()). — hvg_plot_int_fn","text":"Make HVG plot uncorrected SingleCellExperiment object (processed batchelor::multiBatchNorm()).","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/hvg_plot_int_fn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a HVG plot for uncorrected SingleCellExperiment object (processed by batchelor::multiBatchNorm()). — hvg_plot_int_fn","text":"","code":"hvg_plot_int_fn(sce_int_uncorrected, ...)"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/hvg_plot_int_fn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a HVG plot for uncorrected SingleCellExperiment object (processed by batchelor::multiBatchNorm()). — hvg_plot_int_fn","text":"sce_int_uncorrected (input target) tibble. ... Passed plot_hvg().","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/hvg_plot_int_fn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a HVG plot for uncorrected SingleCellExperiment object (processed by batchelor::multiBatchNorm()). — hvg_plot_int_fn","text":"modified sce_int_uncorrected appended HVG plot (ggplot2 object). Output target: hvg_plot_int","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/init_project.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize a new scdrake project. — init_project","title":"Initialize a new scdrake project. — init_project","text":"Initialize new scdrake project.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/init_project.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize a new scdrake project. — init_project","text":"","code":"init_project(   dir = \".\",   use_rstudio = TRUE,   set_active_project = TRUE,   set_wd = TRUE,   download_example_data = FALSE,   ask = TRUE,   verbose = getOption(\"scdrake_verbose\"),   ... )"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/init_project.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize a new scdrake project. — init_project","text":"dir character scalar: path directory project created. NULL, current working directory used (default: \".\"). Subdirectories created recursively. use_rstudio logical scalar: TRUE, initiate RStudio project inside dir. set_active_project logical scalar: TRUE, set active project dir. set_wd logical scalar: TRUE, change current working directory dir. download_example_data logical scalar: TRUE, download example PBMC 1k 3k data {dir}/example_data. See download_pbmc1k() download_pbmc3k() details datasets. ask logical scalar: TRUE, prompt overwrite existing project. verbose logical scalar: TRUE, verbose. default value obtained getOption(\"scdrake_verbose\"). ... Passed download_yq().","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/init_project.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Initialize a new scdrake project. — init_project","text":"function : Create project's root directory. (Optional) Switch current working directory project's root call ::i_am(). Copy config, RMarkdown, _drake_*.R files. Create empty .file. ensures package able find project's root directory case RStudio project initialized. Check whether yq tool available PATH environment variable. (Optional) Download example data using download_pbmc1k() download_pbmc3k(). (Optional) Initialize RStudio project set active project.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/init_project.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialize a new scdrake project. — init_project","text":"","code":"if (FALSE) { init_project(\"my_project\") }"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/int_diagnostics_df_fn.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute and make integration diagnostics and plots for each integration method. — int_diagnostics_df_fn","title":"Compute and make integration diagnostics and plots for each integration method. — int_diagnostics_df_fn","text":"Compute make integration diagnostics plots integration method.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/int_diagnostics_df_fn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute and make integration diagnostics and plots for each integration method. — int_diagnostics_df_fn","text":"","code":"int_diagnostics_df_fn(sce_int_clustering_df, sce_int_raw_snn_clustering)"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/int_diagnostics_df_fn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute and make integration diagnostics and plots for each integration method. — int_diagnostics_df_fn","text":"sce_int_clustering_df (input target) tibble. sce_int_raw_snn_clustering (input target) tibble.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/int_diagnostics_df_fn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute and make integration diagnostics and plots for each integration method. — int_diagnostics_df_fn","text":"tibble. Output target: int_diagnostics_df","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/integration_methods_df_fn.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a tibble with integration methods and their parameters. — integration_methods_df_fn","title":"Make a tibble with integration methods and their parameters. — integration_methods_df_fn","text":"Make tibble integration methods parameters.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/integration_methods_df_fn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a tibble with integration methods and their parameters. — integration_methods_df_fn","text":"","code":"integration_methods_df_fn(integration_methods, hvg_int, hvg_int_with_cc = NULL)"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/integration_methods_df_fn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a tibble with integration methods and their parameters. — integration_methods_df_fn","text":"integration_methods named list integration methods. See INTEGRATION_METHODS parameter 01_integration.yaml config details. hvg_int (input target) named list HVG data SingleCellExperiment object. Depending settings, may CC-related HVGs removed. hvg_int_with_cc (input target) NULL named list HVG data SingleCellExperiment object. Depending settings, may genes (including CC-related) included.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/integration_methods_df_fn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a tibble with integration methods and their parameters. — integration_methods_df_fn","text":"tibble. Output target: integration_methods_df","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/lapply_rows.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply a function over rows of a data.frame-like object and concatenate the results back to tibble or data.frame. — lapply_rows","title":"Apply a function over rows of a data.frame-like object and concatenate the results back to tibble or data.frame. — lapply_rows","text":"Inside FUN, row df available list scdrake_list() (default). FUN must return named list proper concatenation results. named list can also contain elements length one, wrapped list().","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/lapply_rows.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply a function over rows of a data.frame-like object and concatenate the results back to tibble or data.frame. — lapply_rows","text":"","code":"lapply_rows(df, as_scdrake_list = TRUE, return_tibble = TRUE, FUN, ...)"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/lapply_rows.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply a function over rows of a data.frame-like object and concatenate the results back to tibble or data.frame. — lapply_rows","text":"df data.frame-like object. as_scdrake_list logical scalar: TRUE, row-list FUN converted scdrake_list(). return_tibble TRUE, tibble concatenated results returned. Otherwise results coerced data.frame original rownames set. FUN function apply df rows. ... Additional arguments passed FUN.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/lapply_rows.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply a function over rows of a data.frame-like object and concatenate the results back to tibble or data.frame. — lapply_rows","text":"tibble data.frame according return_tibble parameter.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/lapply_rows.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply a function over rows of a data.frame-like object and concatenate the results back to tibble or data.frame. — lapply_rows","text":"","code":"library(magrittr)  fn <- function(row_list) {   row_list$cyl_2 <- row_list$cyl**2   row_list$colors <- c(\"red\", \"green\", \"blue\")   row_list$sublist <- mtcars[1:5, 1:5]   return(row_list) }  df <- lapply_rows(mtcars, FUN = fn) head(df) #> # A tibble: 6 × 14 #>     mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb cyl_2 colors #>   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <list> #> 1  21       6   160   110  3.9   2.62  16.5     0     1     4     4    36 <chr>  #> 2  21       6   160   110  3.9   2.88  17.0     0     1     4     4    36 <chr>  #> 3  22.8     4   108    93  3.85  2.32  18.6     1     1     4     1    16 <chr>  #> 4  21.4     6   258   110  3.08  3.22  19.4     1     0     3     1    36 <chr>  #> 5  18.7     8   360   175  3.15  3.44  17.0     0     0     3     2    64 <chr>  #> 6  18.1     6   225   105  2.76  3.46  20.2     1     0     3     1    36 <chr>  #> # … with 1 more variable: sublist <list>  df2 <- lapply_rows(mtcars, return_tibble = FALSE, FUN = fn) head(df2) #>                    mpg cyl disp  hp drat    wt  qsec vs am gear carb cyl_2 #> Mazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4    36 #> Mazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4    36 #> Datsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1    16 #> Hornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1    36 #> Hornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2    64 #> Valiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1    36 #>                             colors #> Mazda RX4         red, green, blue #> Mazda RX4 Wag     red, green, blue #> Datsun 710        red, green, blue #> Hornet 4 Drive    red, green, blue #> Hornet Sportabout red, green, blue #> Valiant           red, green, blue #>                                                                                                                                                                                        sublist #> Mazda RX4         21.00, 21.00, 22.80, 21.40, 18.70, 6.00, 6.00, 4.00, 6.00, 8.00, 160.00, 160.00, 108.00, 258.00, 360.00, 110.00, 110.00, 93.00, 110.00, 175.00, 3.90, 3.90, 3.85, 3.08, 3.15 #> Mazda RX4 Wag     21.00, 21.00, 22.80, 21.40, 18.70, 6.00, 6.00, 4.00, 6.00, 8.00, 160.00, 160.00, 108.00, 258.00, 360.00, 110.00, 110.00, 93.00, 110.00, 175.00, 3.90, 3.90, 3.85, 3.08, 3.15 #> Datsun 710        21.00, 21.00, 22.80, 21.40, 18.70, 6.00, 6.00, 4.00, 6.00, 8.00, 160.00, 160.00, 108.00, 258.00, 360.00, 110.00, 110.00, 93.00, 110.00, 175.00, 3.90, 3.90, 3.85, 3.08, 3.15 #> Hornet 4 Drive    21.00, 21.00, 22.80, 21.40, 18.70, 6.00, 6.00, 4.00, 6.00, 8.00, 160.00, 160.00, 108.00, 258.00, 360.00, 110.00, 110.00, 93.00, 110.00, 175.00, 3.90, 3.90, 3.85, 3.08, 3.15 #> Hornet Sportabout 21.00, 21.00, 22.80, 21.40, 18.70, 6.00, 6.00, 4.00, 6.00, 8.00, 160.00, 160.00, 108.00, 258.00, 360.00, 110.00, 110.00, 93.00, 110.00, 175.00, 3.90, 3.90, 3.85, 3.08, 3.15 #> Valiant           21.00, 21.00, 22.80, 21.40, 18.70, 6.00, 6.00, 4.00, 6.00, 8.00, 160.00, 160.00, 108.00, 258.00, 360.00, 110.00, 110.00, 93.00, 110.00, 175.00, 3.90, 3.90, 3.85, 3.08, 3.15"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/list_names_to_values.html","id":null,"dir":"Reference","previous_headings":"","what":"Append names of a list of lists as values in each sublist. — list_names_to_values","title":"Append names of a list of lists as values in each sublist. — list_names_to_values","text":"Append names list lists values sublist.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/list_names_to_values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Append names of a list of lists as values in each sublist. — list_names_to_values","text":"","code":"list_names_to_values(l, key = \"name\")"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/list_names_to_values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Append names of a list of lists as values in each sublist. — list_names_to_values","text":"l named list lists. key character scalar: name item names outer list appended.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/list_names_to_values.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Append names of a list of lists as values in each sublist. — list_names_to_values","text":"named list lists.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/list_names_to_values.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Append names of a list of lists as values in each sublist. — list_names_to_values","text":"","code":"list_names_to_values(list(a = list(1), b = list(c = 3))) #> $a #> $a[[1]] #> [1] 1 #>  #> $a$name #> [1] \"a\" #>  #>  #> $b #> $b$c #> [1] 3 #>  #> $b$name #> [1] \"b\" #>  #>"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/lists_to_tibble.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert list of lists to tibble. — lists_to_tibble","title":"Convert list of lists to tibble. — lists_to_tibble","text":"Convert list lists tibble.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/lists_to_tibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert list of lists to tibble. — lists_to_tibble","text":"","code":"lists_to_tibble(l, do_replace_list_nulls = TRUE, do_bind_rows = TRUE)"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/lists_to_tibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert list of lists to tibble. — lists_to_tibble","text":"l list lists. do_replace_list_nulls logical scalar: TRUE, first replace NULL items sublist NAs. do_bind_rows logical scalar: TRUE, bind tibbles rows, otherwise return list tibbles.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/lists_to_tibble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert list of lists to tibble. — lists_to_tibble","text":"See do_bind_rows argument.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/lists_to_tibble.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert list of lists to tibble. — lists_to_tibble","text":"","code":"lists_to_tibble(list(list(a = 1, b = 2), list(b = 3, a = 4, c = 5))) #> # A tibble: 2 × 3 #>       a     b     c #>   <dbl> <dbl> <dbl> #> 1     1     2    NA #> 2     4     3     5 lists_to_tibble(list(list(a = 1, b = 2), list(b = 3, a = 4, c = 5)), do_bind_rows = FALSE) #> [[1]] #> # A tibble: 1 × 2 #>       a     b #>   <dbl> <dbl> #> 1     1     2 #>  #> [[2]] #> # A tibble: 1 × 3 #>       b     a     c #>   <dbl> <dbl> <dbl> #> 1     3     4     5 #>"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/load_config.html","id":null,"dir":"Reference","previous_headings":"","what":"Load a YAML config file as scdrake_list. — load_config","title":"Load a YAML config file as scdrake_list. — load_config","text":"load_config() loads single YAML file scdrake_list(). load_pipeline_config(), load_single_samples_configs(), load_integration_configs() load specific config group (pipeline, single-sample, integration) return named list scdrake_lists.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/load_config.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load a YAML config file as scdrake_list. — load_config","text":"","code":"load_config(   yaml_file,   other_variables = NULL,   eval_code = TRUE,   verbose = getOption(\"scdrake_verbose\") )  load_pipeline_config(   dir = getOption(\"scdrake_pipeline_config_dir\"),   process = TRUE,   ... )  load_single_sample_configs(   dir = getOption(\"scdrake_single_sample_config_dir\"),   cfg_pipeline = NULL,   process = TRUE,   ... )  load_integration_configs(   dir = getOption(\"scdrake_integration_config_dir\"),   cfg_pipeline = NULL,   process = TRUE,   ... )"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/load_config.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load a YAML config file as scdrake_list. — load_config","text":"yaml_file character scalar: path YAML file. other_variables list variables whose environment yaml_file evaluated, see details . eval_code logical scalar: TRUE, evaluate code parameters yaml_file whose value starts !code . verbose logical scalar: TRUE, verbose. default value obtained getOption(\"scdrake_verbose\"). dir character scalar: load_pipeline_config(): path directory pipeline.yaml file. load_single_sample_config(): path directory 00_main.yaml, 01_input_qc.yaml, 02_norm_clustering.yaml, cluster_markers.yaml, contrasts.yaml files. load_integration_config(): path directory 00_main.yaml, 01_integration.yaml, 02_int_clustering.yaml, cluster_markers.yaml, contrasts.yaml files. process logical scalar: TRUE, internally process loaded config. always needed prior sending config functions generating drake plan, cases useful see raw config. ... Passed load_config(). cfg_pipeline scdrake_list object: pipeline config (see load_pipeline_config()) obtained pipeline.yaml file located pipeline config directory.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/load_config.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load a YAML config file as scdrake_list. — load_config","text":"scdrake_list() parameters loaded YAML file, named list lists.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/load_config.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Load a YAML config file as scdrake_list. — load_config","text":"Except load_pipeline_config(), can refer variables pipeline.yaml 00_main.yaml configs inside individual configs. example, can use CLUSTER_SC3_N_CORES: !code DRAKE_N_JOBS 02_norm_clustering.yaml.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/load_config.html","id":"evaluating-code-inside-yaml-files","dir":"Reference","previous_headings":"","what":"Evaluating code inside YAML files","title":"Load a YAML config file as scdrake_list. — load_config","text":"parameters yaml_file whose value starts !code evaluated R code. can reference parameters yaml_file, variables individual lists other_variables list. Note reference !code parameters already evaluated runtime. example YAML file:   VAR_2 10. VAR_4_1 \"APPLE\". VAR_5_1 6. VAR_5_2 numeric vector. VAR_6 throw error, VAR_2 still unevaluated, R try add 10 character scalar. Note VAR_5 contains single named list, structure used quite often scdrake configs. keep eye proper indentation :)","code":"VAR_1: 5 VAR_2: !code VAR_1 + 5 VAR_3: \"apple\" VAR_4:   VAR_4_1: !code str_upper(VAR_3) VAR_5:   - VAR_5_1:       a: !code VAR_1 + 1     VAR_5_2:       b: !code 1:10 VAR_6: !code VAR_2 + 10"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/load_config.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load a YAML config file as scdrake_list. — load_config","text":"","code":"# If a scdrake project is in the current working directory. if (FALSE) { cfg_1 <- load_config(\"config/pipeline.yaml\") cfg_2 <- load_config(   \"config/single_sample/00_main.yaml\",   other_variables = cfg_1 ) }  if (FALSE) { pipeline_config <- load_pipeline_config() pipeline_config_other <- load_pipeline_config(\"some/other/dir/config.yaml\") }  if (FALSE) { single_sample_config <- load_single_sample_configs() single_sample_config_other <- load_single_sample_configs(\"some/other/dir\") }  if (FALSE) { integration_config <- load_integration_configs() single_sample_config_other <- load_integration_configs(\"some/other/dir\") }"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/load_custom_plan.html","id":null,"dir":"Reference","previous_headings":"","what":"Source a file returning a custom drake plan. — load_custom_plan","title":"Source a file returning a custom drake plan. — load_custom_plan","text":"function used drakes init scripts _drake_single_sample.R _drake_integration.R. sources R script (plan_custom.R default) must return drake::drake_plan() object. R script, variables defined init script available, mainly cfg cfg_pipeline lists holding pipeline parameters. time, variables locked modified file script.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/load_custom_plan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Source a file returning a custom drake plan. — load_custom_plan","text":"","code":"load_custom_plan(   file = getOption(\"scdrake_plan_custom_file\"),   envir = parent.frame() )"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/load_custom_plan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Source a file returning a custom drake plan. — load_custom_plan","text":"file character scalar: path R script returning drake::drake_plan(). envir environment R script sourced (defaults caller env).","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/load_custom_plan.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Source a file returning a custom drake plan. — load_custom_plan","text":"drake::drake_plan() object (tibble).","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/make_gene_annotation.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a dataframe with annotation of SCE object's genes using an AnnotationDbi package. — make_gene_annotation","title":"Create a dataframe with annotation of SCE object's genes using an AnnotationDbi package. — make_gene_annotation","text":"following columns retrieved AnnotationDbi package: SYMBOL, GENENAME, ENTREZID. Multi-mapping entities collapsed \",\" (.e. single ENSEMBL ID multiple symbols, etc.). Unknown symbols replaced corresponding ENSEMBL IDs.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/make_gene_annotation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a dataframe with annotation of SCE object's genes using an AnnotationDbi package. — make_gene_annotation","text":"","code":"make_gene_annotation(sce, annotation_db_file)"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/make_gene_annotation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a dataframe with annotation of SCE object's genes using an AnnotationDbi package. — make_gene_annotation","text":"sce SingleCellExperiment object. annotation_db_file character scalar: path SQLite file annotation DB, e.g. org.Hs.eg.db$conn@dbname.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/make_gene_annotation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a dataframe with annotation of SCE object's genes using an AnnotationDbi package. — make_gene_annotation","text":"dataframe annotation.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/make_kmeans_gaps_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a plot of k-means gaps. — make_kmeans_gaps_plot","title":"Make a plot of k-means gaps. — make_kmeans_gaps_plot","text":"details see chapter OSCA.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/make_kmeans_gaps_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a plot of k-means gaps. — make_kmeans_gaps_plot","text":"","code":"make_kmeans_gaps_plot(kmeans_gaps, best_k)"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/make_kmeans_gaps_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a plot of k-means gaps. — make_kmeans_gaps_plot","text":"kmeans_gaps output cluster::clusGap(). best_k numeric scalar: best k k-means calculated cluster::maxSE().","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/make_kmeans_gaps_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a plot of k-means gaps. — make_kmeans_gaps_plot","text":"ggplot object.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/make_pca_selected_pcs_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a plot showing numbers of selected PCs from all strategies. — make_pca_selected_pcs_plot","title":"Make a plot showing numbers of selected PCs from all strategies. — make_pca_selected_pcs_plot","text":"Make plot showing numbers selected PCs strategies.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/make_pca_selected_pcs_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a plot showing numbers of selected PCs from all strategies. — make_pca_selected_pcs_plot","text":"","code":"make_pca_selected_pcs_plot(   pca_percent_var,   pca_elbow_pcs,   pca_gene_var_pcs,   pca_forced_pcs )"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/make_pca_selected_pcs_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a plot showing numbers of selected PCs from all strategies. — make_pca_selected_pcs_plot","text":"pca_percent_var percentage variance explained PC. Obtained attr(reducedDim(sce_pca, \"pca\"), \"percentVar\"). pca_elbow_pcs numeric scalar: number PCs selected elbow point strategy. pca_gene_var_pcs numeric scalar: number PCs selected technical noise strategy. pca_forced_pcs numeric scalar: constant number PCs defined config file.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/make_pca_selected_pcs_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a plot showing numbers of selected PCs from all strategies. — make_pca_selected_pcs_plot","text":"ggplot object.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/marker_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a heatmap of cell clusters. — marker_heatmap","title":"Make a heatmap of cell clusters. — marker_heatmap","text":"Make heatmap cell clusters.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/marker_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a heatmap of cell clusters. — marker_heatmap","text":"","code":"marker_heatmap(   seu,   markers,   groups,   assay = \"RNA\",   slot = \"data\",   top_n = 5,   top_n_wt = \"fdr\",   title = \"Heatmap\",   subtitle = \"\",   fill_scale = ggplot2::scale_fill_gradient(low = \"white\", high = \"red\"),   y_text_size = 8,   angle = 0,   ... )"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/marker_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a heatmap of cell clusters. — marker_heatmap","text":"seu Seurat object. markers dataframe markers (returned scran_markers()) character vector gene SYMBOLs. groups character vector: assignment cells groups (clusters). assay, slot, angle, ... Passed Seurat::DoHeatmap(). top_n, top_n_wt Passed filter_markers(). top_n NULL, markers markers used (SYMBOL column case markers dataframe-like object). top_n numeric, markers must dataframe-like object. title character scalar: heatmap title. subtitle character scalar: heatmap subtitle. fill_scale Scale object ggplot2, e.g. ggplot2::scale_fill_gradient(low = \"white\", high = \"red\") (default). y_text_size numeric scalar: text size y-axe heatmap.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/marker_heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a heatmap of cell clusters. — marker_heatmap","text":"named list.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/marker_heatmaps_wrapper.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a heatmap of global or contrast markers. — marker_heatmaps_wrapper","title":"Make a heatmap of global or contrast markers. — marker_heatmaps_wrapper","text":"Make heatmap global contrast markers.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/marker_heatmaps_wrapper.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a heatmap of global or contrast markers. — marker_heatmaps_wrapper","text":"","code":"marker_heatmaps_wrapper(   seu,   params,   marker_type = c(\"global\", \"contrast\"),   save = TRUE,   return_type = c(\"file\", \"tibble\") )"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/marker_heatmaps_wrapper.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a heatmap of global or contrast markers. — marker_heatmaps_wrapper","text":"seu Seurat object. params tibble. See cluster_markers_heatmap_params contrasts_heatmap_params target details. marker_type character scalar. save logical scalar. TRUE, heatmap saved params$out_file. return_type character scalar. \"file\", return params$out_file. \"tibble\", return modified params tibble appended list columns: heatmaps: contains named lists heatmap objects (p_heatmap, p_heatmap_z_score) markers_top: dataframe top markers used heatmap generation.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/marker_heatmaps_wrapper.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a heatmap of global or contrast markers. — marker_heatmaps_wrapper","text":"See return_type argument.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/marker_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a marker plot. — marker_plot","title":"Make a marker plot. — marker_plot","text":"marker plot composed : Two plots dimred: one colored clustering, second colored expression marker (feature plot). plot summarized marker expression: proportion cells expressing marker, colored average expression. violin plot: expression marker cluster.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/marker_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a marker plot. — marker_plot","text":"","code":"marker_plot(   sce,   dimred_name,   gene_ensembl_id,   group,   cluster_plot_title = NULL,   cluster_plot_subtitle = NULL,   cluster_plot_legend_title = NULL,   cluster_plot_label = TRUE,   cluster_plot_point_size = 1,   feature_plot_point_size = 1,   vln_plot_legend_title = NULL )"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/marker_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a marker plot. — marker_plot","text":"sce SingleCellExperiment object. dimred_name character scalar. gene_ensembl_id character scalar. ENSEMBL ID marker. group character scalar: name column colData(sce) cells separated (e.g. clustering). character vector factor: assignment cells groups (clusters). Must length number cells (columns) sce. cluster_plot_title, cluster_plot_subtitle, cluster_plot_legend_title, cluster_plot_label character scalar. Applied dimred plot colored group. cluster_plot_point_size numeric scalar. feature_plot_point_size numeric scalar. Applied feature plot. vln_plot_legend_title character scalar. Applied violin plot.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/marker_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a marker plot. — marker_plot","text":"patchwork object.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/markers_dimred_plots.html","id":null,"dir":"Reference","previous_headings":"","what":"Make dimred plots for each marker source defined in CLUSTER_MARKERS_SOURCES (cluster_markers.yaml config)\nor CONTRASTS_SOURCES (contrasts.yaml config). — markers_dimred_plots","title":"Make dimred plots for each marker source defined in CLUSTER_MARKERS_SOURCES (cluster_markers.yaml config)\nor CONTRASTS_SOURCES (contrasts.yaml config). — markers_dimred_plots","text":"Make dimred plots marker source defined CLUSTER_MARKERS_SOURCES (cluster_markers.yaml config) CONTRASTS_SOURCES (contrasts.yaml config).","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/markers_dimred_plots.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make dimred plots for each marker source defined in CLUSTER_MARKERS_SOURCES (cluster_markers.yaml config)\nor CONTRASTS_SOURCES (contrasts.yaml config). — markers_dimred_plots","text":"","code":"markers_dimred_plots(sce_final_norm_clustering, markers_dimred_plots_params)"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/markers_dimred_plots.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make dimred plots for each marker source defined in CLUSTER_MARKERS_SOURCES (cluster_markers.yaml config)\nor CONTRASTS_SOURCES (contrasts.yaml config). — markers_dimred_plots","text":"sce_final_norm_clustering SingleCellExperiment object computed dimreds clusterings. markers_dimred_plots_params tibble. See cluster_markers_dimred_plot_params contrasts_dimred_plot_params details.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/markers_dimred_plots.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make dimred plots for each marker source defined in CLUSTER_MARKERS_SOURCES (cluster_markers.yaml config)\nor CONTRASTS_SOURCES (contrasts.yaml config). — markers_dimred_plots","text":"modified markers_dimred_plots_params tibble appended plot column (list ggplot2 objects). See cluster_markers_dimred_plots contrasts_dimred_plots target details.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/markers_dimred_plots_files.html","id":null,"dir":"Reference","previous_headings":"","what":"Save dimred plots. — markers_dimred_plots_files","title":"Save dimred plots. — markers_dimred_plots_files","text":"Save dimred plots.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/markers_dimred_plots_files.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save dimred plots. — markers_dimred_plots_files","text":"","code":"markers_dimred_plots_files(   markers_dimred_plots,   markers_dimred_plots_base_out_dir )"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/markers_dimred_plots_files.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save dimred plots. — markers_dimred_plots_files","text":"markers_dimred_plots tibble. See cluster_markers_dimred_plots contrasts_dimred_plots details. markers_dimred_plots_base_out_dir character scalar: path base output directory save dimred plots .","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/markers_dimred_plots_files.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Save dimred plots. — markers_dimred_plots_files","text":"modified markers_dimred_plots tibble appended out_file column. See cluster_markers_dimred_plots_files contrasts_dimred_plots_files target details.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/markers_for_tables.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a table used in HTML report of marker results. — markers_for_tables","title":"Make a table used in HTML report of marker results. — markers_for_tables","text":"combines marker statistics, parameters, dimred plots, links heatmaps.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/markers_for_tables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a table used in HTML report of marker results. — markers_for_tables","text":"","code":"markers_for_tables(   markers_out,   markers_heatmaps_df,   markers_plots_top,   markers_dimred_plots_files,   out_dir,   ensembl_species = \"Homo_sapiens\",   ... )"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/markers_for_tables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a table used in HTML report of marker results. — markers_for_tables","text":"markers_out tibble. See cluster_markers_out contrasts_out target details. markers_heatmaps_df tibble. See cluster_markers_heatmaps_df contrasts_heatmaps_df details. markers_plots_top tibble. See cluster_markers_plots_top contrasts_plots_top details. markers_dimred_plots_files tibble. See cluster_markers_dimred_plots_files contrasts_dimred_plots_files details. out_dir character scalar: path base output directory save HTML tables . Files subdirectories created : <source_name>/<source_name>_<test_type>_<group_level>.html cluster markers. Example: markers_cluster_kmeans_k4/markers_cluster_kmeans_k4_t_1.html <source_name>/<source_name>_<test_type>_<target_level>_vs_<reference_level>.html contrasts. Example: dea_cluster_louvain_annotated/dea_cluster_louvain_annotated_binom_cl3_vs_cl4.html ensembl_species character scalar: passed add_marker_table_links(). ... Currently used.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/markers_for_tables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a table used in HTML report of marker results. — markers_for_tables","text":"tibble. See cluster_markers_for_tables contrasts_for_tables details.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/markers_plots_files.html","id":null,"dir":"Reference","previous_headings":"","what":"Make plots of top markers. — markers_plots_files","title":"Make plots of top markers. — markers_plots_files","text":"Make plots top markers.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/markers_plots_files.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make plots of top markers. — markers_plots_files","text":"","code":"markers_plots_files(   sce_dimred,   markers_plots_top,   save = TRUE,   dry = FALSE,   return_type = c(\"file\", \"plot\", \"tibble\") )"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/markers_plots_files.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make plots of top markers. — markers_plots_files","text":"sce_dimred SingleCellExperiment object computed dimreds. markers_plots_top tibble, output markers_plots_top(). See cluster_markers_plots_top contrasts_plots_top target details. save logical scalar: TRUE, save plot markers_top$out_file. dry logical scalar: TRUE, make plots just create empty files. return_type character scalar: \"file\": return markers_top$out_file. \"plot\": return list marker plots. \"tibble\": return modified markers_plots_top tibble appended marker_plot column (list marker plots).","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/markers_plots_files.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make plots of top markers. — markers_plots_files","text":"See return_type argument. See cluster_markers_plots_files contrasts_plots_files target details.","code":""},{"path":[]},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/markers_plots_top.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a tibble of top markers extracted from each test result. — markers_plots_top","title":"Get a tibble of top markers extracted from each test result. — markers_plots_top","text":"basically unnesting filtered markers row markers_processed. filtering based top_n_plot top_n_wt_plot columns markers_plot_params.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/markers_plots_top.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a tibble of top markers extracted from each test result. — markers_plots_top","text":"","code":"markers_plots_top(   markers_processed,   markers_plot_params,   out_dir,   marker_type = c(\"global\", \"contrast\") )"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/markers_plots_top.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a tibble of top markers extracted from each test result. — markers_plots_top","text":"markers_processed tibble. See cluster_markers_processed contrasts target details. markers_plot_params tibble. See cluster_markers_plot_params contrasts_plot_params details. out_dir character scalar: path base output directory plots. Subdirectories plot files created <clustering_name>/<dimred>/<ENSEMBL>_<SYMBOL>_<clustering_name>_<dimred>.pdf. marker_type character scalar.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/markers_plots_top.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a tibble of top markers extracted from each test result. — markers_plots_top","text":"tibble. See cluster_markers_plots_top contrasts_plots_top target details.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/markers_table_files.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare a table with markers and render a HTML report from RMarkdown template. — markers_table_files","title":"Prepare a table with markers and render a HTML report from RMarkdown template. — markers_table_files","text":"Prepare table markers render HTML report RMarkdown template.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/markers_table_files.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare a table with markers and render a HTML report from RMarkdown template. — markers_table_files","text":"","code":"markers_table_files(   markers_for_tables,   rmd_template,   marker_type = c(\"global\", \"contrast\"),   drake_cache_dir = \".drake\" )"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/markers_table_files.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare a table with markers and render a HTML report from RMarkdown template. — markers_table_files","text":"markers_for_tables tibble. File paths column out_file used save rendered HTML files. See cluster_markers_for_tables contrasts_for_tables target details. rmd_template character scalar: path RMarkdown file. marker_type character scalar. drake_cache_dir character scalar: path drake cache directory.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/markers_table_files.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare a table with markers and render a HTML report from RMarkdown template. — markers_table_files","text":"character vector: markers_for_tables$out_file.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/md_header.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a Markdown header. — md_header","title":"Generate a Markdown header. — md_header","text":"Generate Markdown header.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/md_header.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a Markdown header. — md_header","text":"","code":"md_header(text, heading, extra = \"\", do_cat = TRUE)"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/md_header.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a Markdown header. — md_header","text":"text character scalar: text header. heading numeric scalar: level header, , result \"#\" times heading. extra character scalar: content put text, e.g. \"{.tabset}\" tabbed heading. do_cat logical scalar: TRUE, print (using cat()) result returning.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/md_header.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a Markdown header. — md_header","text":"character scalar.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/merge_sce_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge metadata() of multiple SingleCellExperiment object. — merge_sce_metadata","title":"Merge metadata() of multiple SingleCellExperiment object. — merge_sce_metadata","text":"Merge metadata() multiple SingleCellExperiment object.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/merge_sce_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge metadata() of multiple SingleCellExperiment object. — merge_sce_metadata","text":"","code":"merge_sce_metadata(sce_list, what, as_vector = TRUE, as_named_list = FALSE)"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/merge_sce_metadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge metadata() of multiple SingleCellExperiment object. — merge_sce_metadata","text":"sce_list list SingleCellExperiment objects. character scalar: name item merge. as_vector logical scalar: TRUE, return vector merged values. as_named_list logical scalar: TRUE, return named list name equal .","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/merge_sce_metadata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge metadata() of multiple SingleCellExperiment object. — merge_sce_metadata","text":"vector list.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/meta_heatmap_ploting.html","id":null,"dir":"Reference","previous_headings":"","what":"Manual annotation heatmap plotting — meta_heatmap_ploting","title":"Manual annotation heatmap plotting — meta_heatmap_ploting","text":"Manual annotation heatmap plotting","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/meta_heatmap_ploting.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Manual annotation heatmap plotting — meta_heatmap_ploting","text":"","code":"meta_heatmap_ploting(   sce,   clus_cor_method = \"pearson\",   clus_cluster_method = \"complete\",   values_cor_method = \"pearson\",   values_cluster_method = \"complete\",   clustering,   show_value = \"value\",   gradient_midpoint = 0,   gradient_limits = NULL,   x_text_size = 10,   x_text_angle = 45,   y_text_size = 10,   strip_text_size = 8,   low = \"blue\",   mid = \"white\",   high = \"red\",   spatial = FALSE,   dimred = dimred,   make_cell_plot = FALSE,   out_dir = NULL )"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/meta_heatmap_ploting.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Manual annotation heatmap plotting — meta_heatmap_ploting","text":"sce SingleCellAnnotation object clustering Selected clustering spatial Logical vector, include spot images anotation make_cell_plot Logical vector, include pseudotissue images, spatial extension","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/na_empty.html","id":null,"dir":"Reference","previous_headings":"","what":"Return NA if an object is empty. — na_empty","title":"Return NA if an object is empty. — na_empty","text":"Return NA object empty.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/na_empty.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return NA if an object is empty. — na_empty","text":"","code":"na_empty(x)"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/na_empty.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return NA if an object is empty. — na_empty","text":"x object.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/na_empty.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return NA if an object is empty. — na_empty","text":"NA x empty (length(x) == 0), otherwise x.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/na_empty.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return NA if an object is empty. — na_empty","text":"","code":"na_empty(integer()) #> [1] NA"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/pca_phase_plots_fn.html","id":null,"dir":"Reference","previous_headings":"","what":"Make dimred plots of PCA colored by cell cycle phase. — pca_phase_plots_fn","title":"Make dimred plots of PCA colored by cell cycle phase. — pca_phase_plots_fn","text":"HVG selection performed removal CC-related genes, list two plots returned - one PCA performed genes, second one without CC-related genes.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/pca_phase_plots_fn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make dimred plots of PCA colored by cell cycle phase. — pca_phase_plots_fn","text":"","code":"pca_phase_plots_fn(sce_pca)"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/pca_phase_plots_fn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make dimred plots of PCA colored by cell cycle phase. — pca_phase_plots_fn","text":"sce_pca (input target) SingleCellExperiment object.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/pca_phase_plots_fn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make dimred plots of PCA colored by cell cycle phase. — pca_phase_plots_fn","text":"list one two ggplot2 objects. Output target: pca_phase_plots","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/plotReducedDim_mod.html","id":null,"dir":"Reference","previous_headings":"","what":"A wrapper around scater::plotReducedDim(). — plotReducedDim_mod","title":"A wrapper around scater::plotReducedDim(). — plotReducedDim_mod","text":"wrapper around scater::plotReducedDim().","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/plotReducedDim_mod.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A wrapper around scater::plotReducedDim(). — plotReducedDim_mod","text":"","code":"plotReducedDim_mod(   sce,   dimred,   colour_by = NULL,   point_size = 1,   point_alpha = 0.8,   title = \"\",   subtitle = \"\",   use_default_ggplot_palette = TRUE,   colour_gradient = list(low = \"lightgrey\", high = \"blue\"),   legend_title = NULL,   add_cells_per_cluster = TRUE,   ... )"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/plotReducedDim_mod.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A wrapper around scater::plotReducedDim(). — plotReducedDim_mod","text":"sce SingleCellExperiment object. dimred, colour_by, point_size, point_alpha, ... Passed scater::plotReducedDim(). title, subtitle, legend_title character scalar. use_default_ggplot_palette logical scalar: TRUE, use default ggplot2 palette (ggplot2::scale_color_hue()). colour_gradient named list low high colors continuous variables. add_cells_per_cluster logical scalar: TRUE colour_by variable (coercible ) factor, add number cells per level color legend labels.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/plotReducedDim_mod.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A wrapper around scater::plotReducedDim(). — plotReducedDim_mod","text":"ggplot2 object.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/plot_clustree.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot clustering tree. — plot_clustree","title":"Plot clustering tree. — plot_clustree","text":"clustree::clustree() used hood.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/plot_clustree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot clustering tree. — plot_clustree","text":"","code":"plot_clustree(   cluster_list,   params,   prefix,   title = deparse(substitute(cluster_list)),   edge_arrow = FALSE,   highlight_core = TRUE,   ... )"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/plot_clustree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot clustering tree. — plot_clustree","text":"cluster_list named list vectors. params vector clustering parameters (resolutions, ks) order cluster_list. prefix, edge_arrow, highlight_core, ... Passed clustree::clustree(). title character scalar: plot title.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/plot_clustree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot clustering tree. — plot_clustree","text":"ggplot object.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/plot_colData.html","id":null,"dir":"Reference","previous_headings":"","what":"A wrapper for scater::plotColData(). — plot_colData","title":"A wrapper for scater::plotColData(). — plot_colData","text":"Can add title, scales number logical level (TRUE, FALSE) used coloring.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/plot_colData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A wrapper for scater::plotColData(). — plot_colData","text":"","code":"plot_colData(   ...,   title = \"\",   scale_x = NULL,   scale_y = NULL,   add_logical_counts = TRUE )"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/plot_colData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A wrapper for scater::plotColData(). — plot_colData","text":"... Parameters passed scater::plotColData(). title characater scalr: main title plot. scale_x, scale_y ggplot2 scale, e.g. ggplot2::scale_x_log10(). add_logical_counts logical scalar: TRUE, add number logical level (TRUE, FALSE) used coloring.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/plot_colData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A wrapper for scater::plotColData(). — plot_colData","text":"ggplot2 object.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/plot_hvg.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot average expression vs. HVG metrics (total, bio, and technical variance) and highlight HVGs. — plot_hvg","title":"Plot average expression vs. HVG metrics (total, bio, and technical variance) and highlight HVGs. — plot_hvg","text":"Plot average expression vs. HVG metrics (total, bio, technical variance) highlight HVGs.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/plot_hvg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot average expression vs. HVG metrics (total, bio, and technical variance) and highlight HVGs. — plot_hvg","text":"","code":"plot_hvg(sce, ...)"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/plot_hvg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot average expression vs. HVG metrics (total, bio, and technical variance) and highlight HVGs. — plot_hvg","text":"sce SingleCellExperiment object HVG metadata. ... Currently used.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/plot_hvg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot average expression vs. HVG metrics (total, bio, and technical variance) and highlight HVGs. — plot_hvg","text":"ggplot2 object hvg_metric sctransform, otherwise patchwork object.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/plot_hvg_fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot fit of a HVG metric and highlight HVGs. — plot_hvg_fit","title":"Plot fit of a HVG metric and highlight HVGs. — plot_hvg_fit","text":"Plot fit HVG metric highlight HVGs.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/plot_hvg_fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot fit of a HVG metric and highlight HVGs. — plot_hvg_fit","text":"","code":"plot_hvg_fit(sce, y = c(\"var\", \"cv2\"))"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/plot_hvg_fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot fit of a HVG metric and highlight HVGs. — plot_hvg_fit","text":"sce SingleCellExperiment object HVG metadata. y character scalar: column HVG fit DataFrame plot y-axe. var cv2 hvg_metric gene_var gene_cv2, respectively.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/plot_hvg_fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot fit of a HVG metric and highlight HVGs. — plot_hvg_fit","text":"Invisibly NULL (drawing graphical device).","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/plot_spat_point_layer_ggplot.html","id":null,"dir":"Reference","previous_headings":"","what":"A function for pseudotissue visualization — plot_spat_point_layer_ggplot","title":"A function for pseudotissue visualization — plot_spat_point_layer_ggplot","text":"Adapted function Giotto package Dries et al, 2021, rewrite use scdrake package SingleCellExperiment object.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/plot_spat_point_layer_ggplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function for pseudotissue visualization — plot_spat_point_layer_ggplot","text":"","code":"plot_spat_point_layer_ggplot(   ggobject,   sdimx = NULL,   sdimy = NULL,   cell_locations_metadata_selected,   cell_locations_metadata_other,   cell_color = NULL,   color_as_factor = T,   cell_color_code = NULL,   cell_color_gradient = c(\"yellow\", \"white\", \"red\"),   gradient_midpoint = NULL,   gradient_limits = NULL,   select_cells = NULL,   point_size = 2,   point_alpha = 1,   point_border_col = \"lightgrey\",   point_border_stroke = 0.1,   label_size = 4,   label_fontface = \"bold\",   show_other_cells = T,   other_cell_color = \"lightgrey\",   other_point_size = 1,   show_legend = TRUE )"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/plot_spat_point_layer_ggplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function for pseudotissue visualization — plot_spat_point_layer_ggplot","text":"ggobject inheriated object visualized_spots. cell_locations_metadata_selected, cell_locations_metadata_other, cell_color, ... Inheriated, passed ggplot2 object.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/plot_spat_point_layer_ggplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A function for pseudotissue visualization — plot_spat_point_layer_ggplot","text":"ggplot2 object.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/plot_spat_visuals.html","id":null,"dir":"Reference","previous_headings":"","what":"A function for visualization selected qc matrices in pseudotissue visualization — plot_spat_visuals","title":"A function for visualization selected qc matrices in pseudotissue visualization — plot_spat_visuals","text":"Adapted function Giotto package Dries et al, 2021, rewrite use scdrake package SingleCellExperiment object. Helper function users, core scdrake package.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/plot_spat_visuals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function for visualization selected qc matrices in pseudotissue visualization — plot_spat_visuals","text":"","code":"plot_spat_visuals(sce)"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/plot_spat_visuals.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function for visualization selected qc matrices in pseudotissue visualization — plot_spat_visuals","text":"sce SingleCellExperiment object.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/plot_spat_visuals.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A function for visualization selected qc matrices in pseudotissue visualization — plot_spat_visuals","text":"list plots.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/plot_vln.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a combined violin-boxplot plot. — plot_vln","title":"Make a combined violin-boxplot plot. — plot_vln","text":"Make combined violin-boxplot plot.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/plot_vln.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a combined violin-boxplot plot. — plot_vln","text":"","code":"plot_vln(   sce,   ensembl_id,   groups,   add_jitter = TRUE,   jitter_color = TRUE,   jitter_point_size = 0.5,   violin_scale = \"area\",   boxplot_width = 0.1,   labs = NULL )"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/plot_vln.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a combined violin-boxplot plot. — plot_vln","text":"sce SingleCellExperiment object. ensembl_id character scalar: ENSEMBL ID feature plot. groups character scalar: name column colData(sce) divide cells. Violin plot created level. add_jitter logical scalar: TRUE, add jitter points. jitter_color logical scalar: TRUE, jittered points colored groups. jitter_point_size numeric scalar. violin_scale character scalar: passed ggplot2::geom_violin() (scale parameter). boxplot_width numeric scalar: passed ggplot2::geom_boxplot() (width parameter). labs ggplot2::labs() object.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/plot_vln.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a combined violin-boxplot plot. — plot_vln","text":"ggplot2 object.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/prepare_marker_source_params.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare a tibble with parameters for cluster marker tests. — .prepare_marker_source_params","title":"Prepare a tibble with parameters for cluster marker tests. — .prepare_marker_source_params","text":"Prepare tibble parameters cluster marker tests.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/prepare_marker_source_params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare a tibble with parameters for cluster marker tests. — .prepare_marker_source_params","text":"","code":".prepare_marker_source_params(   marker_source,   marker_source_name,   marker_default_params )  .prepare_marker_sources_params(marker_sources, marker_default_params)"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/prepare_marker_source_params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare a tibble with parameters for cluster marker tests. — .prepare_marker_source_params","text":"marker_source named list. marker_source_name character scalar: name marker source. marker_default_params named list default parameters (common tests). Obtained CLUSTER_MARKERS_SOURCES_DEFAULTS CONTRASTS_SOURCES_DEFAULTS. marker_sources named list named lists marker sources.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/prepare_marker_source_params.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare a tibble with parameters for cluster marker tests. — .prepare_marker_source_params","text":"named list (named lists).","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/process_config.html","id":null,"dir":"Reference","previous_headings":"","what":"Config processing. — process_config","title":"Config processing. — process_config","text":"functions responsible checking processing config parameters. important steps : Setting pipeline parameters, drake targets cache, parallel processing, etc. Extracting path SQLite database file gene annotation package. Conversion relative paths (project's root directory) absolute putting paths base output directory. Checking processing CLUSTER_MARKERS_SOURCES, CONTRASTS_SOURCES, INTEGRATION_SOURCES parameters.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/process_config.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Config processing. — process_config","text":"","code":".process_pipeline_config(cfg)  .process_main_config(cfg)  .process_cluster_markers_config(cfg, other_variables)  .process_contrasts_config(cfg, other_variables)  .prepare_cell_annotation_sources_params(   cell_annotation_sources,   cell_annotation_default_params )  .process_integration_config(cfg, other_variables)  .process_int_clustering_config(cfg, other_variables)  .process_input_qc_config(cfg, other_variables)  .process_norm_clustering_config(cfg, other_variables)"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/process_config.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Config processing. — process_config","text":"cfg named list pipeline parameters. other_variables list variables whose environment yaml_file evaluated, see details load_config(). cell_annotation_sources named list. cell_annotation_default_params named list default parameters.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/process_config.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Config processing. — process_config","text":"modified cfg.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. ggraph guide_edge_colourbar","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/render_bootstrap_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Render a dataframe-like object using knitr::kable() and kableExtra::kable_styling(). — render_bootstrap_table","title":"Render a dataframe-like object using knitr::kable() and kableExtra::kable_styling(). — render_bootstrap_table","text":"Render dataframe-like object using knitr::kable() kableExtra::kable_styling().","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/render_bootstrap_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Render a dataframe-like object using knitr::kable() and kableExtra::kable_styling(). — render_bootstrap_table","text":"","code":"render_bootstrap_table(   df,   bootstrap_options = c(\"striped\", \"hover\", \"condensed\"),   full_width = TRUE,   position = \"center\",   row.names = TRUE,   ... )"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/render_bootstrap_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Render a dataframe-like object using knitr::kable() and kableExtra::kable_styling(). — render_bootstrap_table","text":"df dataframe-like object. bootstrap_options, full_width, position Passed kableExtra::kable_styling(). row.names Passed knitr::kable(). ... Passed knitr::kable() kableExtra::kable_styling().","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/render_bootstrap_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Render a dataframe-like object using knitr::kable() and kableExtra::kable_styling(). — render_bootstrap_table","text":"object class kableExtra knitr_kable.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/replace_list_nas_with_nulls.html","id":null,"dir":"Reference","previous_headings":"","what":"Replace NAs in a list by NULLs. — replace_list_nas_with_nulls","title":"Replace NAs in a list by NULLs. — replace_list_nas_with_nulls","text":"Replace NAs list NULLs.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/replace_list_nas_with_nulls.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Replace NAs in a list by NULLs. — replace_list_nas_with_nulls","text":"","code":"replace_list_nas_with_nulls(l)"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/replace_list_nas_with_nulls.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Replace NAs in a list by NULLs. — replace_list_nas_with_nulls","text":"l list.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/replace_list_nas_with_nulls.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Replace NAs in a list by NULLs. — replace_list_nas_with_nulls","text":"list l NAs replaced NULLs.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/replace_list_nas_with_nulls.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Replace NAs in a list by NULLs. — replace_list_nas_with_nulls","text":"","code":"replace_list_nas_with_nulls(list(NA, a = 1, b = NA)) #> [[1]] #> NULL #>  #> $a #> [1] 1 #>  #> $b #> NULL #>"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/replace_list_nulls.html","id":null,"dir":"Reference","previous_headings":"","what":"Replace NULL items in a defined depth of a list. — replace_list_nulls","title":"Replace NULL items in a defined depth of a list. — replace_list_nulls","text":"Replace NULL items defined depth list.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/replace_list_nulls.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Replace NULL items in a defined depth of a list. — replace_list_nulls","text":"","code":"replace_list_nulls(l, replacement = NA, depth = 2L)"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/replace_list_nulls.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Replace NULL items in a defined depth of a list. — replace_list_nulls","text":"l list. replacement replacement NULL items. depth integer scalar: depth l search replace NULL items.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/replace_list_nulls.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Replace NULL items in a defined depth of a list. — replace_list_nulls","text":"list l NULL items replaced replacement defined depth.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/replace_list_nulls.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Replace NULL items in a defined depth of a list. — replace_list_nulls","text":"","code":"replace_list_nulls(list(a = list(b = 1, c = NULL))) #> $a #> $a$b #> [1] 1 #>  #> $a$c #> [1] NA #>  #>"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/run_graph_based_clustering.html","id":null,"dir":"Reference","previous_headings":"","what":"Find clusters in SNN graph using a community detection algorithm and if possible, using a specified resolution. — run_graph_based_clustering","title":"Find clusters in SNN graph using a community detection algorithm and if possible, using a specified resolution. — run_graph_based_clustering","text":"Find clusters SNN graph using community detection algorithm possible, using specified resolution.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/run_graph_based_clustering.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find clusters in SNN graph using a community detection algorithm and if possible, using a specified resolution. — run_graph_based_clustering","text":"","code":"run_graph_based_clustering(   graph_snn,   is_integration,   algorithm = c(\"louvain\", \"walktrap\", \"leiden\"),   resolution = 0.8 )"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/run_graph_based_clustering.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find clusters in SNN graph using a community detection algorithm and if possible, using a specified resolution. — run_graph_based_clustering","text":"graph_snn (input target) object class igraph. is_integration logical scalar: TRUE, clusterings named cluster_int_*, otherwise cluster_*. algorithm character scalar: community detection algorithm: louvain: igraph::cluster_louvain() walktrap: igraph::cluster_walktrap() leiden: igraph::cluster_leiden() resolution numeric scalar: resolution algorithm (used walktrap). Higher values result fine-grained clusters.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/run_graph_based_clustering.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find clusters in SNN graph using a community detection algorithm and if possible, using a specified resolution. — run_graph_based_clustering","text":"tibble whose columns mostly self-explanatory, except data column, list type contains another tibble community_detection column holding object class communities returned used igraph clustering function.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/run_kmeans_clustering.html","id":null,"dir":"Reference","previous_headings":"","what":"Run k-means clustering for a specific k. — run_kmeans_clustering","title":"Run k-means clustering for a specific k. — run_kmeans_clustering","text":"Run k-means clustering specific k.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/run_kmeans_clustering.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run k-means clustering for a specific k. — run_kmeans_clustering","text":"","code":"run_kmeans_clustering(   sce,   kmeans_k,   is_integration,   dimred = \"pca\",   nstart = 25,   iter.max = 1000 )"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/run_kmeans_clustering.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run k-means clustering for a specific k. — run_kmeans_clustering","text":"sce SingleCellExperiment object. kmeans_k integer scalar: number clusters k-means. is_integration logical scalar: TRUE, clusterings named cluster_int_*, otherwise cluster_*. dimred character scalar: name matrix reducedDim() used k-means. nstart, iter.max Passed stats::kmeans().","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/run_kmeans_clustering.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run k-means clustering for a specific k. — run_kmeans_clustering","text":"tibble whose columns mostly self-explanatory, except data column, list type contains another tibble kmeans_object column holding object class kmeans returned stats::kmeans() function.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/run_page_man_annotation.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate and run PAGE annotation. — run_page_man_annotation","title":"Calculate and run PAGE annotation. — run_page_man_annotation","text":"Calculate run PAGE annotation.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/run_page_man_annotation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate and run PAGE annotation. — run_page_man_annotation","text":"","code":"run_page_man_annotation(   sign_matrix,   sce,   values = \"logcounts\",   scale = NULL,   overlap = 5,   reverse_log_scale = FALSE,   selected_annotation = NULL,   output_enrichment = \"zscore\" )"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/run_page_man_annotation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate and run PAGE annotation. — run_page_man_annotation","text":"sign_matrix precalculated signature matrix sce SingleCellExperiment object values expresion indicating values use, logcounts default","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/run_pipeline.html","id":null,"dir":"Reference","previous_headings":"","what":"Run the scdrake pipeline. — run_single_sample","title":"Run the scdrake pipeline. — run_single_sample","text":"two ways run scdrake pipeline: first, reproducible way via run_single_sample_r() run_integration_r(). end, drake::r_make() called sources \"_drake_single_sample.R\" \"_drake_integration.R\" scripts fresh new R session. scripts entry points drake. See scdrake_r_make() details. (Soft-deprecated since scdrake 1.4.0) second way run pipeline current R session via run_single_sample() run_integration(), shortcut : Loading configs: load_pipeline_config(), load_single_sample_configs() load_integration_configs(). Obtaining pipeline plan: get_single_sample_plan() get_integration_plan(). Creating basic directory structure (based paths loaded config files): create_single_sample_dirs() create_integration_dirs(). Running pipeline: scdrake_make(). way considered nonreproducible, pipeline run current session might interfering variables loaded packages. Internally, run_single_sample() run_integration() functions basically replicating code \"_drake_single_sample.R\" \"_drake_integration.R\" scripts, respectively, protecting side effects (e.g. setting options() etc.) current session (.e. environment modifications limited function's scope).","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/run_pipeline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run the scdrake pipeline. — run_single_sample","text":"","code":"run_single_sample(   pipeline_config_dir = getOption(\"scdrake_pipeline_config_dir\"),   single_sample_config_dir = getOption(\"scdrake_single_sample_config_dir\"),   project_root = getOption(\"scdrake_project_root\"),   do_update_configs = TRUE,   verbose = getOption(\"scdrake_verbose\"),   .dry = FALSE,   ... )  run_integration(   pipeline_config_dir = getOption(\"scdrake_pipeline_config_dir\"),   integration_config_dir = getOption(\"scdrake_integration_config_dir\"),   project_root = getOption(\"scdrake_project_root\"),   do_update_configs = TRUE,   verbose = getOption(\"scdrake_verbose\"),   .dry = FALSE,   ... )  run_single_sample_r(   drake_file = \"_drake_single_sample.R\",   project_root = getOption(\"scdrake_project_root\"),   ... )  run_integration_r(   drake_file = \"_drake_integration.R\",   project_root = getOption(\"scdrake_project_root\"),   ... )"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/run_pipeline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run the scdrake pipeline. — run_single_sample","text":"pipeline_config_dir character scalar: path directory pipeline config file (pipeline.yaml). single_sample_config_dir character scalar: path directory 00_main.yaml, 01_input_qc.yaml, 02_norm_clustering.yaml, cluster_markers.yaml, contrasts.yaml files. project_root character scalar: path directory pipeline run, .e. new working directory. working directory used temporarily. Default value scdrake_project_root options current working directory. do_update_configs logical scalar: TRUE, run update_single_sample_configs() update_integration_configs() loading configs. verbose logical scalar: TRUE, verbose. default value obtained getOption(\"scdrake_verbose\"). .dry logical scalar: TRUE, omit last step description just return TRUE. ... Passed scdrake_make() scdrake_r_make(). integration_config_dir character scalar: path directory 00_main.yaml, 01_integration.yaml, 02_int_clustering.yaml, cluster_markers.yaml, contrasts.yaml files. drake_file character scalar: path entry script drake.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/run_pipeline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run the scdrake pipeline. — run_single_sample","text":"TRUE pipeline finishes successfully.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/save_clustree.html","id":null,"dir":"Reference","previous_headings":"","what":"Save a clustree plot into PDF. — save_clustree","title":"Save a clustree plot into PDF. — save_clustree","text":"Save clustree plot PDF.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/save_clustree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save a clustree plot into PDF. — save_clustree","text":"","code":"save_clustree(p, out_file, width = 14, height = 10, ...)"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/save_clustree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save a clustree plot into PDF. — save_clustree","text":"p ggplot object. out_file character scalar: output PDF file. width, height, ... Passed ggplot2::ggsave().","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/save_clustree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Save a clustree plot into PDF. — save_clustree","text":"character scalar: out_file","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/save_pdf.html","id":null,"dir":"Reference","previous_headings":"","what":"Save a list of plots to multipage PDF. — save_pdf","title":"Save a list of plots to multipage PDF. — save_pdf","text":"Save list plots multipage PDF.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/save_pdf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save a list of plots to multipage PDF. — save_pdf","text":"","code":"save_pdf(   plots,   output_file,   width = NULL,   height = NULL,   make_thumbnail = FALSE,   stop_on_error = FALSE )"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/save_pdf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save a list of plots to multipage PDF. — save_pdf","text":"plots list plots. output_file character scalar: path output PDF file. file's directory exist, created recursively. width, height numeric scalar: default width height graphics region inches. Defaults 7. make_thumbnail logical scalar: TRUE, PNG file created first plot plots. stop_on_error logical scalar: TRUE, function stop error saving plot. Otherwise dummy PDF/PNG thumbnail file error description created instead.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/save_pdf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Save a list of plots to multipage PDF. — save_pdf","text":"named list following items: success: logical scalar indicating whether plot saving succeeded (TRUE) (FALSE). error: character scalar error message success FALSE, NULL otherwise. error_plot: ggplot2 object error plot success FALSE, NULL otherwise. output_file: character scalar, identical output_file parameter. thumbnail_file: character scalar, path thumbnail PNG file make_thumbnail TRUE, NULL otherwise. Note success FALSE accompanying error message plot possible stop_on_error FALSE.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/save_print.html","id":null,"dir":"Reference","previous_headings":"","what":"Capture output from print() of an object. — save_print","title":"Capture output from print() of an object. — save_print","text":"Capture output print() object.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/save_print.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Capture output from print() of an object. — save_print","text":"","code":"save_print(object, collapse = \"\\n\")  save_object_info(object)"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/save_print.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Capture output from print() of an object. — save_print","text":"object object printed. collapse character scalar: used collapse output lines.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/save_print.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Capture output from print() of an object. — save_print","text":"character scalar save_print(), list(str = save_print(object), dim = dim(object)) save_object_info().","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/save_print.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Capture output from print() of an object. — save_print","text":"","code":"save_print(lm(mpg ~ cyl, datasets::mtcars)) #> [1] \"\\nCall:\\nlm(formula = mpg ~ cyl, data = datasets::mtcars)\\n\\nCoefficients:\\n(Intercept)          cyl  \\n     37.885       -2.876  \\n\""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/save_selected_markers_plots_files.html","id":null,"dir":"Reference","previous_headings":"","what":"Save plots of selected markers. — save_selected_markers_plots_files","title":"Save plots of selected markers. — save_selected_markers_plots_files","text":"Save plots selected markers.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/save_selected_markers_plots_files.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save plots of selected markers. — save_selected_markers_plots_files","text":"","code":"save_selected_markers_plots_files(   selected_markers_plots,   selected_markers_out_dir,   is_integration )"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/save_selected_markers_plots_files.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save plots of selected markers. — save_selected_markers_plots_files","text":"selected_markers_plots (input target) tibble: selected_markers_plots selected_markers_int_plots_df selected_markers_out_dir character scalar: path base output directory save plots . is_integration logical scalar: TRUE used integration plan.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/save_selected_markers_plots_files.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Save plots of selected markers. — save_selected_markers_plots_files","text":"character vector output files. Output target: selected_markers_plots_files selected_markers_int_plots_files","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/scdrake-package.html","id":null,"dir":"Reference","previous_headings":"","what":"scdrake: A pipeline for droplet-based single-cell RNA-seq data secondary analysis implemented in the drake Make-like toolkit for R language — scdrake-package","title":"scdrake: A pipeline for droplet-based single-cell RNA-seq data secondary analysis implemented in the drake Make-like toolkit for R language — scdrake-package","text":"pipeline implemented drake Make-like toolkit (https://github.com/ropensci/drake) provides following steps scRNA-seq secondary analysis: input quality control, filtering cells/genes, normalization, clustering, cell type annotation, cluster markers, differential expression analysis (constrasts -> cluster vs. cluster), integration multiple samples. main parts accompanied rich graphical outputs HTML reports (RMarkdown). Thanks drake package, pipeline highly reproducible, scalable efficient, provides easy access intermediate results, can arbitrarily extended pipeline definitions abstracted R objects. command line interface available perform important actions directly shell terminal.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/scdrake-package.html","id":"package-options","dir":"Reference","previous_headings":"","what":"Package options","title":"scdrake: A pipeline for droplet-based single-cell RNA-seq data secondary analysis implemented in the drake Make-like toolkit for R language — scdrake-package","text":"See get_scdrake_default_options().","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/scdrake-package.html","id":"included-datasets","dir":"Reference","previous_headings":"","what":"Included datasets","title":"scdrake: A pipeline for droplet-based single-cell RNA-seq data secondary analysis implemented in the drake Make-like toolkit for R language — scdrake-package","text":"pipeline testing two datasets 10x Genomics can automatically downloaded: download_pbmc1k(): PBMC 1k (v3 chemistry, Cell Ranger 3.0.0) download_pbmc3k(): PBMC 3k (v1 chemistry, Cell Ranger 1.1.0). dataset used testing integration pipeline. credits datasets go 10x Genomics. Visit https://www.10xgenomics.com/resources/datasets information.","code":""},{"path":[]},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/scdrake-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"scdrake: A pipeline for droplet-based single-cell RNA-seq data secondary analysis implemented in the drake Make-like toolkit for R language — scdrake-package","text":"Maintainer: Jiri Novotny jiri.novotny@img.cas.cz (ORCID) Authors: Jan Kubovciak jan.kubovciak@img.cas.cz contributors: Michal Kolar kolarmi@img.cas.cz [funder]","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/scdrake_list.html","id":null,"dir":"Reference","previous_headings":"","what":"A scdrake's list with overloaded, strict access operators. — scdrake_list","title":"A scdrake's list with overloaded, strict access operators. — scdrake_list","text":"behaves like normal list, , default, strict rules non-existing elements: $, [, [[ operators overloaded class. try extract element(s) scdrake_list object, throw error element(s) exist. behaviour can avoided [ [[ using check = FALSE parameter, e.g. l[name, check = FALSE]. Also, case [, scdrake_list non-existing names NULL values returned instead putting NA_character_ , default behaviour base list, e.g.   compared   However, work numeric subscripts.","code":"> list(a = 2)[\"b\"] $<NA> NULL > scdrake_list(list(a = 2))[\"b\", check = FALSE] $b NULL  attr(,\"class\") [1] \"scdrake_list\""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/scdrake_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A scdrake's list with overloaded, strict access operators. — scdrake_list","text":"","code":"scdrake_list(l = NULL)  # S3 method for scdrake_list $(x, i)  # S3 method for scdrake_list [(x, i, check = TRUE)  # S3 method for scdrake_list [[(x, i, check = TRUE)"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/scdrake_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A scdrake's list with overloaded, strict access operators. — scdrake_list","text":"l list. x object class scdrake_list. character scalar vector: name / names element(s) extract. check logical scalar: TRUE, throw error non-existing names subscripts present.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/scdrake_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A scdrake's list with overloaded, strict access operators. — scdrake_list","text":"object class scdrake_list.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/scdrake_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A scdrake's list with overloaded, strict access operators. — scdrake_list","text":"","code":"cfg <- scdrake_list(list(var_1 = 1, var_2 = 2)) # The standard list behavior. cfg$var_1 #> [1] 1 cfg[[\"var_2\"]] #> [1] 2 cfg[\"var_1\"] #> $var_1 #> [1] 1 #>  #> attr(,\"class\") #> [1] \"scdrake_list\" \"list\"         cfg[c(\"var_1\", \"var_2\")] #> $var_1 #> [1] 1 #>  #> $var_2 #> [1] 2 #>  #> attr(,\"class\") #> [1] \"scdrake_list\" \"list\"         if (FALSE) { # Strict rules for non-existing elements - throws an error. cfg$var_3 cfg[[\"var_3\"]] cfg[c(\"var_1\", \"var_3\")] }"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/scdrake_make.html","id":null,"dir":"Reference","previous_headings":"","what":"Execute a scdrake's pipeline plan. — scdrake_make","title":"Execute a scdrake's pipeline plan. — scdrake_make","text":"wrapper around drake::make() sensible defaults. plan executed, function sets locally options, environment variables things. means side effects left. Note less reproducible way run scdrake pipeline since executed current R session. Also note create_single_sample_dirs() create_integration_dirs() must run . preferred way calling scdrake_r_make() function, wrapper around drake::r_make() (details). start fresh new R session, source _drake.R (similar file) execute plan. current _drake.R-like files copied new scdrake project initialized : _drake_single_sample.R single-sample pipeline _drake_integration.R integration pipeline Internally, _drake_single_sample.R _drake_integration.R almost code scdrake_make(), except need isolation side effects. Also, default, relies environment variables, paths config directories, e.g. SCDRAKE_SINGLE_SAMPLE_CONFIG_DIR whose value used default option used load_single_sample_configs(dir = getOption(\"scdrake_single_sample_config_dir\")).","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/scdrake_make.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Execute a scdrake's pipeline plan. — scdrake_make","text":"","code":"scdrake_make(   plan,   cfg_pipeline = NULL,   cfg_main = NULL,   verbose = getOption(\"scdrake_verbose\"),   prework = \"\",   log_worker = TRUE,   options = list(),   ... )  scdrake_r_make(drake_file = NULL, ...)"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/scdrake_make.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Execute a scdrake's pipeline plan. — scdrake_make","text":"plan drake plan. cfg_pipeline One : scdrake_list object: pipeline config (see load_pipeline_config()) obtained pipeline.yaml file located pipeline config directory NULL: config loaded using path defined scdrake_pipeline_config_dir option cfg_main scdrake_list object: main config (see load_config) obtained 00_main.yaml file located single-sample integration config directory. verbose logical scalar: TRUE, verbose. default value obtained getOption(\"scdrake_verbose\"). prework, log_worker, ... Passed drake::make(). prework must character scalar. options list: additional base::options() set (locally). drake_file character scalar: path _drake.R (default NULL) similar file (details).","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/scdrake_make.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Execute a scdrake's pipeline plan. — scdrake_make","text":"Invisibly TRUE plan execution finishes without errors.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/scdrake_options.html","id":null,"dir":"Reference","previous_headings":"","what":"Options used by scdrake. — get_scdrake_default_options","title":"Options used by scdrake. — get_scdrake_default_options","text":"get_scdrake_default_options() returns list default scdrake options passed options() package load. get_scdrake_options() returns list options currently used scdrake (names begin \"scdrake_\").","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/scdrake_options.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Options used by scdrake. — get_scdrake_default_options","text":"","code":"get_scdrake_default_options(verbose = TRUE)  get_scdrake_options()"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/scdrake_options.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Options used by scdrake. — get_scdrake_default_options","text":"verbose logical scalar: TRUE, verbose.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/scdrake_options.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Options used by scdrake. — get_scdrake_default_options","text":"named list options.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/scdrake_options.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Options used by scdrake. — get_scdrake_default_options","text":"options obtained environment variables named UPPERCASE, e.g. value scdrake_verbose taken SCDRAKE_VERBOSE. environment variables coerced atomic types (character, logical, integer, double). following options used scdrake: scdrake_yq_binary (character, default: Sys.(\"yq\")) path yq tool's binary. default value \"\", set get_yq_default_path(). scdrake_verbose (logical, env: SCDRAKE_VERBOSE, default: TRUE) TRUE, scdrake verbose. scdrake_cache_dir (character, env: SCDRAKE_CACHE_DIR, default: \".drake\") path drake cache directory. drake package also contains RStudio addin, shortcut loading target cursor (see Tools -> Modify Keyboard Shortcuts -> \"loadd target cursor\"). know cache directory use loading, drake using rstudio_drake_cache option. load attach, scdrake automatically set option scdrake_cache_dir. Just keep mind rstudio_drake_cache option overwritten load drake package. scdrake_pipeline_config_dir (character, env: SCDRAKE_PIPELINE_CONFIG_DIR, default: \"config\") path directory containing pipeline.default.yaml /pipeline.yaml files. scdrake_single_sample_config_dir (character, env: SCDRAKE_SINGLE_SAMPLE_CONFIG_DIR, default: \"config/single_sample\") path directory containing files single-sample analysis, see dir parameter load_single_sample_configs(). scdrake_integration_config_dir (character, env: SCDRAKE_INTEGRATION_CONFIG_DIR, default: \"config/integration\") path directory containing files integration analysis, see dir parameter load_integration_configs(). scdrake_plan_custom_file (character, env: SCDRAKE_PLAN_CUSTOM_FILE, default: \"plan_custom.R\") path file custom drake plan. scdrake_project_root (character, env: SCDRAKE_PROJECT_ROOT, default: .) path scdrake project root. different current working directory (.), scdrake first change working directory pipeline run e.g. run_single_sample_r() run_single_sample(). means path-specifying options (e.g. scdrake_pipeline_config_dir) config parameters become relative scdrake_project_root - use risk!","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/sce_add_cell_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Add columns to colData() of a SingleCellExperiment object. — sce_add_cell_data","title":"Add columns to colData() of a SingleCellExperiment object. — sce_add_cell_data","text":"Add columns colData() SingleCellExperiment object.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/sce_add_cell_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add columns to colData() of a SingleCellExperiment object. — sce_add_cell_data","text":"","code":"sce_add_cell_data(sce_dimred, cell_data, overwrite_sce = TRUE)"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/sce_add_cell_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add columns to colData() of a SingleCellExperiment object. — sce_add_cell_data","text":"sce_dimred SingleCellExperiment object. cell_data dataframe. overwrite_sce logical scalar: TRUE, columns colData(sce_dimred) overwritten names cell_data. Otherwise opposite happen.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/sce_add_cell_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add columns to colData() of a SingleCellExperiment object. — sce_add_cell_data","text":"modified sce_dimred added/updated colData() columns cell_data.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/sce_add_colData.html","id":null,"dir":"Reference","previous_headings":"","what":"Append new columns to colData of a SingleCellExperiment object. — sce_add_colData","title":"Append new columns to colData of a SingleCellExperiment object. — sce_add_colData","text":"Append new columns colData SingleCellExperiment object.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/sce_add_colData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Append new columns to colData of a SingleCellExperiment object. — sce_add_colData","text":"","code":"sce_add_colData(sce, df, replace = TRUE)"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/sce_add_colData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Append new columns to colData of a SingleCellExperiment object. — sce_add_colData","text":"sce SingleCellExperiment object. df dataframe binded column-wise colData(sce). replace logical scalar: TRUE columns added already exist, first removed colData(sce).","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/sce_add_colData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Append new columns to colData of a SingleCellExperiment object. — sce_add_colData","text":"modified sce object added columns.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/sce_add_colData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Append new columns to colData of a SingleCellExperiment object. — sce_add_colData","text":"","code":"if (FALSE) { df <- data.frame(example = rownames(colnames)) sce <- sce_add_colData(sce, df = df) }"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/sce_add_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Append data to metadata() list of a SingleCellExperiment object. — sce_add_metadata","title":"Append data to metadata() list of a SingleCellExperiment object. — sce_add_metadata","text":"utils::modifyList() used internally, existing named items metadata() can overwritten.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/sce_add_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Append data to metadata() list of a SingleCellExperiment object. — sce_add_metadata","text":"","code":"sce_add_metadata(sce, ...)"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/sce_add_metadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Append data to metadata() list of a SingleCellExperiment object. — sce_add_metadata","text":"sce SingleCellExperiment object. ... Objects added metadata(sce).","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/sce_add_metadata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Append data to metadata() list of a SingleCellExperiment object. — sce_add_metadata","text":"modified sce object data appended metadata().","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/sce_add_metadata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Append data to metadata() list of a SingleCellExperiment object. — sce_add_metadata","text":"","code":"if (FALSE) { sce <- sce_add_metadata(sce, a = 1, \"some_data\", b = list(c = 1)) }"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/sce_add_spatial_colData.html","id":null,"dir":"Reference","previous_headings":"","what":"Append new columns with spatial relevance to colData of a SingleCellExperiment object. — sce_add_spatial_colData","title":"Append new columns with spatial relevance to colData of a SingleCellExperiment object. — sce_add_spatial_colData","text":"Append new columns spatial relevance colData SingleCellExperiment object.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/sce_add_spatial_colData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Append new columns with spatial relevance to colData of a SingleCellExperiment object. — sce_add_spatial_colData","text":"","code":"sce_add_spatial_colData(sce, spatial_locs, spatial = FALSE)"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/sce_add_spatial_colData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Append new columns with spatial relevance to colData of a SingleCellExperiment object. — sce_add_spatial_colData","text":"sce SingleCellExperiment object. spatial_locs file contating spatial coordiantes spatial Logical vector true, add spatial coordinates","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/sce_calc_pca.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate PCA of a SingleCellExperiment object. — sce_calc_pca","title":"Calculate PCA of a SingleCellExperiment object. — sce_calc_pca","text":"Columns resulting PCA matrix named {name}_1, {name}_2, ... . ensures compatibility conversion Seurat object (Seurat::.Seurat.SingleCellExperiment()).","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/sce_calc_pca.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate PCA of a SingleCellExperiment object. — sce_calc_pca","text":"","code":"sce_calc_pca(   sce,   name = \"pca\",   exprs_values = \"logcounts\",   subset_row = NULL,   BSPARAM = BiocSingular::IrlbaParam(),   BPPARAM = BiocParallel::SerialParam(),   ... )"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/sce_calc_pca.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate PCA of a SingleCellExperiment object. — sce_calc_pca","text":"sce SingleCellExperiment object. name, exprs_values, BSPARAM, BPPARAM, ... Passed scater::runPCA(). subset_row character vector. NULL, IDs highly variable genes stored metadata(sce)$hvg_ids used subset_row parameter scater::runPCA(). HVGs found, genes used.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/sce_calc_pca.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate PCA of a SingleCellExperiment object. — sce_calc_pca","text":"SingleCellExperiment object calculated PCA.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/sce_cc_fn.html","id":null,"dir":"Reference","previous_headings":"","what":"Assign cell cycle phase to cells. — sce_cc_fn","title":"Assign cell cycle phase to cells. — sce_cc_fn","text":"wrapper around Seurat::CellCycleScoring().","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/sce_cc_fn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assign cell cycle phase to cells. — sce_cc_fn","text":"","code":"sce_cc_fn(sce_final_input_qc, cc_genes, data = NULL)"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/sce_cc_fn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assign cell cycle phase to cells. — sce_cc_fn","text":"sce_final_input_qc (input target) SingleCellExperiment object. cc_genes (input target) dataframe. data Passed Seurat::.Seurat().","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/sce_cc_fn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assign cell cycle phase to cells. — sce_cc_fn","text":"modified sce_final_input_qc objects columns appended colData(): phase, s_score, g2m_score, cc_difference. Output target: sce_cc","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/sce_compute_dimreds.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute t-SNE and UMAP dimreds on a SingleCellExperiment object. — sce_compute_dimreds","title":"Compute t-SNE and UMAP dimreds on a SingleCellExperiment object. — sce_compute_dimreds","text":"Compute t-SNE UMAP dimreds SingleCellExperiment object.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/sce_compute_dimreds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute t-SNE and UMAP dimreds on a SingleCellExperiment object. — sce_compute_dimreds","text":"","code":"sce_compute_dimreds(   sce_pca_selected_pcs,   tsne_perp,   tsne_max_iter,   dimred = \"pca\",   n_dimred = \"selected_pcs\",   BPPARAM = BiocParallel::SerialParam() )"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/sce_compute_dimreds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute t-SNE and UMAP dimreds on a SingleCellExperiment object. — sce_compute_dimreds","text":"sce_pca_selected_pcs SingleCellExperiment object calculated PCA known number selected PCs. tsne_perp numeric scalar: t-SNE perplexity. tsne_max_iter numeric scalar: number t-SNE iterations. dimred character scalar: name matrix reducedDim() used calculate dimreds. n_dimred character scalar \"selected_pcs\": dimred \"pca\", use selected PCs stored metadata(sce_pca_selected_pcs)$pca_selected_pcs NULL: use dimensions dimred integer scalar: use first n_dimred dimensions dimred BPPARAM BiocParallel::BiocParallelParam object.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/sce_compute_dimreds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute t-SNE and UMAP dimreds on a SingleCellExperiment object. — sce_compute_dimreds","text":"SingleCellExperiment object calculated t-SNE UMAP dimreds. Column names matrices dimreds named tsne_<> umap_<>, respectively.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/sce_final_input_qc_fn.html","id":null,"dir":"Reference","previous_headings":"","what":"Finalize a SingleCellExperiment object which will proceed to the 02_norm_clustering stage. — sce_final_input_qc_fn","title":"Finalize a SingleCellExperiment object which will proceed to the 02_norm_clustering stage. — sce_final_input_qc_fn","text":"Finalize SingleCellExperiment object proceed 02_norm_clustering stage.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/sce_final_input_qc_fn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Finalize a SingleCellExperiment object which will proceed to the 02_norm_clustering stage. — sce_final_input_qc_fn","text":"","code":"sce_final_input_qc_fn(sce_selected, gene_annotation)"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/sce_final_input_qc_fn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Finalize a SingleCellExperiment object which will proceed to the 02_norm_clustering stage. — sce_final_input_qc_fn","text":"sce_selected (input target) SingleCellExperiment object. gene_annotation (input target) dataframe.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/sce_final_input_qc_fn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Finalize a SingleCellExperiment object which will proceed to the 02_norm_clustering stage. — sce_final_input_qc_fn","text":"SingleCellExperiment object. Output target: sce_final_input_qc","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/sce_get_cc_genes.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify cell cycle-related genes by using variance explained threshold. — sce_get_cc_genes","title":"Identify cell cycle-related genes by using variance explained threshold. — sce_get_cc_genes","text":"details see HVG selection section 02_norm_clustering.yaml config.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/sce_get_cc_genes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify cell cycle-related genes by using variance explained threshold. — sce_get_cc_genes","text":"","code":"sce_get_cc_genes(sce, var_expl_threshold, variable = \"phase\", ...)"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/sce_get_cc_genes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify cell cycle-related genes by using variance explained threshold. — sce_get_cc_genes","text":"sce SingleCellExperiment object. var_expl_threshold numeric scalar: threshold variance explained. Features exceeding threshold marked CC-related. variable character scalar: column use calculation variance explained. ... Passed scater::getVarianceExplained().","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/sce_get_cc_genes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify cell cycle-related genes by using variance explained threshold. — sce_get_cc_genes","text":"character vector gene IDs marked CC-related.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/sce_history_fn.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a tibble with history of cell and gene filtering. — sce_history_fn","title":"Create a tibble with history of cell and gene filtering. — sce_history_fn","text":"Create tibble history cell gene filtering.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/sce_history_fn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a tibble with history of cell and gene filtering. — sce_history_fn","text":"","code":"sce_history_fn(   sce_unfiltered,   sce_qc_filter_genes,   sce_custom_filter_genes,   spatial = FALSE )"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/sce_history_fn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a tibble with history of cell and gene filtering. — sce_history_fn","text":"sce_unfiltered (input target) SingleCellExperiment object. sce_qc_filter_genes (input target) SingleCellExperiment object. sce_custom_filter_genes (input target) SingleCellExperiment object. spatial logical vector: TRUE spatial transcriptomics dataset.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/sce_history_fn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a tibble with history of cell and gene filtering. — sce_history_fn","text":"tibble. Output target: sce_history","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/sce_history_plot_fn.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot history of cell and gene filtering. — sce_history_plot_fn","title":"Plot history of cell and gene filtering. — sce_history_plot_fn","text":"Plot history cell gene filtering.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/sce_history_plot_fn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot history of cell and gene filtering. — sce_history_plot_fn","text":"","code":"sce_history_plot_fn(sce_history, spatial = FALSE)"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/sce_history_plot_fn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot history of cell and gene filtering. — sce_history_plot_fn","text":"sce_history (input target) tibble. spatial logical vector: TRUE spatial transcriptomics dataset.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/sce_history_plot_fn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot history of cell and gene filtering. — sce_history_plot_fn","text":"patchwork object. Output target: sce_history_plot","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/sce_int_clustering_df_fn.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute a quick graph-based clustering for each integration method. — sce_int_clustering_df_fn","title":"Compute a quick graph-based clustering for each integration method. — sce_int_clustering_df_fn","text":"Harmony integration, \"harmony\" reduced dims used input scran::buildSNNGraph(); otherwise PCA used.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/sce_int_clustering_df_fn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute a quick graph-based clustering for each integration method. — sce_int_clustering_df_fn","text":"","code":"sce_int_clustering_df_fn(   sce_int_pca_df,   snn_k = 10,   snn_type = \"rank\",   snn_clustering_method = c(\"walktrap\", \"louvain\"),   BPPARAM = BiocParallel::SerialParam() )"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/sce_int_clustering_df_fn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute a quick graph-based clustering for each integration method. — sce_int_clustering_df_fn","text":"sce_int_pca_df (input target) tibble. snn_k, snn_type, snn_clustering_method See sce_int_raw_snn_clustering_fn(). BPPARAM BiocParallel::BiocParallelParam object.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/sce_int_clustering_df_fn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute a quick graph-based clustering for each integration method. — sce_int_clustering_df_fn","text":"modified sce_int_pca_df appended SingleCellExperiment object computed clustering. Output target: sce_int_clustering_df following items metadata() integrated SingleCellExperiment object added modified: int_cluster_snn_k, int_cluster_snn_type, int_cluster_snn_method: taken parameters integration method.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/sce_int_combine_hvgs.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine HVG data from a list of SingleCellExperiment objects. — sce_int_combine_hvgs","title":"Combine HVG data from a list of SingleCellExperiment objects. — sce_int_combine_hvgs","text":", fact, similar get_top_hvgs(). difference HVGs first combined SingleCellExperiment objects sce_list consequently, top HVGs selected.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/sce_int_combine_hvgs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine HVG data from a list of SingleCellExperiment objects. — sce_int_combine_hvgs","text":"","code":"sce_int_combine_hvgs(   sce_list,   hvg_selection_value = 0,   hvg_metric_fit_name = \"hvg_metric_fit\",   hvg_combination = c(\"hvg_metric\", \"intersection\", \"union\", \"all\"),   hvg_selection = c(\"top\", \"significance\", \"threshold\") )"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/sce_int_combine_hvgs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine HVG data from a list of SingleCellExperiment objects. — sce_int_combine_hvgs","text":"sce_list named list SingleCellExperiment objects. hvg_selection_value, hvg_selection See get_top_hvgs(). hvg_metric_fit_name character scalar: name list item HVG data metadata(). hvg_combination See sce_int_import_fn().","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/sce_int_combine_hvgs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine HVG data from a list of SingleCellExperiment objects. — sce_int_combine_hvgs","text":"named list combined HVG data.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/sce_int_df_fn.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform integration of single-samples. — sce_int_df_fn","title":"Perform integration of single-samples. — sce_int_df_fn","text":"Perform integration single-samples.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/sce_int_df_fn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform integration of single-samples. — sce_int_df_fn","text":"","code":"sce_int_df_fn(   sce_int_multibatchnorm,   integration_methods_df,   BPPARAM = BiocParallel::SerialParam() )"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/sce_int_df_fn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform integration of single-samples. — sce_int_df_fn","text":"sce_int_multibatchnorm (input target) SingleCellExperiment object processed batchelor::multiBatchNorm(). integration_methods_df (input target) tibble: transformed INTEGRATION_METHODS parameter 01_integration.yaml config. BPPARAM BiocParallel::BiocParallelParam object.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/sce_int_df_fn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform integration of single-samples. — sce_int_df_fn","text":"modified integration_methods_df tibble appended integrated SingleCellExperiment object. Output target: sce_int_df following items metadata() SingleCellExperiment object added modified: single_samples_metadata_df: tibble information individual samples: sample_name, description, cache_path, n_features, hvg_rm_cc_genes, hvg_cc_genes_var_expl_threshold, has_filtered_doublets, max_doublet_score, Samples: vectors merged metadata() individual samples. n_cells: number cells. hvg_ids, hvg_rm_cc_genes_ids: lists character vectors HVG / removed HVG IDs. cell_groupings: list cell grouping definitions. hvg_metric: list HVG metrics. hvg_rm_cc_genes, int_method_name, int_param: taken integration method parameters. hvg_rm_cc_genes_ids: character scalar removed CC-related genes' IDs.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/sce_int_dimred_df_fn.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate t-SNE and UMAP for each integration method result (SingleCellExperiment object). — sce_int_dimred_df_fn","title":"Calculate t-SNE and UMAP for each integration method result (SingleCellExperiment object). — sce_int_dimred_df_fn","text":"Calculate t-SNE UMAP integration method result (SingleCellExperiment object).","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/sce_int_dimred_df_fn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate t-SNE and UMAP for each integration method result (SingleCellExperiment object). — sce_int_dimred_df_fn","text":"","code":"sce_int_dimred_df_fn(dimred_params_df, BPPARAM = BiocParallel::SerialParam())"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/sce_int_dimred_df_fn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate t-SNE and UMAP for each integration method result (SingleCellExperiment object). — sce_int_dimred_df_fn","text":"dimred_params_df (input target) tibble: derived sce_int_pca_df integration_methods_df targets. Dimred parameters defined integration method INTEGRATION_METHODS parameter 01_integration.yaml config. BPPARAM BiocParallel::BiocParallelParam object.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/sce_int_dimred_df_fn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate t-SNE and UMAP for each integration method result (SingleCellExperiment object). — sce_int_dimred_df_fn","text":"modified dimred_params_df tibble appended SingleCellExperiment object computed PCA. Output target: sce_int_dimred_df","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/sce_int_dimred_plots_df_fn.html","id":null,"dir":"Reference","previous_headings":"","what":"Make dimred plot for each combination of integration method, dimred method, and coloring by\nbatch (single-sample) and cell cycle phase. — sce_int_dimred_plots_df_fn","title":"Make dimred plot for each combination of integration method, dimred method, and coloring by\nbatch (single-sample) and cell cycle phase. — sce_int_dimred_plots_df_fn","text":"Make dimred plot combination integration method, dimred method, coloring batch (single-sample) cell cycle phase.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/sce_int_dimred_plots_df_fn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make dimred plot for each combination of integration method, dimred method, and coloring by\nbatch (single-sample) and cell cycle phase. — sce_int_dimred_plots_df_fn","text":"","code":"sce_int_dimred_plots_df_fn(dimred_plots_params_df)"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/sce_int_dimred_plots_df_fn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make dimred plot for each combination of integration method, dimred method, and coloring by\nbatch (single-sample) and cell cycle phase. — sce_int_dimred_plots_df_fn","text":"dimred_plots_params_df (input target) tibble.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/sce_int_dimred_plots_df_fn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make dimred plot for each combination of integration method, dimred method, and coloring by\nbatch (single-sample) and cell cycle phase. — sce_int_dimred_plots_df_fn","text":"modified dimred_plots_params_df tibble appended ggplot2 object. Output target: sce_int_dimred_plots_df","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/sce_int_import_fn.html","id":null,"dir":"Reference","previous_headings":"","what":"Import sce_final_norm_clustering targets from drake caches. — sce_int_import_fn","title":"Import sce_final_norm_clustering targets from drake caches. — sce_int_import_fn","text":"SingleCellExperiment objects also checked common HVG metric, HVG combination method validated.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/sce_int_import_fn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import sce_final_norm_clustering targets from drake caches. — sce_int_import_fn","text":"","code":"sce_int_import_fn(   integration_sources,   hvg_combination = c(\"hvg_metric\", \"intersection\", \"union\", \"all\") )"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/sce_int_import_fn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import sce_final_norm_clustering targets from drake caches. — sce_int_import_fn","text":"integration_sources list sources load sce_final_norm_clustering targets . See 01_integration.yaml config details. hvg_combination character scalar: method use combining HVGs: \"hvg_metric\": combine gene variance CV2, e.g. samples HVG_METRIC set \"gene_var\"(scran::combineVar()) \"gene_cv2\" (scran::combineCV2()). \"intersection\": make intersection HVGs. \"union\": make union HVGs. \"\": take HVGs samples (without duplicates).","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/sce_int_import_fn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import sce_final_norm_clustering targets from drake caches. — sce_int_import_fn","text":"list SingleCellExperiment objects. Output target: sce_int_import following items metadata() imported SingleCellExperiment object added modified: single_sample_path, single_sample_path_type, single_sample_name, single_sample_description, hvg_rm_cc_genes, hvg_cc_genes_var_expl_threshold: taken INTEGRATION_SOURCES config parameter. hvg_combination: value hvg_combination function argument.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/sce_int_pca_df_fn.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute PCA for each integration method result (SingleCellExperiment object). — sce_int_pca_df_fn","title":"Compute PCA for each integration method result (SingleCellExperiment object). — sce_int_pca_df_fn","text":"Compute PCA integration method result (SingleCellExperiment object).","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/sce_int_pca_df_fn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute PCA for each integration method result (SingleCellExperiment object). — sce_int_pca_df_fn","text":"","code":"sce_int_pca_df_fn(pca_params_df, BPPARAM = BiocParallel::SerialParam())"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/sce_int_pca_df_fn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute PCA for each integration method result (SingleCellExperiment object). — sce_int_pca_df_fn","text":"pca_params_df (input target) tibble: derived sce_int_df integration_methods_df targets. PCA parameters defined integration method INTEGRATION_METHODS parameter 01_integration.yaml config. BPPARAM BiocParallel::BiocParallelParam object.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/sce_int_pca_df_fn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute PCA for each integration method result (SingleCellExperiment object). — sce_int_pca_df_fn","text":"modified pca_params_df tibble appended SingleCellExperiment object computed PCA. Output target: sce_int_pca_df following items metadata() integrated SingleCellExperiment object added modified: pca_selection_method, pca_selected_pcs: taken parameters integration method.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/sce_int_processed_fn.html","id":null,"dir":"Reference","previous_headings":"","what":"Subset each object in a list of SingleCellExperiment objects to common data and their corresponding\nmetadata (e.g. HVGs). — sce_int_processed_fn","title":"Subset each object in a list of SingleCellExperiment objects to common data and their corresponding\nmetadata (e.g. HVGs). — sce_int_processed_fn","text":"subset SingleCellExperiment objects common: Features HVGs (whose data saved metadata). Column data (colData()). Columns starting \"cluster_\" renamed \"cluster_<batch>\", e.g. \"cluster_sc3_3_pbmc1k\".","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/sce_int_processed_fn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subset each object in a list of SingleCellExperiment objects to common data and their corresponding\nmetadata (e.g. HVGs). — sce_int_processed_fn","text":"","code":"sce_int_processed_fn(sce_int_raw)"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/sce_int_processed_fn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subset each object in a list of SingleCellExperiment objects to common data and their corresponding\nmetadata (e.g. HVGs). — sce_int_processed_fn","text":"sce_int_raw (input target) named list SingleCellExperiment objects.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/sce_int_processed_fn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subset each object in a list of SingleCellExperiment objects to common data and their corresponding\nmetadata (e.g. HVGs). — sce_int_processed_fn","text":"list SingleCellExperiment objects. Output target: sce_int_processed following items metadata() SingleCellExperiment object added modified: hvg_ids, hvg_metric_fit: subsetted common features. n_features_orig: integer scalar: number features (rows) subsetting common space.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/sce_int_raw_snn_clustering_fn.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform a fast shared nearest neighbor clustering of each sample. — sce_int_raw_snn_clustering_fn","title":"Perform a fast shared nearest neighbor clustering of each sample. — sce_int_raw_snn_clustering_fn","text":"Clustering used integration diagnostics.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/sce_int_raw_snn_clustering_fn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform a fast shared nearest neighbor clustering of each sample. — sce_int_raw_snn_clustering_fn","text":"","code":"sce_int_raw_snn_clustering_fn(   sce_int_raw,   snn_k = 10L,   snn_type = \"rank\",   snn_clustering_method = c(\"walktrap\", \"louvain\"),   BPPARAM = BiocParallel::SerialParam() )"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/sce_int_raw_snn_clustering_fn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform a fast shared nearest neighbor clustering of each sample. — sce_int_raw_snn_clustering_fn","text":"sce_int_raw (input target) named list SingleCellExperiment objects. snn_k integer scalar: number nearest neighbors. Passed scran::buildSNNGraph(). snn_type character scalar: type weighting scheme use shared neighbors. Passed scran::buildSNNGraph(). snn_clustering_method character scalar: type graph clustering method: \"walktrap\": igraph::cluster_walktrap() \"louvain\": igraph::cluster_louvain() BPPARAM BiocParallel::BiocParallelParam object.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/sce_int_raw_snn_clustering_fn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform a fast shared nearest neighbor clustering of each sample. — sce_int_raw_snn_clustering_fn","text":"list SingleCellExperiment objects. Output target: sce_int_raw_snn_clustering","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/sce_norm.html","id":null,"dir":"Reference","previous_headings":"","what":"Normalize counts either by scran or sctransform. — sce_norm_fn","title":"Normalize counts either by scran or sctransform. — sce_norm_fn","text":"Normalize counts either scran sctransform.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/sce_norm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Normalize counts either by scran or sctransform. — sce_norm_fn","text":"","code":"sce_norm_fn(sce_cc, norm_type = c(\"scran\", \"sctransform\", \"none\"), ...)  scran_normalization(   sce,   use_quickcluster = TRUE,   quickcluster_method = c(\"igraph\", \"hclust\"),   BSPARAM = BiocSingular::IrlbaParam(),   BPPARAM = BiocParallel::SerialParam(),   ... )  sctransform_normalization(   sce,   vars_to_regress = NULL,   n_hvg = 3000L,   method = \"glmGamPoi\",   seed = 1L,   verbose = TRUE,   ... )"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/sce_norm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Normalize counts either by scran or sctransform. — sce_norm_fn","text":"sce_cc (input target) SingleCellExperiment object. norm_type character scalar: type normalization. ... Passed scran_normalization() sctransform_normalization(). sce SingleCellExperiment object. use_quickcluster logical scalar: TRUE, scran::quickCluster() prior normalization. quickcluster_method character scalar: clustering method: \"igraph\" uses graph-based clustering \"hclust\" uses hierarchical clustering See ?scran::quickCluster details. BSPARAM BiocSingular::BiocSingularParam object. BPPARAM BiocParallel::BiocParallelParam object. vars_to_regress list character scalars: variables regress normalization. Passed Seurat::SCTransform(). n_hvg integer scalar: number HVGs take. Passed Seurat::SCTransform(). method character scalar: passed Seurat::SCTransform(). seed integer scalar: passed Seurat::SCTransform(). verbose logical scalar: passed Seurat::SCTransform().","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/sce_norm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Normalize counts either by scran or sctransform. — sce_norm_fn","text":"SingleCellExperiment object. normalization_type = norm_type appended metadata() returned SingleCellExperiment object. Output target: sce_norm following items added metadata() returned SingleCellExperiment object: normalization_type: value norm_type function argument. norm_type = \"sctransform\": sctransform_hvg_ids, sctransform_pearson_residuals, sctransform_vst., sctransform_model_list.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/sce_norm.html","id":"sctransform-normalization-","dir":"Reference","previous_headings":"","what":"sctransform_normalization()","title":"Normalize counts either by scran or sctransform. — sce_norm_fn","text":"Seurat::SCTransform() returning counts log1p (natural log) scale, transformed log2.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/sce_norm_hvg_fn.html","id":null,"dir":"Reference","previous_headings":"","what":"Find highly variable genes (HVGs). — sce_norm_hvg_fn","title":"Find highly variable genes (HVGs). — sce_norm_hvg_fn","text":"Prior HVG selection, cell cycle-related gene can removed. details see HVG selection section 02_norm_clustering.yaml config.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/sce_norm_hvg_fn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find highly variable genes (HVGs). — sce_norm_hvg_fn","text":"","code":"sce_norm_hvg_fn(   sce_norm,   hvg_selection_value,   hvg_metric = c(\"gene_var\", \"gene_cv2\", \"sctransform\"),   hvg_selection = c(\"top\", \"significance\", \"threshold\"),   hvg_rm_cc_genes = FALSE,   hvg_cc_genes_var_expl_threshold = 5,   spatial = FALSE,   BSPARAM = BiocSingular::IrlbaParam(),   BPPARAM = BiocParallel::SerialParam() )"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/sce_norm_hvg_fn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find highly variable genes (HVGs). — sce_norm_hvg_fn","text":"sce_norm (input target) SingleCellExperiment object. hvg_selection_value, hvg_metric, hvg_selection Passed get_top_hvgs() - see help page. hvg_rm_cc_genes logical scalar: TRUE, remove cell cycle-related genes exceeding hvg_cc_genes_var_expl_threshold prior HVG selection. hvg_cc_genes_var_expl_threshold numeric scalar: threshold variance explained. Genes exceeding threshold marked CC-related. spatial logical scalar: TRUE, add spatially variable genes extension BSPARAM BiocSingular::BiocSingularParam object. BPPARAM BiocParallel::BiocParallelParam object.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/sce_norm_hvg_fn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find highly variable genes (HVGs). — sce_norm_hvg_fn","text":"modified sce_norm object added HVG data metadata(). Output target: sce_norm_hvg following items metadata(sce_norm) added modified: hvg_metric, hvg_selection, hvg_selection_value, hvg_rm_cc_genes, hvg_cc_genes_var_expl_threshold: values passed function. hvg_metric_fit: either DataFrame returned scran::modelGeneVar() scran::modelGeneCV2(), feature.attributes dataframe returned Seurat::SCTransform(). Values added sce_remove_cc_genes(). hvg_ids: character vector HVG ENSEMBL IDs.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/sce_raw_fn.html","id":null,"dir":"Reference","previous_headings":"","what":"Import scRNA-seq data. — sce_raw_fn","title":"Import scRNA-seq data. — sce_raw_fn","text":"details see INPUT_DATA parameter vignette(\"stage_input_qc\").","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/sce_raw_fn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import scRNA-seq data. — sce_raw_fn","text":"","code":"sce_raw_fn(input_data, input_data_subset = NULL)"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/sce_raw_fn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import scRNA-seq data. — sce_raw_fn","text":"input_data named list named lists containing character scalars: type: \"cellranger\": raw feature-barcode matrix 10x Genomics cellranger \"table\": delimited text file (table) \"sce\": SingleCellExperiment object (Rds file) \"sce_drake_cache\": SingleCellExperiment object loaded drake cache path: path input file (directory case type = \"cellranger\") delimiter: field delimiter type = \"table\" target_name: name SingleCellExperiment target type = \"sce_drake_cache\" input_data_subset NULL named list subsetting imported data performed. list must contain following items: subset_by (character scalar): name column colData() use subsetting values (vector): values subset negate (logical scalar): TRUE, negate selection","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/sce_raw_fn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import scRNA-seq data. — sce_raw_fn","text":"SingleCellExperiment object. Output target: sce_raw","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/sce_remove_cc_genes.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove cell cycle-related genes from HVGs. — sce_remove_cc_genes","title":"Remove cell cycle-related genes from HVGs. — sce_remove_cc_genes","text":"Remove cell cycle-related genes HVGs.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/sce_remove_cc_genes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove cell cycle-related genes from HVGs. — sce_remove_cc_genes","text":"","code":"sce_remove_cc_genes(   sce,   var_expl_threshold,   variable = \"phase\",   hvg_metric_fit = NULL,   ... )"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/sce_remove_cc_genes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove cell cycle-related genes from HVGs. — sce_remove_cc_genes","text":"sce SingleCellExperiment object. var_expl_threshold numeric scalar: threshold variance explained. Genes exceeding threshold marked CC-related. variable character scalar: column use variance explained computation. hvg_metric_fit DataFrame object. ... Passed get_top_hvgs().","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/sce_remove_cc_genes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove cell cycle-related genes from HVGs. — sce_remove_cc_genes","text":"SingleCellExperiment object removed CC-related genes HVGs. is_cc_related logical column appended rowData(sce). following items metadata(sce) added modified: hvg_cc_genes_var_expl_threshold: value var_expl_threshold. hvg_ids: CC-related genes found, IDs removed. hvg_rm_cc_genes_ids: IDs CC-related genes. found, empty vector. Note CC-related genes removed metadata(sce)$hvg_metric_fit.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/sce_rm_doublets_fn.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove cell doublets from a SingleCellExperiment object. — sce_rm_doublets_fn","title":"Remove cell doublets from a SingleCellExperiment object. — sce_rm_doublets_fn","text":"Remove cell doublets SingleCellExperiment object.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/sce_rm_doublets_fn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove cell doublets from a SingleCellExperiment object. — sce_rm_doublets_fn","text":"","code":"sce_rm_doublets_fn(sce_norm_hvg, doublet_density, max_doublet_score)"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/sce_rm_doublets_fn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove cell doublets from a SingleCellExperiment object. — sce_rm_doublets_fn","text":"sce_norm_hvg (input target) SingleCellExperiment object. doublet_density (input target) numeric vector. max_doublet_score numeric scalar: cells doublet score (log10(doublet_density + 1)) exceeding value marked doublets removed sce_norm_hvg. NULL, cells filtered .","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/sce_rm_doublets_fn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove cell doublets from a SingleCellExperiment object. — sce_rm_doublets_fn","text":"modified sce_norm_hvg object removed cell doublets. following items metadata(sce_norm_hvg) added modified: has_filtered_doublets: TRUE max_doublet_score NULL. max_doublet_score: value max_doublet_score function argument.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/sce_selected_fn.html","id":null,"dir":"Reference","previous_headings":"","what":"Select a SingleCellExperiment object which will proceed to the 02_norm_clustering stage. — sce_selected_fn","title":"Select a SingleCellExperiment object which will proceed to the 02_norm_clustering stage. — sce_selected_fn","text":"Select SingleCellExperiment object proceed 02_norm_clustering stage.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/sce_selected_fn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select a SingleCellExperiment object which will proceed to the 02_norm_clustering stage. — sce_selected_fn","text":"","code":"sce_selected_fn(   sce_qc_filter_genes,   sce_custom_filter_genes,   save_dataset_sensitive_filtering )"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/sce_selected_fn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select a SingleCellExperiment object which will proceed to the 02_norm_clustering stage. — sce_selected_fn","text":"sce_qc_filter_genes (input target) SingleCellExperiment object. sce_custom_filter_genes (input target) SingleCellExperiment object. save_dataset_sensitive_filtering logical scalar: TRUE, return sce_qc_filter_genes target, otherwise sce_custom_filter_genes target (SingleCellExperiment objects).","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/sce_selected_fn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select a SingleCellExperiment object which will proceed to the 02_norm_clustering stage. — sce_selected_fn","text":"See save_dataset_sensitive_filtering argument. Output target: sce_selected","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/sce_valid_cells_fn.html","id":null,"dir":"Reference","previous_headings":"","what":"Subset cells in a SingleCellExperiment object to non-empty ones and add corresponding statistics. — sce_valid_cells_fn","title":"Subset cells in a SingleCellExperiment object to non-empty ones and add corresponding statistics. — sce_valid_cells_fn","text":"Subset cells SingleCellExperiment object non-empty ones add corresponding statistics.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/sce_valid_cells_fn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subset cells in a SingleCellExperiment object to non-empty ones and add corresponding statistics. — sce_valid_cells_fn","text":"","code":"sce_valid_cells_fn(sce_raw, empty_droplets, empty_droplets_fdr_threshold)"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/sce_valid_cells_fn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subset cells in a SingleCellExperiment object to non-empty ones and add corresponding statistics. — sce_valid_cells_fn","text":"sce_raw (input target) SingleCellExperiment object. empty_droplets (input target) DataFrame object returned DropletUtils::emptyDrops(). empty_droplets_fdr_threshold numeric scalar: threshold value FDR cell empty.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/sce_valid_cells_fn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subset cells in a SingleCellExperiment object to non-empty ones and add corresponding statistics. — sce_valid_cells_fn","text":"subsetted sce_raw object. Output target: sce_valid_cells","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/scran_markers.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute cell cluster markers. — scran_markers","title":"Compute cell cluster markers. — scran_markers","text":"wrapper around scran::findMarkers(). Depending test type, stats.* columns returned DataFrame replaced either lfc_* auc_*. DataFrames results appended params tibble, scran::findMarkers() returns DataFrame level factor, unnested returned tibble. means row params get result (row) tested level.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/scran_markers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute cell cluster markers. — scran_markers","text":"","code":"scran_markers(sce, params, markers_type = c(\"global\", \"contrast\"))"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/scran_markers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute cell cluster markers. — scran_markers","text":"sce SingleCellExperiment object normalized log-expression values following rowData() columns: \"ENSEMBL\", \"ENTREZID\", \"SYMBOL\", \"GENENAME\". params tibble. See cluster_markers_test_params contrasts_test_params target details. markers_type character scalar: type markers get. \"contrast\", following parameters always used scran::findMarkers(): direction = \"\" pval.type = \"\" min.prop = NULL","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/scran_markers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute cell cluster markers. — scran_markers","text":"tibble.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/selected_markers_dimplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a grid of feature plots for selected markers. — selected_markers_dimplot","title":"Make a grid of feature plots for selected markers. — selected_markers_dimplot","text":"Make grid feature plots selected markers.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/selected_markers_dimplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a grid of feature plots for selected markers. — selected_markers_dimplot","text":"","code":"selected_markers_dimplot(   sce,   dimred,   selected_markers_df,   assay = \"logcounts\",   low_color = \"lightgrey\",   high_color = \"red\",   combine = TRUE )"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/selected_markers_dimplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a grid of feature plots for selected markers. — selected_markers_dimplot","text":"sce SingleCellExperiment object. dimred character scalar: name dimred plot. selected_markers_df dataframe-like object two character columns: group: marker group. markers: gene symbols markers separated \":\". dataframe created CSV file defined SELECTED_MARKERS_FILE parameter e.g. 02_norm_clustering.yaml config. Input target: selected_markers_df selected_markers_int_df assay character scalar: name assay sce used. low_color, high_color Passed list(low = low_color, high = high_color) plotReducedDim_mod(). combine logical scalar: TRUE, combine plots single patchwork object, otherwise return list ggplot2 objects.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/selected_markers_dimplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a grid of feature plots for selected markers. — selected_markers_dimplot","text":"See combine argument.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/selected_markers_int_df_fn.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare parameters for expression plots of selected markers. — selected_markers_int_df_fn","title":"Prepare parameters for expression plots of selected markers. — selected_markers_int_df_fn","text":"Prepare parameters expression plots selected markers.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/selected_markers_int_df_fn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare parameters for expression plots of selected markers. — selected_markers_int_df_fn","text":"","code":"selected_markers_int_df_fn(selected_markers_file, sce_int_dimred_df)"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/selected_markers_int_df_fn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare parameters for expression plots of selected markers. — selected_markers_int_df_fn","text":"selected_markers_file character scalar: path CSV file marker definitions. Defined SELECTED_MARKERS_FILE parameter 01_integration.yaml config. sce_int_dimred_df (input target) tibble.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/selected_markers_int_df_fn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare parameters for expression plots of selected markers. — selected_markers_int_df_fn","text":"modified sce_int_dimred_df tibble. Output target: selected_markers_int_df","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/selected_markers_int_plots_df_fn.html","id":null,"dir":"Reference","previous_headings":"","what":"Make expression plots of selected markers. — selected_markers_int_plots_df_fn","title":"Make expression plots of selected markers. — selected_markers_int_plots_df_fn","text":"Make expression plots selected markers.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/selected_markers_int_plots_df_fn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make expression plots of selected markers. — selected_markers_int_plots_df_fn","text":"","code":"selected_markers_int_plots_df_fn(selected_markers_int_df, sce_int_dimred_df)"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/selected_markers_int_plots_df_fn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make expression plots of selected markers. — selected_markers_int_plots_df_fn","text":"selected_markers_int_df (input target) tibble. sce_int_dimred_df (input target) tibble.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/selected_markers_int_plots_df_fn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make expression plots of selected markers. — selected_markers_int_plots_df_fn","text":"modified selected_markers_int_df tibble. Output target: selected_markers_int_plots_df","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/selected_markers_plots_fn.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a grid of feature plots for selected genes. — selected_markers_plots_fn","title":"Make a grid of feature plots for selected genes. — selected_markers_plots_fn","text":"Make grid feature plots selected genes.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/selected_markers_plots_fn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a grid of feature plots for selected genes. — selected_markers_plots_fn","text":"","code":"selected_markers_plots_fn(sce_final_norm_clustering, selected_markers_df)"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/selected_markers_plots_fn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a grid of feature plots for selected genes. — selected_markers_plots_fn","text":"sce_final_norm_clustering (input target) SingleCellExperiment object. selected_markers_df (input target) tibble.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/selected_markers_plots_fn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a grid of feature plots for selected genes. — selected_markers_plots_fn","text":"tibble. Output target: selected_markers_plots","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/set_rstudio_drake_cache.html","id":null,"dir":"Reference","previous_headings":"","what":"Set rstudio_drake_cache option. — set_rstudio_drake_cache","title":"Set rstudio_drake_cache option. — set_rstudio_drake_cache","text":"Value option used internally drake \"loadd target cursor\" (can set Tools -> Modify Keyboard Shortcuts). shortcut call loadd(<name target cursor>, cache = getOptions(\"rstudio_drake_cache\")).","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/set_rstudio_drake_cache.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set rstudio_drake_cache option. — set_rstudio_drake_cache","text":"","code":"set_rstudio_drake_cache(dir, verbose = TRUE)"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/set_rstudio_drake_cache.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set rstudio_drake_cache option. — set_rstudio_drake_cache","text":"dir character scalar: path directory drake cache. verbose logical scalar: TRUE, verbose.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/set_rstudio_drake_cache.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set rstudio_drake_cache option. — set_rstudio_drake_cache","text":"Invisibly TRUE dir exists, FALSE otherwise.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/seu_add_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Append data to metadata o a Seurat object's assay. — seu_add_metadata","title":"Append data to metadata o a Seurat object's assay. — seu_add_metadata","text":"Append data metadata o Seurat object's assay.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/seu_add_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Append data to metadata o a Seurat object's assay. — seu_add_metadata","text":"","code":"seu_add_metadata(seu, assay = \"RNA\", ...)"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/seu_add_metadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Append data to metadata o a Seurat object's assay. — seu_add_metadata","text":"seu Seurat object. assay character scalar: name assay. ... Objects added","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/seu_add_metadata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Append data to metadata o a Seurat object's assay. — seu_add_metadata","text":"modified seu object data appended assay metadata.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/spatGenePlot2Dsce.html","id":null,"dir":"Reference","previous_headings":"","what":"A function for visualization selected genes in pseudotissue visualization — spatGenePlot2Dsce","title":"A function for visualization selected genes in pseudotissue visualization — spatGenePlot2Dsce","text":"Adapted function Giotto package Dries et al, 2021, rewrite use scdrake package SingleCellExperiment object","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/spatGenePlot2Dsce.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function for visualization selected genes in pseudotissue visualization — spatGenePlot2Dsce","text":"","code":"spatGenePlot2Dsce(   sce,   sdimx = \"Dims_x\",   sdimy = \"Dims_y\",   expression_values = c(\"counts\", \"logcounts\"),   genes,   cell_color_gradient = c(\"blue\", \"white\", \"red\"),   gradient_midpoint = NULL,   gradient_limits = NULL,   edge_alpha = NULL,   scale_alpha_with_expression = FALSE,   point_shape = c(\"border\", \"no_border\"),   point_size = 1,   point_alpha = 1,   point_border_col = \"black\",   point_border_stroke = 0.1,   show_legend = T,   legend_text = 8,   background_color = \"white\",   axis_text = 8,   axis_title = 8,   cow_n_col = 2,   cow_rel_h = 1,   cow_rel_w = 1,   cow_align = \"h\" )"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/spatGenePlot2Dsce.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function for visualization selected genes in pseudotissue visualization — spatGenePlot2Dsce","text":"sce SingleCellExperiment object.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/spatGenePlot2Dsce.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A function for visualization selected genes in pseudotissue visualization — spatGenePlot2Dsce","text":"ggplot2 object.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/text_utils_glue.html","id":null,"dir":"Reference","previous_headings":"","what":"Various wrappers around glue::glue() and cat(). — text_utils_glue","title":"Various wrappers around glue::glue() and cat(). — text_utils_glue","text":"Call glue() without trimming. Call glue() without trimming cat() result. Call glue() coerce result character. Call glue() without trimming coerce result character. Join character vector newlines cat result.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/text_utils_glue.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Various wrappers around glue::glue() and cat(). — text_utils_glue","text":"","code":"glue0(..., .envir = parent.frame())  catg0(..., .envir = parent.frame())  gluec(..., .envir = parent.frame())  glue0c(..., .envir = parent.frame())  catn(...)"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/text_utils_glue.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Various wrappers around glue::glue() and cat(). — text_utils_glue","text":"..., .envir Passed glue::glue().","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/text_utils_joining.html","id":null,"dir":"Reference","previous_headings":"","what":"Various utils for joining of text. — text_utils_joining","title":"Various utils for joining of text. — text_utils_joining","text":"Join character vectors commas spaces (optionally). Join character vectors newlines (\\n). Join character vector spaces.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/text_utils_joining.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Various utils for joining of text. — text_utils_joining","text":"","code":"str_comma(..., space = TRUE, collapse = TRUE)  str_line(..., collapse = TRUE)  str_space(..., collapse = TRUE)"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/text_utils_joining.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Various utils for joining of text. — text_utils_joining","text":"... Character vectors scalars. Passed stringr::str_c(). catn(), character vectors scalars join. space logical scalar: TRUE, add space commas. collapse logical scalar: TRUE, join also character vectors passed ....","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/text_utils_joining.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Various utils for joining of text. — text_utils_joining","text":"character scalar.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/update_config.html","id":null,"dir":"Reference","previous_headings":"","what":"Update a local YAML config file using a default one. — update_config","title":"Update a local YAML config file using a default one. — update_config","text":"update meant following: default config contains new parameter, appended local config. parameter present configs, value local config used. case local config exist, default one simply copied. See vignette(\"config\", package = \"scdrake\") details. update_config() update single config file. update_*_config() functions update specific config group (pipeline, single-sample, integration). update_configs() run update_*_config().","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/update_config.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update a local YAML config file using a default one. — update_config","text":"","code":"update_config(   default_file,   use_default_structure = FALSE,   force = FALSE,   yq_binary = getOption(\"scdrake_yq_binary\"),   verbose = getOption(\"scdrake_verbose\") )  update_pipeline_config(   dir = getOption(\"scdrake_pipeline_config_dir\"),   verbose = getOption(\"scdrake_verbose\"),   ... )  update_single_sample_configs(   dir = getOption(\"scdrake_single_sample_config_dir\"),   verbose = getOption(\"scdrake_verbose\"),   ... )  update_integration_configs(   dir = getOption(\"scdrake_integration_config_dir\"),   verbose = getOption(\"scdrake_verbose\"),   ... )  update_configs(   pipeline_config_dir = getOption(\"scdrake_pipeline_config_dir\"),   single_sample_config_dir = getOption(\"scdrake_single_sample_config_dir\"),   integration_config_dir = getOption(\"scdrake_integration_config_dir\"),   verbose = getOption(\"scdrake_verbose\"),   ... )"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/update_config.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update a local YAML config file using a default one. — update_config","text":"default_file character scalar: path default YAML config file. Must .default.yaml extension. use_default_structure logical scalar: TRUE, structure (comments, order parameters) default config used, otherwise structure local config preserved. See description details. force logical scalar: TRUE, overwrite local configs default ones (instead updating ). yq_binary character scalar: path yq tool's binary. verbose logical scalar: TRUE, verbose. default value obtained getOption(\"scdrake_verbose\"). dir character scalar: update_pipeline_config(): path directory pipeline.default.yaml file. update_single_sample_configs(): path directory 00_main.default.yaml, 01_input_qc.default.yaml, 02_norm_clustering.default.yaml, cluster_markers.default.yaml, contrasts.default.yaml files. update_integration_configs(): path directory 00_main.default.yaml, 01_integration.default.yaml, 02_int_clustering.default.yaml, cluster_markers.default.yaml, contrasts.default.yaml files. ... Passed update_config(). pipeline_config_dir Passed update_pipeline_config(). single_sample_config_dir Passed update_single_sample_configs(). integration_config_dir Passed update_integration_configs().","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/update_config.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update a local YAML config file using a default one. — update_config","text":"Invisibly NULL.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/update_config.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Update a local YAML config file using a default one. — update_config","text":"Internally, yq tool (version 3) used merging YAML files.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/update_config.html","id":"using-default-config-structure","dir":"Reference","previous_headings":"","what":"Using default config structure","title":"Update a local YAML config file using a default one. — update_config","text":"Consider following example config update, showing also differences use_default_structure parameter: Default config:   Local config:   use_default_structure = TRUE, result update :   use_default_structure = FALSE:   NOTE: yq tool, used internally merging (updating) YAML files, ovewrite comments, thus need use schema preserve local structure.","code":"# Comment 1. PARAM_1: 1 PARAM_2: 2 PARAM_3: 3 # Comment 2. PARAM_2: 6 # Comment 3. PARAM_1: 5 # Comment 1. PARAM_1: 5 PARAM_2: 6 PARAM_3: 3 # Comment 2. PARAM_2: 6 # Comment 3. PARAM_1: 5 PARAM_3: 3"},{"path":[]},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/update_config.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update a local YAML config file using a default one. — update_config","text":"","code":"# If a scdrake project is in the current working directory. if (FALSE) { update_config(\"config/pipeline.default.yaml\") }  if (FALSE) { update_pipeline_config(\"config\") }  if (FALSE) { update_single_sample_configs(\"config/single_sample\") } if (FALSE) { update_integration_configs(\"config/integration\") }"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/update_config_group.html","id":null,"dir":"Reference","previous_headings":"","what":"Update a group of configs, i.e. pipeline, single-sample, or integration. — update_config_group","title":"Update a group of configs, i.e. pipeline, single-sample, or integration. — update_config_group","text":"Update group configs, .e. pipeline, single-sample, integration.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/update_config_group.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update a group of configs, i.e. pipeline, single-sample, or integration. — update_config_group","text":"dir character scalar: update_pipeline_config(): path directory pipeline.default.yaml file. update_single_sample_configs(): path directory 00_main.default.yaml, 01_input_qc.default.yaml, 02_norm_clustering.default.yaml, cluster_markers.default.yaml, contrasts.default.yaml files. update_integration_configs(): path directory 00_main.default.yaml, 01_integration.default.yaml, 02_int_clustering.default.yaml, cluster_markers.default.yaml, contrasts.default.yaml files. ... Passed update_config().","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/update_project.html","id":null,"dir":"Reference","previous_headings":"","what":"Update scdrake project files. — update_project","title":"Update scdrake project files. — update_project","text":"overwrite project files package-bundled ones: RMarkdown documents Rmd/ Initial scripts drake::r_make(): _drake_single_sample.R _drake_integration.R Default YAML configs. location can set *_config_dir parameters.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/update_project.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update scdrake project files. — update_project","text":"","code":"update_project(   dir = \".\",   pipeline_config_dir = getOption(\"scdrake_pipeline_config_dir\"),   single_sample_config_dir = getOption(\"scdrake_single_sample_config_dir\"),   integration_config_dir = getOption(\"scdrake_integration_config_dir\"),   ask = TRUE,   verbose = getOption(\"scdrake_verbose\") )"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/update_project.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update scdrake project files. — update_project","text":"dir character scalar: path scdrake project directory. NULL, current working directory used (default: \".\"). pipeline_config_dir character scalar: path directory pipeline config file (pipeline.yaml). single_sample_config_dir character scalar: path directory 00_main.yaml, 01_input_qc.yaml, 02_norm_clustering.yaml, cluster_markers.yaml, contrasts.yaml files. integration_config_dir character scalar: path directory 00_main.yaml, 01_integration.yaml, 02_int_clustering.yaml, cluster_markers.yaml, contrasts.yaml files. ask logical scalar: TRUE, ask updating files. verbose logical scalar: TRUE, verbose. default value obtained getOption(\"scdrake_verbose\").","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/update_project.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update scdrake project files. — update_project","text":"Invisibly NULL.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/visualized_spots.html","id":null,"dir":"Reference","previous_headings":"","what":"A basic function for pseudotissue visualization — visualized_spots","title":"A basic function for pseudotissue visualization — visualized_spots","text":"Adapted function Giotto package Dries et al, 2021, rewrite use scdrake package SingleCellExperiment object","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/visualized_spots.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A basic function for pseudotissue visualization — visualized_spots","text":"","code":"visualized_spots(   sce,   sdimx = \"Dims_x\",   sdimy = \"Dims_y\",   spat_enr_names = NULL,   cell_color = NULL,   color_as_factor = F,   cell_color_code = NULL,   cell_color_gradient = c(\"navy\", \"lightcyan\", \"red\"),   gradient_midpoint = NULL,   gradient_limits = NULL,   select_cells = NULL,   point_shape = c(\"border\", \"no_border\"),   point_size = 3,   point_alpha = 1,   point_border_col = \"black\",   point_border_stroke = 0.1,   label_size = 4,   label_fontface = \"bold\",   show_other_cells = T,   other_cell_color = \"lightgrey\",   other_point_size = 1,   other_cells_alpha = 0.1,   coord_fix_ratio = NULL,   title = NULL,   show_legend = T,   legend_text = 8,   legend_symbol_size = 1,   background_color = \"white\",   axis_text = 8,   axis_title = 8 )"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/visualized_spots.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A basic function for pseudotissue visualization — visualized_spots","text":"sce SingleCellExperiment object. cell_color, color_as_factor, cell_color_code, ... Passed ggplot2 object plot_spat_point_layer_ggplot function","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/visualized_spots.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A basic function for pseudotissue visualization — visualized_spots","text":"ggplot2 object.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/which_genes_regex.html","id":null,"dir":"Reference","previous_headings":"","what":"Get indices of genes whose annotation matches a regex. — which_genes_regex","title":"Get indices of genes whose annotation matches a regex. — which_genes_regex","text":"Get indices genes whose annotation matches regex.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/which_genes_regex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get indices of genes whose annotation matches a regex. — which_genes_regex","text":"","code":"which_genes_regex(sce, regex, colname = \"Symbol\", ignore_case = TRUE)"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/which_genes_regex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get indices of genes whose annotation matches a regex. — which_genes_regex","text":"sce SingleCellExperiment object. regex character scalar. colname character scalar: name column rowData(sce) whose values tested regex. ignore_case logical scalar: TRUE, ignore case regex.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/which_genes_regex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get indices of genes whose annotation matches a regex. — which_genes_regex","text":"integer vector: indices rowData(sce) matching regex.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/which_genes_regex.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get indices of genes whose annotation matches a regex. — which_genes_regex","text":"","code":"if (FALSE) { # Indices of mitochondrial genes. which_genes_regex(sce, regex = \"^MT-\", colname = \"Symbol\", ignore_case = TRUE) }"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/with_dbi.html","id":null,"dir":"Reference","previous_headings":"","what":"Load a SQL database file and run a function from the AnnotationDbi package. — with_dbi","title":"Load a SQL database file and run a function from the AnnotationDbi package. — with_dbi","text":"AnnotationDbi object used parallel, workaround.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/with_dbi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load a SQL database file and run a function from the AnnotationDbi package. — with_dbi","text":"","code":"with_dbi(annotation_db_file, dbi_fun, ...)"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/with_dbi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load a SQL database file and run a function from the AnnotationDbi package. — with_dbi","text":"annotation_db_file character scalar: path SQLite file annotation DB, e.g. org.Hs.eg.db$conn@dbname. dbi_fun function AnnotationDbi package accepts AnnotationDbi object parameter x, e.g. AnnotationDbi::mapIds(). ... Parameters passed dbi_fun.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/with_dbi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load a SQL database file and run a function from the AnnotationDbi package. — with_dbi","text":"output dbi_fun.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/with_plan.html","id":null,"dir":"Reference","previous_headings":"","what":"Locally change a future plan. — with_plan","title":"Locally change a future plan. — with_plan","text":"https://github.com/HenrikBengtsson/future/issues/263","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/with_plan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Locally change a future plan. — with_plan","text":"","code":"with_plan(expr, ..., envir = parent.frame())"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/with_plan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Locally change a future plan. — with_plan","text":"expr expression evaluate using future plan. ... Passed future::plan(). Pass plan , e.g. future::sequential. envir environment evaluate expr.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/with_plan.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Locally change a future plan. — with_plan","text":"Value returned expr.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/with_plan.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Locally change a future plan. — with_plan","text":"","code":"with_plan(1 + 1, future::sequential) #> [1] 2"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/yq_merge_cmd.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge two YAML files using the yq tool. — yq_merge_cmd","title":"Merge two YAML files using the yq tool. — yq_merge_cmd","text":"Merge two YAML files using yq tool.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/yq_merge_cmd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge two YAML files using the yq tool. — yq_merge_cmd","text":"","code":"yq_merge_cmd(   f1,   f2,   stdout = TRUE,   check_yq = TRUE,   check_exit = TRUE,   yq_binary = getOption(\"scdrake_yq_binary\") )"},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/yq_merge_cmd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge two YAML files using the yq tool. — yq_merge_cmd","text":"f1, f2 character scalar: path YAML file. f2 file whose parameters overwrite f1. stdout character logical scalar, NULL: passed base::system2(). character scalar: path file resulting merged YAML file written. empty string (\"\"), result written R console. logical scalar TRUE: return stdout character scalar. logical scalar FALSE, NULL: discard stdout. check_yq logical scalar: TRUE, check yq tool presence check_yq() prior merging. check_exit logical scalar: TRUE stdout FALSE, check exit code shell command used merging. yq_binary character scalar: path yq tool's binary.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/reference/yq_merge_cmd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge two YAML files using the yq tool. — yq_merge_cmd","text":"output base::system2() - depends stdout argument.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/required_libs_linux.html","id":null,"dir":"","previous_headings":"","what":"Required libraries for Linux systems","title":"Required libraries for Linux systems","text":"can find commands install required libraries different Linux distributions releases. sure release using, check contents /etc/os-release file. Don’t forget update package database package manager. E.g. Ubuntu: sudo apt update ubuntu 20.04 ubuntu 18.04 ubuntu 16.04 sle 12.3 redhat 8 redhat 7 opensuse 42.3 centos 8 centos 7","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/required_libs_linux.html","id":"ubuntu-2004","dir":"","previous_headings":"","what":"ubuntu 20.04","title":"Required libraries for Linux systems","text":"","code":"sudo apt-get install -y libglpk-dev sudo apt-get install -y libgmp3-dev sudo apt-get install -y libxml2-dev sudo apt-get install -y pandoc sudo apt-get install -y make sudo apt-get install -y libicu-dev sudo apt-get install -y libcurl4-openssl-dev sudo apt-get install -y libssl-dev sudo apt-get install -y libfontconfig1-dev sudo apt-get install -y libfreetype6-dev sudo apt-get install -y libpng-dev sudo apt-get install -y imagemagick sudo apt-get install -y libmagick++-dev sudo apt-get install -y gsfonts sudo apt-get install -y python3 sudo apt-get install -y zlib1g-dev sudo apt-get install -y git sudo apt-get install -y libgit2-dev sudo apt-get install -y libzmq3-dev sudo apt-get install -y libfribidi-dev sudo apt-get install -y libharfbuzz-dev sudo apt-get install -y libjpeg-dev sudo apt-get install -y libtiff-dev"},{"path":"https://bioinfocz.github.io/scdrake/dev/required_libs_linux.html","id":"ubuntu-1804","dir":"","previous_headings":"","what":"ubuntu 18.04","title":"Required libraries for Linux systems","text":"","code":"sudo apt-get install -y software-properties-common sudo add-apt-repository -y ppa:cran/libgit2 sudo apt-get update sudo apt-get install -y libglpk-dev sudo apt-get install -y libgmp3-dev sudo apt-get install -y libxml2-dev sudo apt-get install -y pandoc sudo apt-get install -y make sudo apt-get install -y libicu-dev sudo apt-get install -y libcurl4-openssl-dev sudo apt-get install -y libssl-dev sudo apt-get install -y libfontconfig1-dev sudo apt-get install -y libfreetype6-dev sudo apt-get install -y libpng-dev sudo apt-get install -y imagemagick sudo apt-get install -y libmagick++-dev sudo apt-get install -y gsfonts sudo apt-get install -y python3 sudo apt-get install -y zlib1g-dev sudo apt-get install -y git sudo apt-get install -y libgit2-dev sudo apt-get install -y libzmq3-dev sudo apt-get install -y libfribidi-dev sudo apt-get install -y libharfbuzz-dev sudo apt-get install -y libjpeg-dev sudo apt-get install -y libtiff-dev"},{"path":"https://bioinfocz.github.io/scdrake/dev/required_libs_linux.html","id":"ubuntu-1604","dir":"","previous_headings":"","what":"ubuntu 16.04","title":"Required libraries for Linux systems","text":"","code":"sudo apt-get install -y software-properties-common sudo add-apt-repository -y ppa:cran/libgit2 sudo apt-get update sudo apt-get install -y libglpk-dev sudo apt-get install -y libgmp3-dev sudo apt-get install -y libxml2-dev sudo apt-get install -y pandoc sudo apt-get install -y make sudo apt-get install -y libicu-dev sudo apt-get install -y libcurl4-openssl-dev sudo apt-get install -y libssl-dev sudo apt-get install -y libfontconfig1-dev sudo apt-get install -y libfreetype6-dev sudo apt-get install -y libpng-dev sudo apt-get install -y imagemagick sudo apt-get install -y libmagick++-dev sudo apt-get install -y gsfonts sudo apt-get install -y python3 sudo apt-get install -y zlib1g-dev sudo apt-get install -y git sudo apt-get install -y libgit2-dev sudo apt-get install -y libzmq3-dev sudo apt-get install -y libfribidi-dev sudo apt-get install -y libharfbuzz-dev sudo apt-get install -y libjpeg-dev sudo apt-get install -y libtiff-dev"},{"path":"https://bioinfocz.github.io/scdrake/dev/required_libs_linux.html","id":"sle-123","dir":"","previous_headings":"","what":"sle 12.3","title":"Required libraries for Linux systems","text":"","code":"sudo zypper install -y gmp-devel sudo zypper install -y libxml2-devel sudo zypper install -y make sudo zypper install -y libicu-devel sudo zypper install -y libcurl-devel sudo zypper install -y libopenssl-devel sudo zypper install -y fontconfig-devel sudo zypper install -y freetype2-devel sudo zypper install -y libpng16-compat-devel sudo zypper install -y ImageMagick sudo zypper install -y ImageMagick-devel sudo zypper install -y libMagick++-devel sudo zypper install -y python sudo zypper install -y zlib-devel sudo zypper install -y git sudo zypper install -y libgit2-24 sudo zypper install -y zeromq-devel sudo zypper install -y libjpeg8-devel sudo zypper install -y libtiff-devel"},{"path":"https://bioinfocz.github.io/scdrake/dev/required_libs_linux.html","id":"redhat-8","dir":"","previous_headings":"","what":"redhat 8","title":"Required libraries for Linux systems","text":"","code":"sudo dnf install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm sudo subscription-manager repos --enable codeready-builder-for-rhel-8-x86_64-rpms sudo dnf install -y glpk-devel sudo dnf install -y gmp-devel sudo dnf install -y libxml2-devel sudo dnf install -y make sudo dnf install -y libicu-devel sudo dnf install -y libcurl-devel sudo dnf install -y openssl-devel sudo dnf install -y fontconfig-devel sudo dnf install -y freetype-devel sudo dnf install -y libpng-devel sudo dnf install -y ImageMagick sudo dnf install -y ImageMagick-c++ sudo dnf install -y python2 sudo dnf install -y zlib-devel sudo dnf install -y git sudo dnf install -y libgit2-devel sudo dnf install -y zeromq-devel sudo dnf install -y fribidi-devel sudo dnf install -y harfbuzz-devel sudo dnf install -y libjpeg-turbo-devel sudo dnf install -y libtiff-devel"},{"path":"https://bioinfocz.github.io/scdrake/dev/required_libs_linux.html","id":"redhat-7","dir":"","previous_headings":"","what":"redhat 7","title":"Required libraries for Linux systems","text":"","code":"sudo rpm -q epel-release || yum install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm sudo yum install -y glpk-devel sudo yum install -y gmp-devel sudo yum install -y libxml2-devel sudo yum install -y pandoc sudo yum install -y make sudo yum install -y libicu-devel sudo yum install -y libcurl-devel sudo yum install -y openssl-devel sudo yum install -y fontconfig-devel sudo yum install -y freetype-devel sudo yum install -y libpng-devel sudo yum install -y ImageMagick sudo yum install -y ImageMagick-c++ sudo yum install -y python sudo yum install -y zlib-devel sudo yum install -y git sudo yum install -y libgit2-devel sudo yum install -y zeromq-devel sudo yum install -y fribidi-devel sudo yum install -y harfbuzz-devel sudo yum install -y libjpeg-turbo-devel sudo yum install -y libtiff-devel"},{"path":"https://bioinfocz.github.io/scdrake/dev/required_libs_linux.html","id":"opensuse-423","dir":"","previous_headings":"","what":"opensuse 42.3","title":"Required libraries for Linux systems","text":"","code":"sudo zypper install -y gmp-devel sudo zypper install -y libxml2-devel sudo zypper install -y pandoc sudo zypper install -y make sudo zypper install -y libicu-devel sudo zypper install -y libcurl-devel sudo zypper install -y libopenssl-devel sudo zypper install -y fontconfig-devel sudo zypper install -y freetype2-devel sudo zypper install -y libpng16-compat-devel sudo zypper install -y ImageMagick sudo zypper install -y ImageMagick-devel sudo zypper install -y libMagick++-devel sudo zypper install -y python sudo zypper install -y zlib-devel sudo zypper install -y git sudo zypper install -y libgit2-devel sudo zypper install -y zeromq-devel sudo zypper install -y fribidi-devel sudo zypper install -y harfbuzz-devel sudo zypper install -y libjpeg8-devel sudo zypper install -y libtiff-devel"},{"path":"https://bioinfocz.github.io/scdrake/dev/required_libs_linux.html","id":"centos-8","dir":"","previous_headings":"","what":"centos 8","title":"Required libraries for Linux systems","text":"","code":"sudo dnf install -y epel-release sudo dnf install -y dnf-plugins-core sudo dnf config-manager --set-enabled powertools sudo dnf install -y glpk-devel sudo dnf install -y gmp-devel sudo dnf install -y libxml2-devel sudo dnf install -y pandoc sudo dnf install -y make sudo dnf install -y libicu-devel sudo dnf install -y libcurl-devel sudo dnf install -y openssl-devel sudo dnf install -y fontconfig-devel sudo dnf install -y freetype-devel sudo dnf install -y libpng-devel sudo dnf install -y ImageMagick sudo dnf install -y ImageMagick-c++-devel sudo dnf install -y python2 sudo dnf install -y zlib-devel sudo dnf install -y git sudo dnf install -y libgit2-devel sudo dnf install -y zeromq-devel sudo dnf install -y fribidi-devel sudo dnf install -y harfbuzz-devel sudo dnf install -y libjpeg-turbo-devel sudo dnf install -y libtiff-devel"},{"path":"https://bioinfocz.github.io/scdrake/dev/required_libs_linux.html","id":"centos-7","dir":"","previous_headings":"","what":"centos 7","title":"Required libraries for Linux systems","text":"","code":"sudo yum install -y epel-release sudo yum install -y glpk-devel sudo yum install -y gmp-devel sudo yum install -y libxml2-devel sudo yum install -y pandoc sudo yum install -y make sudo yum install -y libicu-devel sudo yum install -y libcurl-devel sudo yum install -y openssl-devel sudo yum install -y fontconfig-devel sudo yum install -y freetype-devel sudo yum install -y libpng-devel sudo yum install -y ImageMagick sudo yum install -y ImageMagick-c++-devel sudo yum install -y python sudo yum install -y zlib-devel sudo yum install -y git sudo yum install -y libgit2-devel sudo yum install -y zeromq-devel sudo yum install -y fribidi-devel sudo yum install -y harfbuzz-devel sudo yum install -y libjpeg-turbo-devel sudo yum install -y libtiff-devel"},{"path":"https://bioinfocz.github.io/scdrake/dev/news/index.html","id":"scdrake-160","dir":"Changelog","previous_headings":"","what":"scdrake 1.6.0","title":"scdrake 1.6.0","text":"See vignette(\"scdrake_spatial\"). Added annotation using user-defined marker genes. Updated stage_input_qc stage_norm_clustering vignettes.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/news/index.html","id":"scdrake-150","dir":"Changelog","previous_headings":"","what":"scdrake 1.5.0","title":"scdrake 1.5.0","text":"Divided sections smaller subplans (e.g. dimred plots clustering). also applies child RMarkdown documents. Minor config polishing. clustering types can now enabled disabled. Added Leiden algorithm graph-based clustering. Added multiple resolutions Leiden Louvain algorithms. Polished clustering names colData(). Added clustree visualize cluster abundances different ks resolutions. Added Harmony integration. Allow load data 01_input_qc stage also SCE object drake cache. Subsetting imported SCE object 01_input_qc stage. Major refactoring update documentation (vignettes).","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/news/index.html","id":"scdrake-141","dir":"Changelog","previous_headings":"","what":"scdrake 1.4.1","title":"scdrake 1.4.1","text":"Fixed line ending option autogenerated RStudio file new projects. \"rds\" now default storage format drake cache. See DRAKE_MEMORY_STRATEGY can help machines low memory. Added support arm64 architecture download_yq(). Added Dockerfile arm64 platform. Updated scdrake_docker vignette.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/news/index.html","id":"scdrake-140","dir":"Changelog","previous_headings":"","what":"scdrake 1.4.0","title":"scdrake 1.4.0","text":"See vignette(\"scdrake_docker\"). See vignette(\"scdrake_cli\"). run_single_sample() run_integration() now soft-deprecated. Several bugs fixed. Text/visual/user-experience refinements. dev/run_check.R dev/run_tests.R (former run_pipeline_tests.R) now uses R-based CLI run Rscript. deps.Dockerfile install scdrake dependencies DESCRIPTION.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/news/index.html","id":"scdrake-132","dir":"Changelog","previous_headings":"","what":"scdrake 1.3.2","title":"scdrake 1.3.2","text":"Simplified default configs, vignettes updated accordingly. Minor updates vignettes. Added pipeline diagrams.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/news/index.html","id":"scdrake-131","dir":"Changelog","previous_headings":"","what":"scdrake 1.3.1","title":"scdrake 1.3.1","text":"New feature: “inject” custom cell data. See ADDITIONAL_CELL_DATA_FILE parameter 02_norm_clustering stage vignette. Datasets integration can now imported also Rds files. structure INTEGRATION_SOURCES parameters changed - please, review configs. Updated documentation. Fixed rare bugs.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/news/index.html","id":"scdrake-130","dir":"Changelog","previous_headings":"","what":"scdrake 1.3.0","title":"scdrake 1.3.0","text":"Added support custom plan located (default) plan_custom.R script project directory. GitHub version SingleR removed DESCRIPTION version current Bioconductor version available official Bioc repository. GitHub version compatible Bioc 3.16 caused installation error Bioc 3.15 Fixed “object cfg found”. Clearer instructions Get Started vignette. part integration pipeline moved separate vignette. New vignettes extension pipeline FAQ & Howto. Clearer installation instructions, including commands needed install shared libraries different OSs. parts vignettes rewritten, spellchecked improved cosmetically. Cell gene filtering can now disabled single parameter (ENABLE_CELL_FILTERING, ENABLE_GENE_FILTERING). Require clustermq version >= 0.8.8, show warning version greater. Checks SC3 version installed github.com/gorgitko/SC3, also allow version Bioconductor. Show used functions links stage reports. New pipeline config variable DRAKE_REBUILD allowing force rebuild targets. Fixed various corner case bugs. Small enhancements functions. vignettes extended updated.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/news/index.html","id":"scdrake-123","dir":"Changelog","previous_headings":"","what":"scdrake 1.2.3","title":"scdrake 1.2.3","text":"Fixed bug sce_final_norm_clustering target already present columns colData() updated new ones cell_data target. happen SCE object imported 01_input_qc stage already contained cluster assignments colData() previous scdrake run.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/news/index.html","id":"scdrake-122","dir":"Changelog","previous_headings":"","what":"scdrake 1.2.2","title":"scdrake 1.2.2","text":"Fixed typo 01_input_qc stage report, added line emptyDroplets lower bound barcode rank plot. new helper function create_dummy_plot().","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/news/index.html","id":"scdrake-121","dir":"Changelog","previous_headings":"","what":"scdrake 1.2.1","title":"scdrake 1.2.1","text":"02_norm_clustering 02_int_clustering stage reports PNG files displayed act links associated multipage PDF files. New parameters stages : NORM_CLUSTERING_DIMRED_PLOTS_OUT_DIR INT_CLUSTERING_DIMRED_PLOTS_OUT_DIR, respectively.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/news/index.html","id":"scdrake-120","dir":"Changelog","previous_headings":"","what":"scdrake 1.2.0","title":"scdrake 1.2.0","text":"See new config parameters targets . Code documentation refactoring, minor bug fixes. Updated renv.lock.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/news/index.html","id":"scdrake-110","dir":"Changelog","previous_headings":"","what":"scdrake 1.1.0","title":"scdrake 1.1.0","text":"delimited text file (table) representing feature-barcode matrix. SingleCellExperiment object saved Rds file. Input type controlled new INPUT_DATA parameter (replaces INPUT_10X_DIR) 01_input_qc.yaml config. Details can found vignette(\"stage_input_qc\"). Removal empty droplets can now disabled (EMPTY_DROPLETS_ENABLED parameter). now possible turn normalization (NORMALIZATION_TYPE: \"none\") input can already normalized SingleCellExperiment object (meaning went scdrake pipeline ). Minor updates bug fixes, updated documentation.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/news/index.html","id":"scdrake-101","dir":"Changelog","previous_headings":"","what":"scdrake 1.0.1","title":"scdrake 1.0.1","text":"download_yq() now supports masOS (darwin). Fixed URL Windows version (.exe extension). Better OS resolution implemented .get_os(). Fixed issues yq tool’s binary download Windows. Modified .confirm_menu() non-interactive usage. Activate RStudio project end init_project() function. Fixed links source code GH.","code":""},{"path":"https://bioinfocz.github.io/scdrake/dev/news/index.html","id":"scdrake-100","dir":"Changelog","previous_headings":"","what":"scdrake 1.0.0","title":"scdrake 1.0.0","text":"Initial release.","code":""}]

## Read more about GitHub actions the features of this GitHub Actions workflow
## at https://lcolladotor.github.io/biocthis/articles/biocthis.html#use_bioc_github_action
##
## For more details, check the biocthis developer notes vignette at
## https://lcolladotor.github.io/biocthis/articles/biocthis_dev_notes.html
##
## You can add this workflow to other packages using:
## > biocthis::use_bioc_github_action()
##
## Using GitHub Actions exposes you to many details about how R packages are
## compiled and installed in several operating system.s
### If you need help, please follow the steps listed at
## https://github.com/r-lib/actions#where-to-find-help
##
## If you found an issue specific to biocthis's GHA workflow, please report it
## with the information that will make it easier for others to help you.
## Thank you!

## Acronyms:
## * GHA: GitHub Action
## * OS: operating system

name: R-CMD-check-bioc
on:
  push:
    branches: ['main']
    paths:
      - 'R/**'
      - 'inst/**'
      - 'man/**'
      - 'tests/**'
      - 'vignettes/**'
      - '.Rbuildignore'
      - 'DESCRIPTION'
      - 'NAMESPACE'
      - '.github/workflows/check-bioc.yaml'
  pull_request:
    branches: ['main']
    paths:
      - 'R/**'
      - 'inst/**'
      - 'man/**'
      - 'tests/**'
      - 'vignettes/**'
      - '.Rbuildignore'
      - 'DESCRIPTION'
      - 'NAMESPACE'
      - '.github/workflows/check-bioc.yaml'
concurrency:
  group: main

## These environment variables control whether to run GHA code later on that is
## specific to testthat, covr, and pkgdown.
##
## If you need to clear the cache of packages, update the number inside
## cache-version as discussed at https://github.com/r-lib/actions/issues/86.
## Note that you can always run a GHA test without the cache by using the word
## "/nocache" in the commit message.
env:
  has_testthat: 'true'
  run_covr: 'false'
  run_pkgdown: 'true'
  has_RUnit: 'false'
  cache-version: 'cache-v1'
  run_docker: 'false'

jobs:
  build-check:
    strategy:
      fail-fast: false
      matrix:
        config:
          - { os: ubuntu-latest, r: '4.1', bioc: '3.14', cont: "bioconductor/bioconductor_docker:RELEASE_3_14", rspm: "https://packagemanager.rstudio.com/cran/__linux__/focal/latest" }
          - { os: macOS-latest, r: '4.1', bioc: '3.13'}
          # - { os: windows-latest, r: '4.1', bioc: '3.13'}
    runs-on: ${{ matrix.config.os }}
    name: ${{ matrix.config.os }} (${{ matrix.config.r }})
    container: ${{ matrix.config.cont }}

    env:
      R_REMOTES_NO_ERRORS_FROM_WARNINGS: true
      RSPM: ${{ matrix.config.rspm }}
      NOT_CRAN: true
      TZ: UTC
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
      YQ_VERSION: '3.4.1'

    steps:
      ## Set the R library to the directory matching the
      ## R packages cache step further below when running on Docker (Linux).
      - name: Set R Library home on Linux
        if: runner.os == 'Linux'
        run: |
          mkdir /__w/_temp/Library
          echo ".libPaths('/__w/_temp/Library')" > ~/.Rprofile

      - name: Append yq binary directory to PATH (Linux + macOS)
        if: matrix.config.os != 'windows-latest'
        run: |
          mkdir -p "${HOME}/.local/bin"
          echo "${HOME}/.local/bin" >> ${GITHUB_PATH}

      - name: Append yq binary directory to PATH (Windows)
        if: matrix.config.os == 'windows-latest'
        run: |
          mkdir "${HOME}/.local/bin" -ea 0
          echo "${HOME}/.local/bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Set type of R packages
        shell: bash
        run: |
          if [[ ${{ matrix.config.os }} == "windows-latest" ]]; then
            R_PACKAGES_TYPE="binary"
          else
            R_PACKAGES_TYPE="source"
          fi
          echo "R_PACKAGES_TYPE=${R_PACKAGES_TYPE}" >> $GITHUB_ENV

      - name: Fix actions/checkout/issues/760
        run: git config --global --add safe.directory /__w/scdrake/scdrake
        # run: export GIT_CEILING_DIRECTORIES=/__w

      ## Most of these steps are the same as the ones in
      ## https://github.com/r-lib/actions/blob/master/examples/check-standard.yaml
      ## If they update their steps, we will also need to update ours.
      - name: Checkout Repository
        uses: actions/checkout@v3

      ## R is already included in the Bioconductor docker images
      - name: Setup R from r-lib
        if: runner.os != 'Linux'
        uses: r-lib/actions/setup-r@master
        with:
          r-version: ${{ matrix.config.r }}

      ## pandoc is already included in the Bioconductor docker images
      - name: Setup pandoc from r-lib
        if: runner.os != 'Linux'
        uses: r-lib/actions/setup-pandoc@master

      - name: Query dependencies
        run: |
          install.packages('remotes')
          saveRDS(remotes::dev_package_deps(dependencies = TRUE), ".github/depends.Rds", version = 2)
        shell: Rscript {0}

      - name: Cache R packages
        if: "!contains(github.event.head_commit.message, '/nocache') && runner.os != 'Linux'"
        uses: actions/cache@v2
        # uses: pat-s/always-upload-cache@main
        with:
          path: ${{ env.R_LIBS_USER }}
          key: ${{ env.cache-version }}-${{ runner.os }}-bioc_${{ matrix.config.bioc }}-r_${{ matrix.config.r }}-${{ hashFiles('.github/depends.Rds') }}
          restore-keys: ${{ env.cache-version }}-${{ runner.os }}-bioc_${{ matrix.config.bioc }}-r_${{ matrix.config.r }}-

      - name: Cache R packages on Linux
        if: "!contains(github.event.head_commit.message, '/nocache') && runner.os == 'Linux' "
        uses: actions/cache@v2
        # uses: pat-s/always-upload-cache@main
        with:
          path: /home/runner/work/_temp/Library
          key: ${{ env.cache-version }}-${{ runner.os }}-bioc_${{ matrix.config.bioc }}-r_${{ matrix.config.r }}-${{ hashFiles('.github/depends.Rds') }}
          restore-keys: ${{ env.cache-version }}-${{ runner.os }}-bioc_${{ matrix.config.bioc }}-r_${{ matrix.config.r }}-

      - name: Install Linux system dependencies
        if: runner.os == 'Linux'
        run: |
          sysreqs=$(Rscript -e 'cat("apt-get update -y && apt-get install -y", paste(gsub("apt-get install -y ", "", remotes::system_requirements("ubuntu", "20.04")), collapse = " "))')
          echo $sysreqs
          sudo -s eval "$sysreqs"

      - name: Install macOS system dependencies
        if: matrix.config.os == 'macOS-latest'
        run: |
          ## Enable installing XML from source if needed
          brew install libxml2
          echo "XML_CONFIG=/usr/local/opt/libxml2/bin/xml2-config" >> $GITHUB_ENV

          ## Required to install magick as noted at
          ## https://github.com/r-lib/usethis/commit/f1f1e0d10c1ebc75fd4c18fa7e2de4551fd9978f#diff-9bfee71065492f63457918efcd912cf2
          brew install imagemagick@6

          ## For textshaping, required by ragg, and required by pkgdown
          brew install harfbuzz fribidi

          ## For installing usethis's dependency gert
          brew install libgit2

          ## For clustermq
          brew install zeromq

      - name: Install Windows system dependencies
        if: runner.os == 'Windows'
        run: |
          ## Edit below if you have any Windows system dependencies
        shell: Rscript {0}

      - name: Prepare paths to yq tool's binary
        shell: bash
        run: |
          extension=""
          base_url="http://github.com/mikefarah/yq/releases/download/${{ env.YQ_VERSION }}"
          if [[ ${{ matrix.config.os }} == "ubuntu-latest" ]]; then
            YQ_URL="${base_url}/yq_linux_amd64"
          elif [[ ${{ matrix.config.os }} == "macOS-latest" ]]; then
            YQ_URL="${base_url}/yq_darwin_amd64"
          else
            YQ_URL="${base_url}/yq_windows_amd64.exe"
            extension=".exe"
          fi
          YQ_PATH="${HOME}/.local/bin/yq${extension}"
          echo "YQ_URL: ${YQ_URL}
          echo "YQ_PATH: ${YQ_PATH}
          echo "YQ_URL=${YQ_URL}" >> $GITHUB_ENV
          echo "YQ_PATH=${YQ_PATH}" >> $GITHUB_ENV

      # - name: Cache the yq tool
      #   id: cache-yq
      #   # uses: actions/cache@v2
      #   uses: pat-s/always-upload-cache@main
      #   with:
      #     path: ${{ env.YQ_PATH }}
      #     key: ${{ env.cache-version }}-${{ runner.os }}-yq_${{ env.YQ_VERSION }}
      #     restore-keys: ${{ env.cache-version }}-${{ runner.os }}-yq

      - name: Download the yq tool
        # if: steps.cache-yq.outputs.cache-hit != 'true'
        shell: bash
        run: |
          curl -L ${{ env.YQ_URL }} --output ${{ env.YQ_PATH }}
          chmod +x ${{ env.YQ_PATH }}

      - name: Test the yq tool
        shell: bash
        run: |
          yq_version=$(yq -V)
          if [ $? -ne 0 ]; then
            echo "ERROR: The yq tool is not available in shell: '${yq_version}'"
            exit 1
          else
            echo "The yq tool is available in shell: '${yq_version}'"
            echo "Trying the availability from within R:"
            yq_check_r=$(Rscript --verbose -e "if (Sys.which('yq') == '') cat('error')")
            if [[ "$yq_check_r" == "error" ]]; then
              echo "ERROR: The yq tool is not available from within R."
              echo "R env:"
              Rscript --verbose -e "Sys.getenv()"
              exit 1
            fi
          fi

      - name: Install BiocManager
        run: |
          message(paste('****', Sys.time(), 'installing BiocManager ****'))
          remotes::install_cran("BiocManager")
        shell: Rscript {0}

      - name: Install Bioconductor (Linux)
        if: matrix.config.os == 'ubuntu-latest'
        run: |
          ## SC3 and SingleR are installed from GitHub, but if install() is run without the pkgs argument,
          ## the BioConductor version will be installed instead.
          installed <- rownames(installed.packages())
          installed <- installed[installed %in% c("SC3", "SingleR")]
          BiocManager::install(pkgs = installed, version = "${{ matrix.config.bioc }}", ask = FALSE, update = TRUE)
        shell: Rscript {0}

      - name: Install Bioconductor (macOS)
        if: matrix.config.os == 'macOS-latest'
        run: |
          BiocManager::install(version = "${{ matrix.config.bioc }}", ask = FALSE, update = TRUE)
        shell: Rscript {0}

      - name: Install Bioconductor (Windows)
        if: matrix.config.os == 'windows-latest'
        run: |
          BiocManager::install(version = "${{ matrix.config.bioc }}", ask = FALSE, update = TRUE, type = "binary")
        shell: Rscript {0}

      # - name: Install SC3 dependencies not available as binaries on Windows
      #   if: matrix.config.os == 'windows-latest'
      #   run: |
      #     BiocManager::install(c("GenomeInfoDbData", "org.Hs.eg.db"), ask = FALSE, update = TRUE, type = "source")
      #   shell: Rscript {0}

      ## SC3 installation is failing downstream, because dependencies needed for its vignettes are not already installed.
      - name: Install SC3 from GitHub (gorgitko/SC3)
        run: |
          message(paste('****', Sys.time(), 'installing gorgitko/SC3 ****'))
          remotes::install_github(
            "gorgitko/SC3", dependencies = TRUE, build_vignettes = FALSE, repos = BiocManager::repositories(),
            type = "${{ env.R_PACKAGES_TYPE }}"
          )
        shell: Rscript {0}

      - name: Install SingleR from GitHub (LTLA/SingleR)
        run: |
          message(paste('****', Sys.time(), 'installing LTLA/SingleR ****'))
          remotes::install_github(
            "LTLA/SingleR", dependencies = TRUE, build_vignettes = FALSE, repos = BiocManager::repositories(),
            type = "${{ env.R_PACKAGES_TYPE }}"
          )
        shell: Rscript {0}

      - name: Install scdrake dependencies (pass 1)
        run: |
          ## Try installing the package dependencies in steps. First the local
          ## dependencies, then any remaining dependencies to avoid the
          ## issues described at
          ## https://stat.ethz.ch/pipermail/bioc-devel/2020-April/016675.html
          ## https://github.com/r-lib/remotes/issues/296
          ## Ideally, all dependencies should get installed in the first pass.

          ## Pass #1 at installing dependencies
          # message(paste('****', Sys.time(), 'pass number 1 at installing dependencies: local dependencies ****'))
          # remotes::install_local(dependencies = TRUE, repos = BiocManager::repositories(), build_vignettes = TRUE, upgrade = TRUE, force = TRUE)
          message(paste('****', Sys.time(), 'pass number 1 at installing scdrake dependencies ****'))
          remotes::install_deps(
            dependencies = TRUE, repos = BiocManager::repositories(), build_vignettes = FALSE, upgrade = TRUE,
            type = "${{ env.R_PACKAGES_TYPE }}"
          )
        continue-on-error: true
        shell: Rscript {0}

      - name: Install scdrake dependencies (pass 2)
        run: |
          ## Pass #2 at installing dependencies
          # message(paste('****', Sys.time(), 'pass number 2 at installing dependencies: any remaining dependencies ****'))
          # remotes::install_local(dependencies = TRUE, repos = BiocManager::repositories(), build_vignettes = TRUE, upgrade = TRUE, force = TRUE)
          message(paste('****', Sys.time(), 'pass number 2 at installing scdrake dependencies: any remaining dependencies ****'))
          remotes::install_deps(
            dependencies = TRUE, repos = BiocManager::repositories(), build_vignettes = FALSE, upgrade = TRUE,
            type = "${{ env.R_PACKAGES_TYPE }}"
          )
        shell: Rscript {0}

      - name: Install package checking tools
        run: |
          message(paste('****', Sys.time(), 'installing rcmdcheck and BiocCheck ****'))
          remotes::install_cran("rcmdcheck")
          BiocManager::install("BiocCheck")
        shell: Rscript {0}

      - name: Install scdrake
        run: |
          message(paste('****', Sys.time(), 'installing scdrake ****'))
          remotes::install_local(
            dependencies = TRUE, repos = BiocManager::repositories(), build_vignettes = TRUE, upgrade = TRUE, force = TRUE,
            type = "${{ env.R_PACKAGES_TYPE }}"
          )
        shell: Rscript {0}

      - name: Install BiocGenerics
        if:  env.has_RUnit == 'true'
        run: |
          BiocManager::install("BiocGenerics")
        shell: Rscript {0}

      - name: Install covr
        if: github.ref == 'refs/heads/gh-pages' && env.run_covr == 'true' && runner.os == 'Linux'
        run: |
          remotes::install_cran("covr")
        shell: Rscript {0}

      - name: Install pkgdown
        if: github.ref == 'refs/heads/gh-pages' && env.run_pkgdown == 'true' && runner.os == 'Linux'
        run: |
          remotes::install_cran("pkgdown")
        shell: Rscript {0}

      - name: Session info
        run: |
          options(width = 100)
          pkgs <- installed.packages()[, "Package"]
          sessioninfo::session_info(pkgs, include_base = TRUE)
        shell: Rscript {0}

      - name: Run CMD check
        env:
          _R_CHECK_CRAN_INCOMING_: false
        run: |
          rcmdcheck::rcmdcheck(
              args = c("--no-build-vignettes", "--no-manual", "--timings"),
              build_args = c("--no-manual", "--no-resave-data"),
              error_on = "warning",
              check_dir = "check"
          )
        shell: Rscript {0}

      ## Might need an to add this to the if:  && runner.os == 'Linux'
      - name: Reveal testthat details
        if:  env.has_testthat == 'true'
        run: find . -name testthat.Rout -exec cat '{}' ';'

      - name: Run RUnit tests
        if:  env.has_RUnit == 'true'
        run: |
          BiocGenerics:::testPackage()
        shell: Rscript {0}

      # - name: Run BiocCheck
      #   run: |
      #     BiocCheck::BiocCheck(
      #         dir('check', 'tar.gz$', full.names = TRUE),
      #         `quit-with-status` = TRUE,
      #         `no-check-R-ver` = TRUE,
      #         `no-check-bioc-help` = TRUE
      #     )
      #   shell: Rscript {0}

      - name: Test coverage
        if: github.ref == 'refs/heads/gh-pages' && env.run_covr == 'true' && runner.os == 'Linux'
        run: |
          covr::codecov()
        shell: Rscript {0}

      - name: Install pkgdown
        if: env.run_pkgdown == 'true' && runner.os == 'Linux'
        run: |
          # BiocManager::install("pkgdown")
          ## We need dev version because of https://github.com/r-lib/pkgdown/issues/1958
          BiocManager::install("r-lib/pkgdown")
        shell: Rscript {0}

      - name: Debug checkout
        run: |
          echo "Current working directory: '$(pwd)'"
          find .

      ## Note that you need to run pkgdown::deploy_to_branch(new_process = FALSE)
      ## at least one locally before this will work. This creates the gh-pages
      ## branch (erasing anything you haven't version controlled!) and
      ## makes the git history recognizable by pkgdown.
      - name: Deploy pkgdown docs to gh-pages
        if: env.run_pkgdown == 'true' && runner.os == 'Linux'
        shell: bash
        run: |
          echo "Current working directory: '$(pwd)'"
          find .
          echo "Is current directory a git repo? '$(git rev-parse --is-inside-work-tree)'"
          git config --local user.name "$GITHUB_ACTOR"
          git config --local user.email "$GITHUB_ACTOR@users.noreply.github.com"
          # Rscript -e "pkgdown::deploy_to_branch(new_process = FALSE)"
          ## I really don't know how to fix https://github.com/r-lib/pkgdown/issues/1958 properly.
          Rscript -e "withr::with_envvar(c(CI = 'FALSE'), pkgdown::deploy_to_branch(new_process = FALSE))"

      - name: Upload check results
        if: failure()
        uses: actions/upload-artifact@master
        with:
          name: ${{ runner.os }}-bioc_${{ matrix.config.bioc }}-r_${{ matrix.config.r }}-results
          path: check

      - uses: docker/build-push-action@v1
        if: "!contains(github.event.head_commit.message, '/nodocker') && env.run_docker == 'true' && runner.os == 'Linux' "
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          repository: bioinfocz/scdrake
          tag_with_ref: true
          tag_with_sha: true
          tags: latest

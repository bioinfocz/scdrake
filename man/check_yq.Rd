% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/yq.R
\name{check_yq}
\alias{check_yq}
\title{Check the availability and version of the yq tool.}
\usage{
check_yq(
  yq_binary = getOption("scdrake_yq_binary"),
  repair_executable = TRUE,
  verbose = getOption("scdrake_verbose")
)
}
\arguments{
\item{yq_binary}{A character scalar: path to the \code{yq} tool's binary.}

\item{repair_executable}{A logical scalar: if \code{TRUE}, make the binary executable.}

\item{verbose}{A logical scalar: if \code{TRUE}, be verbose.
The default value is obtained from \code{getOption("scdrake_verbose")}.}
}
\value{
\code{TRUE} if checks pass.
}
\description{
Check the availability and version of the yq tool.
}
\details{
When R is run from the command line, the \code{PATH} environment variable is inherited from the current shell
session. But when R is run within the RStudio Server, user's \code{PATH} is not used. To modify the environment in which
R is run within your project, place \code{.Renviron} file to the root of your project, e.g.:\if{html}{\out{<div class="sourceCode bash">}}\preformatted{echo 'PATH=$\{PATH\}:"/path/to/dir/with/yq"' >> .Renviron
}\if{html}{\out{</div>}}

Environment variables defined in \code{.Renviron} will be available in the R session run within the RStudio project.

Alternatively in R after \code{scdrake} package is loaded, you can set a path to the \code{yq} tool's binary with
\code{options(scdrake_yq_binary = "/path/to/yq/binary")}.
}
\concept{yq_tool}

% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/classes.R, R/generics.R
\name{scdrake_list}
\alias{scdrake_list}
\alias{$.scdrake_list}
\alias{[.scdrake_list}
\alias{[[.scdrake_list}
\title{A \code{scdrake}'s list with overloaded, strict access operators.}
\usage{
scdrake_list(l = NULL)

\method{$}{scdrake_list}(x, i)

\method{[}{scdrake_list}(x, i, check = TRUE)

\method{[[}{scdrake_list}(x, i, check = TRUE)
}
\arguments{
\item{l}{A list.}

\item{x}{An object of class \code{scdrake_list}.}

\item{i}{A character scalar or vector: name / names of element(s) to extract.}

\item{check}{A logical scalar: if \code{TRUE}, throw an error when non-existing names or subscripts are present.}
}
\value{
An object of class \code{scdrake_list}.
}
\description{
It behaves like a normal list, but, by default, it has more strict rules for non-existing elements:
\code{$}, \code{[}, and \code{[[} operators are overloaded for this class.
They try to extract element(s) from a \code{scdrake_list} object, but throw an error when the element(s) does not exist.
This behaviour can be avoided for \code{[} and \code{[[} by using the \code{check = FALSE} parameter, e.g. \code{l[name, check = FALSE]}.
Also, in that case and for \code{[}, a \code{scdrake_list} with non-existing names and \code{NULL} values is returned instead of putting
\code{NA_character_} for them, which is the default behaviour for a base list, e.g.

\if{html}{\out{<div class="sourceCode r">}}\preformatted{> list(a = 2)["b"]
$<NA>
NULL
}\if{html}{\out{</div>}}

compared to

\if{html}{\out{<div class="sourceCode r">}}\preformatted{> scdrake_list(list(a = 2))["b", check = FALSE]
$b
NULL

attr(,"class")
[1] "scdrake_list"
}\if{html}{\out{</div>}}

However, this does not work for numeric subscripts.
}
\examples{
cfg <- scdrake_list(list(var_1 = 1, var_2 = 2))
# The standard list behavior.
cfg$var_1
cfg[["var_2"]]
cfg["var_1"]
cfg[c("var_1", "var_2")]
\dontrun{
# Strict rules for non-existing elements - throws an error.
cfg$var_3
cfg[["var_3"]]
cfg[c("var_1", "var_3")]
}

}
